{"_step": 485, "_timestamp": 1581458605.0936143, "train-loss": 0.9995272393325265, "_runtime": 6303.691757678986, "train-mrr": 0.026295552907485358, "epoch": 19, "val-loss": 1.0002381252615076, "val-time-sec": 3.393352508544922, "train-time-sec": 215.1491665840149, "val-mrr": 0.01986670716812736, "best_val_mrr_loss": 1.0000672105111574, "best_val_mrr": 0.052515175028851155, "best_epoch": 0, "Examples-Test": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[745, "java", "Is24XmlUtils.getContext", "```java\npublic synchronized static JAXBContext getContext() throws JAXBException {\n        if (JAXB == null) initContext(Thread.currentThread().getContextClassLoader());\n        return JAXB;\n    }\n```"], [480, "java", "LogServiceImpl.setLoggerLevel", "```java\npublic void setLoggerLevel(String loggerName, String level) throws ManagementConsoleException {\r\n\r\n    sleeConnection.getSleeManagementMBeanUtils().getLogManagementMBeanUtils().setLoggerLevel(loggerName, level);\r\n\r\n  }\n```"], [126, "java", "Observable.hide", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> hide() {\n        return RxJavaPlugins.onAssembly(new ObservableHide<T>(this));\n    }\n```"], [432, "java", "FileAppender.setFile", "```java\npublic void setFile(String file) {\n    if (file == null) {\n      fileName = null;\n    } else {\n      // Trim spaces from both ends. The users probably does not want\n      // trailing spaces in file names.\n      fileName = file.trim();\n    }\n  }\n```"], [549, "java", "Properties.inspectProperties", "```java\nprotected HashMap<String, PropertyDescriptor> inspectProperties() {\n\t\tboolean scanAccessible = classDescriptor.isScanAccessible();\n\t\tClass type = classDescriptor.getType();\n\n\t\tHashMap<String, PropertyDescriptor> map = new HashMap<>();\n\n\t\tMethod[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type);\n\n\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t// first find the getters, and then the setters!\n\t\t\tfor (Method method : methods) {\n\t\t\t\tif (Modifier.isStatic(method.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static methods\n\t\t\t\t}\n\n\t\t\t\tboolean add = false;\n\t\t\t\tboolean issetter = false;\n\n\t\t\t\tString propertyName;\n\n\t\t\t\tif (iteration == 0) {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertyGetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertySetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (add) {\n\t\t\t\t\tMethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true);\n\t\t\t\t\taddProperty(map, propertyName, methodDescriptor, issetter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classDescriptor.isIncludeFieldsAsProperties()) {\n\t\t\tFieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors();\n\t\t\tString[] prefix = classDescriptor.getPropertyFieldPrefix();\n\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldDescriptors) {\n\t\t\t\tField field = fieldDescriptor.getField();\n\n\t\t\t\tif (Modifier.isStatic(field.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static fields\n\t\t\t\t}\n\n\t\t\t\tString name = field.getName();\n\n\t\t\t\tif (prefix != null) {\n\t\t\t\t\tfor (String p : prefix) {\n\t\t\t\t\t\tif (!name.startsWith(p)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = name.substring(p.length());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!map.containsKey(name)) {\n\t\t\t\t\t// add missing field as a potential property\n\t\t\t\t\tmap.put(name, createPropertyDescriptor(name, fieldDescriptor));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn map;\n\t}\n```"], [59, "java", "ExceptionHelper.wrapOrThrow", "```java\npublic static RuntimeException wrapOrThrow(Throwable error) {\n        if (error instanceof Error) {\n            throw (Error)error;\n        }\n        if (error instanceof RuntimeException) {\n            return (RuntimeException)error;\n        }\n        return new RuntimeException(error);\n    }\n```"], [606, "java", "SegmentedByteArray.rangeEquals", "```java\npublic boolean rangeEquals(long rangeStart, SegmentedByteArray compareTo, long cmpStart, int length) {\n    \tfor(int i=0;i<length;i++)\n    \t\tif(get(rangeStart + i) != compareTo.get(cmpStart + i))\n    \t\t\treturn false;\n    \treturn true;\n    }\n```"], [18, "java", "Update.getVersion", "```java\npublic String getVersion() throws MalformedElementException {\n        Element version = getFirstChild(root, \"version\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingVersionElmt\"), version); //$NON-NLS-1$\n        String href = getChildText(version, \"href\", true); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingHrefElmt\"), href); //$NON-NLS-1$\n        return decodeHref(href);\n    }\n```"], [346, "java", "AbstractRequestMatcherRegistry.antMatchers", "```java\npublic C antMatchers(String... antPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure antMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.antMatchers(antPatterns));\n\t}\n```"], [439, "java", "AbstractRefreshMetricsListener.noFailRefreshEndMetricsReporting", "```java\nprivate final void noFailRefreshEndMetricsReporting(ConsumerRefreshMetrics refreshMetrics) {\n        try {\n            refreshEndMetricsReporting(refreshMetrics);\n        } catch (Exception e) {\n            // Metric reporting is not considered critical to consumer refresh. Log exceptions and continue.\n            log.log(Level.SEVERE, \"Encountered an exception in reporting consumer refresh metrics, ignoring exception and continuing with consumer refresh\", e);\n        }\n    }\n```"], [49, "java", "JtxTransaction.commitOrRollback", "```java\nprotected void commitOrRollback(boolean doCommit) {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (doCommit) {\n\t\t\t\tlog.debug(\"Commit JTX\");\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Rollback JTX\");\n\t\t\t}\n\t\t}\n\t\tboolean forcedRollback = false;\n\t\tif (!isNoTransaction()) {\n\t\t\tif (isRollbackOnly()) {\n\t\t\t\tif (doCommit) {\n\t\t\t\t\tdoCommit = false;\n\t\t\t\t\tforcedRollback = true;\n\t\t\t\t}\n\t\t\t} else if (!isActive()) {\n\t\t\t\tif (isCompleted()) {\n\t\t\t\t\tthrow new JtxException(\"TX is already completed, commit or rollback should be called once per TX\");\n\t\t\t\t}\n\t\t\t\tthrow new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\"));\n\t\t\t}\n\t\t}\n\t\tif (doCommit) {\n\t\t\tcommitAllResources();\n\t\t} else {\n\t\t\trollbackAllResources(forcedRollback);\n\t\t}\n\t}\n```"], [352, "java", "PrologParser.main", "```java\npublic static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }\n```"], [268, "java", "FileNameUtil.concat", "```java\npublic static String concat(final String basePath, final String fullFilenameToAdd) {\n\t\treturn doConcat(basePath, fullFilenameToAdd, SYSTEM_SEPARATOR);\n\t}\n```"], [387, "java", "UserClient.updateUser", "```java\npublic User updateUser(User userParam)\n    {\n        if(userParam != null && this.serviceTicket != null)\n        {\n            userParam.setServiceTicket(this.serviceTicket);\n        }\n\n        return new User(this.postJson(\n                userParam, WS.Path.User.Version1.userUpdate()));\n    }\n```"], [825, "java", "RollupService.setServerTime", "```java\npublic synchronized void setServerTime(long millis) {\n        log.info(\"Manually setting server time to {}  {}\", millis, new java.util.Date(millis));\n        context.setCurrentTimeMillis(millis);\n    }\n```"], [808, "java", "EmailFilter.or", "```java\nprotected void or(final SearchTerm searchTerm) {\n\t\tif (this.searchTerm == null) {\n\t\t\tthis.searchTerm = searchTerm;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchTerm = new OrTerm(this.searchTerm, searchTerm);\n\t}\n```"], [511, "java", "ReteGraph.addChild", "```java\npublic boolean addChild(BaseVertex vertex) {\n        if ( vertex != null && vertices.add( vertex ) ) {\n            firePropertyChange( PROP_CHILD_ADDED,\n                                null,\n                                vertex );\n            return true;\n        }\n        return false;\n    }\n```"], [156, "java", "JPANotificationRESTController.getNotifications", "```java\n@RequestMapping(method = RequestMethod.GET)\n    @ResponseBody\n    public List<EntryDTO> getNotifications(\n            @RequestParam(value = \"page\", required = false) Integer page,\n            @RequestParam(value = \"pageSize\", required = false) Integer pageSize) {\n\n        return restService.getNotifications(page, pageSize);\n    }\n```"], [301, "java", "Iterators.limit", "```java\npublic static <E> Iterator<E> limit(Iterator<? extends E> iterator,\n\t\tint limit)\n\t{\n\t\treturn new LimitIterator<E>(iterator, limit);\n\t}\n```"], [925, "java", "Base64.encodeToString", "```java\npublic static String encodeToString(String s) {\n        try {\n            return new String(encodeToChar(s.getBytes(ENCODING), false));\n        } catch (UnsupportedEncodingException ignore) {\n            return null;\n        }\n    }\n```"], [103, "java", "AreaGrid.calculateColumns", "```java\nprivate void calculateColumns()\n    {\n        //create the sorted list of points\n        GridPoint points[] = new GridPoint[areas.size() * 2];\n        int pi = 0;\n        for (Area area : areas)\n        {\n            points[pi] = new GridPoint(area.getX1(), area, true);\n            points[pi+1] = new GridPoint(area.getX2() + 1, area, false);\n            pi += 2;\n            //X2+1 ensures that the end of one box will be on the same point\n            //as the start of the following box\n        }\n        Arrays.sort(points);\n        \n        //calculate the number of columns\n        int cnt = 0;\n        int last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n            if (!theSame(points[i].value, last))\n            { \n                last = points[i].value;\n                cnt++;\n            }\n        if (!theSame(last, abspos.getX2()))\n        \tcnt++; //last column finishes the whole area\n        width = cnt;\n        \n        //calculate the column widths and the layout\n        maxindent = 0;\n        minindent = -1;\n        cols = new int[width];\n        cnt = 0;\n        last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n        {\n            if (!theSame(points[i].value, last)) \n            {\n                cols[cnt] = points[i].value - last;\n                last = points[i].value;\n                cnt++;\n            }\n            if (points[i].begin)\n            {\n                target.getPosition(points[i].area).setX1(cnt);\n                maxindent = cnt;\n                if (minindent == -1) minindent = maxindent;\n                //points[i].node.getArea().setX1(parent.getArea().getX1() + getColOfs(cnt));\n            }\n            else\n            {\n                Rectangular pos = target.getPosition(points[i].area); \n                pos.setX2(cnt-1);\n                if (pos.getX2() < pos.getX1())\n                    pos.setX2(pos.getX1());\n                //points[i].node.getArea().setX2(parent.getArea().getX1() + getColOfs(pos.getX2()+1));\n            }\n        }\n        if (!theSame(last, abspos.getX2()))\n        \tcols[cnt] = abspos.getX2() - last;\n        if (minindent == -1)\n            minindent = 0;\n    }\n```"], [570, "java", "JdbcHelper.initialize", "```java\nprivate static void initialize() {\n\t\tString driver = ConfigHelper.getProperty(\"jdbc.driver\");\n\t\tString url = ConfigHelper.getProperty(\"jdbc.url\");\n\t\tString username = ConfigHelper.getProperty(\"jdbc.username\");\n\t\tString password = ConfigHelper.getProperty(\"jdbc.password\");\n\t\tint maxActive = ConfigHelper.getNumerProperty(\"jdbc.max.active\");\n\t\tint maxIdle = ConfigHelper.getNumerProperty(\"jdbc.max.idle\");\n\t\tAssertHelper.notNull(driver);\n\t\tAssertHelper.notNull(url);\n\t\tAssertHelper.notNull(username);\n\t\tAssertHelper.notNull(password);\n\t\t//\u521d\u59cb\u5316DBCP\u6570\u636e\u6e90\n\t\tBasicDataSource ds = new BasicDataSource();\n\t\tds.setDriverClassName(driver);\n\t\tds.setUrl(url);\n\t\tds.setUsername(username);\n\t\tds.setPassword(password);\n        if(maxActive != 0) {\n\t\t    ds.setMaxActive(maxActive);\n        }\n        if(maxIdle != 0) {\n\t\t    ds.setMaxIdle(maxIdle);\n        }\n\t\tdataSource = ds;\n\t}\n```"], [993, "java", "PasswordLoginModule.abort", "```java\n@Override\n    // Check is broken [LOG.info()]: PMD reports issues although log stmt is guarded. @todo revisit when upgrading PMD.\n    @SuppressWarnings(\"PMD.GuardLogStatementJavaUtil\")\n    public final boolean abort()\n            throws LoginException {\n\n        if (pendingSubject == null) {\n            // the login method of this module has failed earlier, hence we do not need to clean up anything\n            // return 'false' to indicate that this module's login and/or commit method failed\n            // As the login method failed, the state of the module has already been cleared and we do not know\n            // the username / domain anymore. Hence no auditing / message queue notification, and not verbose logging.\n\n            LOG.debug(\"Aborting authentication, as the authentication has failed earlier (login method)\");\n\n            return false;\n        } else if (committedSubject == null) {\n            // the login method of this module succeeded, but the overall authentication failed\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Aborting authentication: '\" + username + \"@\" + domain + \"'\");\n            }\n\n            // cache the username and domain, for they will be purged by \"cleanState()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            cleanState();\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(tempUsername).\n                    append(\"@\").\n                    append(tempDomain).\n                    toString();\n            AuditHelper.auditEvent(audit, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        } else {\n            // overall authentication succeeded and commit succeeded, but someone else's commit failed\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(username).\n                    append(\"@\").\n                    append(domain).\n                    toString();\n            AuditHelper.auditEvent(audit, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // cache the username and domain, for they will be purged by \"logout()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            logout();\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        }\n    }\n```"], [123, "java", "Parser.parseOptionalBody", "```java\nprivate void parseOptionalBody( Node parent, String tag, String bodyType ) \n        throws JasperException \n    {\n\tif (reader.matches(\"/>\")) {\n\t    // EmptyBody\n\t    return;\n\t}\n\n\tif (!reader.matches(\">\")) {\n\t    err.jspError(reader.mark(), \"jsp.error.unterminated\",\n\t\t\t \"&lt;\" + tag );\n\t}\n        \n        if( reader.matchesETag( tag ) ) {\n            // EmptyBody\n            return;\n        }\n        \n        if( !parseJspAttributeAndBody( parent, tag, bodyType ) ) {\n            // Must be ( '>' # Body ETag )\n            parseBody(parent, tag, bodyType );\n        }\n    }\n```"], [132, "java", "Completable.doOnComplete", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable doOnComplete(Action onComplete) {\n        return doOnLifecycle(Functions.emptyConsumer(), Functions.emptyConsumer(),\n                onComplete, Functions.EMPTY_ACTION,\n                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);\n    }\n```"], [776, "java", "Strings.trimLeadingCharacter", "```java\npublic static String trimLeadingCharacter(String str, final char leadingCharacter)\n   {\n      return trimLeadingCharacter(str, new CharacterChecker()\n      {\n         public boolean isCharacterLegal(char character)\n         {\n            return character == leadingCharacter;\n         }\n      });\n   }\n```"], [412, "java", "ProxettaAsmUtil.resolveJavaVersion", "```java\npublic static int resolveJavaVersion(final int version) {\n\t\tfinal int javaVersionNumber = SystemUtil.info().getJavaVersionNumber();\n\t\tfinal int platformVersion = javaVersionNumber - 8 + 52;\n\n\t\treturn version > platformVersion ? version : platformVersion;\n\t}\n```"], [315, "java", "OpenRtbJsonUtils.startArray", "```java\npublic static void startArray(JsonParser par) throws IOException {\n    JsonToken token = par.getCurrentToken();\n    if (token == null || token == JsonToken.FIELD_NAME) {\n      token = par.nextToken();\n    }\n    if (token == JsonToken.START_ARRAY) {\n      par.nextToken();\n    } else {\n      throw new JsonParseException(par, \"Expected start of array\");\n    }\n  }\n```"], [267, "java", "Observable.take", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler) {\n        return takeUntil(timer(time, unit, scheduler));\n    }\n```"], [669, "java", "AbstractEndpoint.executeAndHandle", "```java\nprotected HttpResponse executeAndHandle(Request request)\n            throws IOException, IllegalArgumentException, IllegalAccessException, FileNotFoundException, IllegalStateException {\n        HttpResponse response = execute(request);\n        handleResponse(response, request);\n        return response;\n    }\n```"], [377, "java", "PipelineConfigurationUpgrader.upgradeIfNecessary", "```java\npublic PipelineConfiguration upgradeIfNecessary(\n      StageLibraryTask library,\n      PipelineConfiguration pipelineConf,\n      List<Issue> issues\n  ) {\n    Preconditions.checkArgument(issues.isEmpty(), \"Given list of issues must be empty.\");\n    boolean upgrade;\n\n    // Firstly upgrading schema if needed, then data\n    upgrade = needsSchemaUpgrade(pipelineConf, issues);\n    if(upgrade && issues.isEmpty()) {\n      pipelineConf = upgradeSchema(library, pipelineConf, issues);\n    }\n\n    // Something went wrong with the schema upgrade\n    if(!issues.isEmpty()) {\n      return null;\n    }\n\n    // Upgrading data if needed\n    upgrade = needsUpgrade(library, pipelineConf, issues);\n    if (upgrade && issues.isEmpty()) {\n      //we try to upgrade only if we have all defs for the pipelineConf\n      pipelineConf = upgrade(library, pipelineConf, issues);\n    }\n    return (issues.isEmpty()) ? pipelineConf : null;\n  }\n```"], [565, "java", "TimerServiceImpl.getWaitingOnTxCompletionTimers", "```java\nprivate Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }\n```"], [122, "java", "RequestHandler.mainRequestHandler", "```java\n@ServiceMethod\n    public void mainRequestHandler(DataStoreRequest dataStoreRequest) {\n\n\n        if (verbose || debug) {\n            logger.info(\"RequestHandler::mainRequestHandler\", dataStoreRequest);\n        }\n        switch (dataStoreRequest.action()) {\n            case GET:\n                masterDataStore.get((GetRequest) dataStoreRequest);\n                break;\n            case GET_LOCAL_DB:\n                handleGetLocalDbVerb(dataStoreRequest);\n                break;\n            case GET_MEM:\n                handleGetMemVerb(dataStoreRequest);\n                break;\n            case SET:\n                masterDataStore.set((SetRequest) dataStoreRequest);\n                break;\n            case SET_BROADCAST:\n                handleSetAndBroadCastVerb(dataStoreRequest);\n                break;\n            case SET_IF_NOT_EXIST:\n                handleSetIfNotExistsVerb(dataStoreRequest);\n                break;\n            case SET_BATCH:\n                handleSetBatch(dataStoreRequest);\n                break;\n            case SET_BATCH_IF_NOT_EXISTS:\n                handleSetBatchIfNotExists(dataStoreRequest);\n                break;\n            case SET_SOURCE:\n                handleSetSource(dataStoreRequest);\n                break;\n            case GET_SOURCE:\n                handleGetSource(dataStoreRequest);\n                break;\n\n            case BATCH_READ:\n                handleBatchRead(dataStoreRequest);\n                break;\n\n            case CLEAR_STATS:\n                handleClearStats(dataStoreRequest);\n                break;\n\n\n            case GET_STATS:\n                handleGetStats(dataStoreRequest);\n                break;\n\n\n            case REMOVE:\n                handleRemove(dataStoreRequest);\n                break;\n\n\n            case REMOVE_SOURCE:\n                handleRemoveSource(dataStoreRequest);\n                break;\n\n            case METHOD_CALL:\n                handleMethodCall((MethodCall) dataStoreRequest);\n                break;\n\n            case SEARCH:\n                handleSearchVerb(dataStoreRequest);\n                break;\n\n            default:\n                puts(dataStoreRequest);\n\n\n        }\n        trackCall(dataStoreRequest.action());\n    }\n```"], [255, "java", "AvroTypeUtil.getAvroSchemaFromHeader", "```java\npublic static String getAvroSchemaFromHeader(Record record, String headerName) throws DataGeneratorException {\n    String jsonSchema = record.getHeader().getAttribute(headerName);\n    if(jsonSchema == null || jsonSchema.isEmpty()) {\n      throw new DataGeneratorException(Errors.AVRO_GENERATOR_03, record.getHeader().getSourceId());\n    }\n    return jsonSchema;\n  }\n```"], [699, "java", "InterfaceRepository.addInterface", "```java\nprivate InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }\n```"], [800, "java", "StdRandom.uniform", "```java\npublic static int uniform(int a, int b)\n  {\n    if (b <= a)\n      throw new IllegalArgumentException(\"Invalid range\");\n    if ((long) b - a >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"Invalid range\");\n    return a + uniform(b - a);\n  }\n```"], [995, "java", "DapController.init", "```java\npublic void init()\n            throws ServletException\n    {\n        org.slf4j.Logger logServerStartup = org.slf4j.LoggerFactory.getLogger(\"serverStartup\");\n        logServerStartup.info(getClass().getName() + \" initialization start\");\n        try {\n            System.setProperty(\"file.encoding\", \"UTF-8\");\n            Field charset = Charset.class.getDeclaredField(\"defaultCharset\");\n            charset.setAccessible(true);\n            charset.set(null, null);\n            initialize();\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n```"], [267, "java", "OfflineClient.getIndex", "```java\n@Override\n    public @NonNull MirroredIndex getIndex(@NonNull String indexName) {\n        MirroredIndex index = null;\n        WeakReference<Object> existingIndex = indices.get(indexName);\n        if (existingIndex != null) {\n            index = (MirroredIndex)existingIndex.get();\n        }\n        if (index == null) {\n            index = new MirroredIndex(this, indexName);\n            indices.put(indexName, new WeakReference<Object>(index));\n        }\n        return index;\n    }\n```"], [127, "java", "TdsRequestedDataset.getGridDataset", "```java\npublic static GridDataset getGridDataset(HttpServletRequest request, HttpServletResponse response, String path) throws IOException {\n    TdsRequestedDataset trd = new TdsRequestedDataset(request, null);\n    if (path != null) trd.path = path;\n    return trd.openAsGridDataset(request, response);\n  }\n```"], [739, "java", "Types.isBuiltinType", "```java\npublic static boolean isBuiltinType(Type type) {\n\t\tClass<?> rawType = getRawType(type);\n\t\treturn (rawType == null) ? false : builtins.contains(rawType);\n\t}\n```"], [132, "java", "SimpleRuleStore.addRule", "```java\npublic void addRule(ElementSelector elementSelector, Action action) {\n    action.setContext(context);\n\n    List<Action> a4p = rules.get(elementSelector);\n\n    if (a4p == null) {\n      a4p = new ArrayList<Action>();\n      rules.put(elementSelector, a4p);\n    }\n\n    a4p.add(action);\n  }\n```"], [811, "java", "RpcResponseResolver.toResponseObject", "```java\nprivate static Object toResponseObject(ResponseCommand responseCommand) throws CodecException {\n        RpcResponseCommand response = (RpcResponseCommand) responseCommand;\n        response.deserialize();\n        return response.getResponseObject();\n    }\n```"], [247, "java", "OClosableLinkedContainer.checkOpenFilesLimit", "```java\nprivate void checkOpenFilesLimit() throws InterruptedException {\n    CountDownLatch ol = openLatch.get();\n    if (ol != null)\n      ol.await();\n\n    while (openFiles.get() > openLimit) {\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      //make other threads to wait till we evict entries and close evicted open files\n      if (openLatch.compareAndSet(null, latch)) {\n        while (openFiles.get() > openLimit) {\n          emptyBuffers();\n        }\n\n        latch.countDown();\n        openLatch.set(null);\n      } else {\n        ol = openLatch.get();\n\n        if (ol != null)\n          ol.await();\n      }\n    }\n  }\n```"], [540, "java", "GuiceApplicationBuilder.load", "```java\npublic GuiceApplicationBuilder load(GuiceableModule... modules) {\n    return newBuilder(delegate.load(Scala.varargs(modules)));\n  }\n```"], [877, "java", "ProfileEntityArrayAttributeValue.setByte", "```java\npublic void setByte(Byte attrValue) {\n\t\tif (attrValue != null) {\n\t\t\tsetString(attrValue.toString());\n\t\t}\n\t\telse {\n\t\t\tsetString(null);\n\t\t}\n\t}\n```"], [424, "java", "StreamUtil.outputStreamWriterOf", "```java\npublic static OutputStreamWriter outputStreamWriterOf(final OutputStream output, final String encoding) throws UnsupportedEncodingException {\n\t\treturn new OutputStreamWriter(output, encoding);\n\t}\n```"], [189, "java", "BufrTableBViewer.writeDiff", "```java\nprivate void writeDiff(TableB wmo, TableB t, Formatter out) {\r\n    out.format(\"#%n# BUFR diff written from %s against %s %n#%n\", t.getName(), wmo.getName());\r\n    out.format(\"Class,FXY,enElementName,BUFR_Unit,BUFR_Scale,BUFR_ReferenceValue,BUFR_DataWidth_Bits%n\");\r\n    List<TableB.Descriptor> listDesc = new ArrayList<>(t.getDescriptors());\r\n    Collections.sort(listDesc);\r\n    for (TableB.Descriptor d1 : listDesc) {\r\n      TableB.Descriptor d2 = wmo.getDescriptor(d1.getId());\r\n      if ((d2 == null) || (d1.getScale() != d2.getScale()) || (d1.getRefVal() != d2.getRefVal()) || (d1.getDataWidth() != d2.getDataWidth())) {\r\n        short fxy = d1.getId();\r\n//        int f = (fxy & 0xC000) >> 14;\r\n        int x  = (fxy & 0x3F00) >> 8;\r\n        int y  = fxy & 0xFF;\r\n        out.format(\"%d,%2d%03d,\\\"%s\\\",%s,%d,%d,%d%n\",x,x,y, d1.getName(), d1.getUnits(), d1.getScale(), d1.getRefVal(), d1.getDataWidth());\r\n      }\r\n    }\r\n    out.flush();\r\n  }\n```"], [654, "java", "OpenRtbUtils.bids", "```java\npublic static Iterable<Bid.Builder> bids(BidResponse.Builder response) {\n    return new ResponseBidsIterator(response, SEAT_ANY, null);\n  }\n```"], [92, "java", "Flowable.blockingSubscribe", "```java\n@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final void blockingSubscribe(Consumer<? super T> onNext) {\n        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);\n    }\n```"], [728, "java", "Completable.repeatUntil", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable repeatUntil(BooleanSupplier stop) {\n        return fromPublisher(toFlowable().repeatUntil(stop));\n    }\n```"]]}, "Test-All MRR (bs=1,000)": 0.007480628495717182, "Examples-FuncNameTest": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[324, "java", "Is24XmlUtils.getContext", "```java\npublic synchronized static JAXBContext getContext() throws JAXBException {\n        if (JAXB == null) initContext(Thread.currentThread().getContextClassLoader());\n        return JAXB;\n    }\n```"], [480, "java", "LogServiceImpl.setLoggerLevel", "```java\npublic void setLoggerLevel(String loggerName, String level) throws ManagementConsoleException {\r\n\r\n    sleeConnection.getSleeManagementMBeanUtils().getLogManagementMBeanUtils().setLoggerLevel(loggerName, level);\r\n\r\n  }\n```"], [58, "java", "Observable.hide", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> hide() {\n        return RxJavaPlugins.onAssembly(new ObservableHide<T>(this));\n    }\n```"], [772, "java", "FileAppender.setFile", "```java\npublic void setFile(String file) {\n    if (file == null) {\n      fileName = null;\n    } else {\n      // Trim spaces from both ends. The users probably does not want\n      // trailing spaces in file names.\n      fileName = file.trim();\n    }\n  }\n```"], [492, "java", "Properties.inspectProperties", "```java\nprotected HashMap<String, PropertyDescriptor> inspectProperties() {\n\t\tboolean scanAccessible = classDescriptor.isScanAccessible();\n\t\tClass type = classDescriptor.getType();\n\n\t\tHashMap<String, PropertyDescriptor> map = new HashMap<>();\n\n\t\tMethod[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type);\n\n\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t// first find the getters, and then the setters!\n\t\t\tfor (Method method : methods) {\n\t\t\t\tif (Modifier.isStatic(method.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static methods\n\t\t\t\t}\n\n\t\t\t\tboolean add = false;\n\t\t\t\tboolean issetter = false;\n\n\t\t\t\tString propertyName;\n\n\t\t\t\tif (iteration == 0) {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertyGetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertySetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (add) {\n\t\t\t\t\tMethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true);\n\t\t\t\t\taddProperty(map, propertyName, methodDescriptor, issetter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classDescriptor.isIncludeFieldsAsProperties()) {\n\t\t\tFieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors();\n\t\t\tString[] prefix = classDescriptor.getPropertyFieldPrefix();\n\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldDescriptors) {\n\t\t\t\tField field = fieldDescriptor.getField();\n\n\t\t\t\tif (Modifier.isStatic(field.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static fields\n\t\t\t\t}\n\n\t\t\t\tString name = field.getName();\n\n\t\t\t\tif (prefix != null) {\n\t\t\t\t\tfor (String p : prefix) {\n\t\t\t\t\t\tif (!name.startsWith(p)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = name.substring(p.length());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!map.containsKey(name)) {\n\t\t\t\t\t// add missing field as a potential property\n\t\t\t\t\tmap.put(name, createPropertyDescriptor(name, fieldDescriptor));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn map;\n\t}\n```"], [826, "java", "ExceptionHelper.wrapOrThrow", "```java\npublic static RuntimeException wrapOrThrow(Throwable error) {\n        if (error instanceof Error) {\n            throw (Error)error;\n        }\n        if (error instanceof RuntimeException) {\n            return (RuntimeException)error;\n        }\n        return new RuntimeException(error);\n    }\n```"], [213, "java", "SegmentedByteArray.rangeEquals", "```java\npublic boolean rangeEquals(long rangeStart, SegmentedByteArray compareTo, long cmpStart, int length) {\n    \tfor(int i=0;i<length;i++)\n    \t\tif(get(rangeStart + i) != compareTo.get(cmpStart + i))\n    \t\t\treturn false;\n    \treturn true;\n    }\n```"], [226, "java", "Update.getVersion", "```java\npublic String getVersion() throws MalformedElementException {\n        Element version = getFirstChild(root, \"version\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingVersionElmt\"), version); //$NON-NLS-1$\n        String href = getChildText(version, \"href\", true); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingHrefElmt\"), href); //$NON-NLS-1$\n        return decodeHref(href);\n    }\n```"], [333, "java", "AbstractRequestMatcherRegistry.antMatchers", "```java\npublic C antMatchers(String... antPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure antMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.antMatchers(antPatterns));\n\t}\n```"], [636, "java", "AbstractRefreshMetricsListener.noFailRefreshEndMetricsReporting", "```java\nprivate final void noFailRefreshEndMetricsReporting(ConsumerRefreshMetrics refreshMetrics) {\n        try {\n            refreshEndMetricsReporting(refreshMetrics);\n        } catch (Exception e) {\n            // Metric reporting is not considered critical to consumer refresh. Log exceptions and continue.\n            log.log(Level.SEVERE, \"Encountered an exception in reporting consumer refresh metrics, ignoring exception and continuing with consumer refresh\", e);\n        }\n    }\n```"], [377, "java", "JtxTransaction.commitOrRollback", "```java\nprotected void commitOrRollback(boolean doCommit) {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (doCommit) {\n\t\t\t\tlog.debug(\"Commit JTX\");\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Rollback JTX\");\n\t\t\t}\n\t\t}\n\t\tboolean forcedRollback = false;\n\t\tif (!isNoTransaction()) {\n\t\t\tif (isRollbackOnly()) {\n\t\t\t\tif (doCommit) {\n\t\t\t\t\tdoCommit = false;\n\t\t\t\t\tforcedRollback = true;\n\t\t\t\t}\n\t\t\t} else if (!isActive()) {\n\t\t\t\tif (isCompleted()) {\n\t\t\t\t\tthrow new JtxException(\"TX is already completed, commit or rollback should be called once per TX\");\n\t\t\t\t}\n\t\t\t\tthrow new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\"));\n\t\t\t}\n\t\t}\n\t\tif (doCommit) {\n\t\t\tcommitAllResources();\n\t\t} else {\n\t\t\trollbackAllResources(forcedRollback);\n\t\t}\n\t}\n```"], [323, "java", "PrologParser.main", "```java\npublic static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }\n```"], [8, "java", "FileNameUtil.concat", "```java\npublic static String concat(final String basePath, final String fullFilenameToAdd) {\n\t\treturn doConcat(basePath, fullFilenameToAdd, SYSTEM_SEPARATOR);\n\t}\n```"], [295, "java", "UserClient.updateUser", "```java\npublic User updateUser(User userParam)\n    {\n        if(userParam != null && this.serviceTicket != null)\n        {\n            userParam.setServiceTicket(this.serviceTicket);\n        }\n\n        return new User(this.postJson(\n                userParam, WS.Path.User.Version1.userUpdate()));\n    }\n```"], [860, "java", "RollupService.setServerTime", "```java\npublic synchronized void setServerTime(long millis) {\n        log.info(\"Manually setting server time to {}  {}\", millis, new java.util.Date(millis));\n        context.setCurrentTimeMillis(millis);\n    }\n```"], [929, "java", "EmailFilter.or", "```java\nprotected void or(final SearchTerm searchTerm) {\n\t\tif (this.searchTerm == null) {\n\t\t\tthis.searchTerm = searchTerm;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchTerm = new OrTerm(this.searchTerm, searchTerm);\n\t}\n```"], [101, "java", "ReteGraph.addChild", "```java\npublic boolean addChild(BaseVertex vertex) {\n        if ( vertex != null && vertices.add( vertex ) ) {\n            firePropertyChange( PROP_CHILD_ADDED,\n                                null,\n                                vertex );\n            return true;\n        }\n        return false;\n    }\n```"], [152, "java", "JPANotificationRESTController.getNotifications", "```java\n@RequestMapping(method = RequestMethod.GET)\n    @ResponseBody\n    public List<EntryDTO> getNotifications(\n            @RequestParam(value = \"page\", required = false) Integer page,\n            @RequestParam(value = \"pageSize\", required = false) Integer pageSize) {\n\n        return restService.getNotifications(page, pageSize);\n    }\n```"], [718, "java", "Iterators.limit", "```java\npublic static <E> Iterator<E> limit(Iterator<? extends E> iterator,\n\t\tint limit)\n\t{\n\t\treturn new LimitIterator<E>(iterator, limit);\n\t}\n```"], [544, "java", "Base64.encodeToString", "```java\npublic static String encodeToString(String s) {\n        try {\n            return new String(encodeToChar(s.getBytes(ENCODING), false));\n        } catch (UnsupportedEncodingException ignore) {\n            return null;\n        }\n    }\n```"], [943, "java", "AreaGrid.calculateColumns", "```java\nprivate void calculateColumns()\n    {\n        //create the sorted list of points\n        GridPoint points[] = new GridPoint[areas.size() * 2];\n        int pi = 0;\n        for (Area area : areas)\n        {\n            points[pi] = new GridPoint(area.getX1(), area, true);\n            points[pi+1] = new GridPoint(area.getX2() + 1, area, false);\n            pi += 2;\n            //X2+1 ensures that the end of one box will be on the same point\n            //as the start of the following box\n        }\n        Arrays.sort(points);\n        \n        //calculate the number of columns\n        int cnt = 0;\n        int last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n            if (!theSame(points[i].value, last))\n            { \n                last = points[i].value;\n                cnt++;\n            }\n        if (!theSame(last, abspos.getX2()))\n        \tcnt++; //last column finishes the whole area\n        width = cnt;\n        \n        //calculate the column widths and the layout\n        maxindent = 0;\n        minindent = -1;\n        cols = new int[width];\n        cnt = 0;\n        last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n        {\n            if (!theSame(points[i].value, last)) \n            {\n                cols[cnt] = points[i].value - last;\n                last = points[i].value;\n                cnt++;\n            }\n            if (points[i].begin)\n            {\n                target.getPosition(points[i].area).setX1(cnt);\n                maxindent = cnt;\n                if (minindent == -1) minindent = maxindent;\n                //points[i].node.getArea().setX1(parent.getArea().getX1() + getColOfs(cnt));\n            }\n            else\n            {\n                Rectangular pos = target.getPosition(points[i].area); \n                pos.setX2(cnt-1);\n                if (pos.getX2() < pos.getX1())\n                    pos.setX2(pos.getX1());\n                //points[i].node.getArea().setX2(parent.getArea().getX1() + getColOfs(pos.getX2()+1));\n            }\n        }\n        if (!theSame(last, abspos.getX2()))\n        \tcols[cnt] = abspos.getX2() - last;\n        if (minindent == -1)\n            minindent = 0;\n    }\n```"], [700, "java", "JdbcHelper.initialize", "```java\nprivate static void initialize() {\n\t\tString driver = ConfigHelper.getProperty(\"jdbc.driver\");\n\t\tString url = ConfigHelper.getProperty(\"jdbc.url\");\n\t\tString username = ConfigHelper.getProperty(\"jdbc.username\");\n\t\tString password = ConfigHelper.getProperty(\"jdbc.password\");\n\t\tint maxActive = ConfigHelper.getNumerProperty(\"jdbc.max.active\");\n\t\tint maxIdle = ConfigHelper.getNumerProperty(\"jdbc.max.idle\");\n\t\tAssertHelper.notNull(driver);\n\t\tAssertHelper.notNull(url);\n\t\tAssertHelper.notNull(username);\n\t\tAssertHelper.notNull(password);\n\t\t//\u521d\u59cb\u5316DBCP\u6570\u636e\u6e90\n\t\tBasicDataSource ds = new BasicDataSource();\n\t\tds.setDriverClassName(driver);\n\t\tds.setUrl(url);\n\t\tds.setUsername(username);\n\t\tds.setPassword(password);\n        if(maxActive != 0) {\n\t\t    ds.setMaxActive(maxActive);\n        }\n        if(maxIdle != 0) {\n\t\t    ds.setMaxIdle(maxIdle);\n        }\n\t\tdataSource = ds;\n\t}\n```"], [699, "java", "PasswordLoginModule.abort", "```java\n@Override\n    // Check is broken [LOG.info()]: PMD reports issues although log stmt is guarded. @todo revisit when upgrading PMD.\n    @SuppressWarnings(\"PMD.GuardLogStatementJavaUtil\")\n    public final boolean abort()\n            throws LoginException {\n\n        if (pendingSubject == null) {\n            // the login method of this module has failed earlier, hence we do not need to clean up anything\n            // return 'false' to indicate that this module's login and/or commit method failed\n            // As the login method failed, the state of the module has already been cleared and we do not know\n            // the username / domain anymore. Hence no auditing / message queue notification, and not verbose logging.\n\n            LOG.debug(\"Aborting authentication, as the authentication has failed earlier (login method)\");\n\n            return false;\n        } else if (committedSubject == null) {\n            // the login method of this module succeeded, but the overall authentication failed\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Aborting authentication: '\" + username + \"@\" + domain + \"'\");\n            }\n\n            // cache the username and domain, for they will be purged by \"cleanState()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            cleanState();\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(tempUsername).\n                    append(\"@\").\n                    append(tempDomain).\n                    toString();\n            AuditHelper.auditEvent(audit, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        } else {\n            // overall authentication succeeded and commit succeeded, but someone else's commit failed\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(username).\n                    append(\"@\").\n                    append(domain).\n                    toString();\n            AuditHelper.auditEvent(audit, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // cache the username and domain, for they will be purged by \"logout()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            logout();\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        }\n    }\n```"], [507, "java", "Parser.parseOptionalBody", "```java\nprivate void parseOptionalBody( Node parent, String tag, String bodyType ) \n        throws JasperException \n    {\n\tif (reader.matches(\"/>\")) {\n\t    // EmptyBody\n\t    return;\n\t}\n\n\tif (!reader.matches(\">\")) {\n\t    err.jspError(reader.mark(), \"jsp.error.unterminated\",\n\t\t\t \"&lt;\" + tag );\n\t}\n        \n        if( reader.matchesETag( tag ) ) {\n            // EmptyBody\n            return;\n        }\n        \n        if( !parseJspAttributeAndBody( parent, tag, bodyType ) ) {\n            // Must be ( '>' # Body ETag )\n            parseBody(parent, tag, bodyType );\n        }\n    }\n```"], [120, "java", "Completable.doOnComplete", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable doOnComplete(Action onComplete) {\n        return doOnLifecycle(Functions.emptyConsumer(), Functions.emptyConsumer(),\n                onComplete, Functions.EMPTY_ACTION,\n                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);\n    }\n```"], [746, "java", "Strings.trimLeadingCharacter", "```java\npublic static String trimLeadingCharacter(String str, final char leadingCharacter)\n   {\n      return trimLeadingCharacter(str, new CharacterChecker()\n      {\n         public boolean isCharacterLegal(char character)\n         {\n            return character == leadingCharacter;\n         }\n      });\n   }\n```"], [237, "java", "ProxettaAsmUtil.resolveJavaVersion", "```java\npublic static int resolveJavaVersion(final int version) {\n\t\tfinal int javaVersionNumber = SystemUtil.info().getJavaVersionNumber();\n\t\tfinal int platformVersion = javaVersionNumber - 8 + 52;\n\n\t\treturn version > platformVersion ? version : platformVersion;\n\t}\n```"], [263, "java", "OpenRtbJsonUtils.startArray", "```java\npublic static void startArray(JsonParser par) throws IOException {\n    JsonToken token = par.getCurrentToken();\n    if (token == null || token == JsonToken.FIELD_NAME) {\n      token = par.nextToken();\n    }\n    if (token == JsonToken.START_ARRAY) {\n      par.nextToken();\n    } else {\n      throw new JsonParseException(par, \"Expected start of array\");\n    }\n  }\n```"], [722, "java", "Observable.take", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler) {\n        return takeUntil(timer(time, unit, scheduler));\n    }\n```"], [965, "java", "AbstractEndpoint.executeAndHandle", "```java\nprotected HttpResponse executeAndHandle(Request request)\n            throws IOException, IllegalArgumentException, IllegalAccessException, FileNotFoundException, IllegalStateException {\n        HttpResponse response = execute(request);\n        handleResponse(response, request);\n        return response;\n    }\n```"], [555, "java", "PipelineConfigurationUpgrader.upgradeIfNecessary", "```java\npublic PipelineConfiguration upgradeIfNecessary(\n      StageLibraryTask library,\n      PipelineConfiguration pipelineConf,\n      List<Issue> issues\n  ) {\n    Preconditions.checkArgument(issues.isEmpty(), \"Given list of issues must be empty.\");\n    boolean upgrade;\n\n    // Firstly upgrading schema if needed, then data\n    upgrade = needsSchemaUpgrade(pipelineConf, issues);\n    if(upgrade && issues.isEmpty()) {\n      pipelineConf = upgradeSchema(library, pipelineConf, issues);\n    }\n\n    // Something went wrong with the schema upgrade\n    if(!issues.isEmpty()) {\n      return null;\n    }\n\n    // Upgrading data if needed\n    upgrade = needsUpgrade(library, pipelineConf, issues);\n    if (upgrade && issues.isEmpty()) {\n      //we try to upgrade only if we have all defs for the pipelineConf\n      pipelineConf = upgrade(library, pipelineConf, issues);\n    }\n    return (issues.isEmpty()) ? pipelineConf : null;\n  }\n```"], [733, "java", "TimerServiceImpl.getWaitingOnTxCompletionTimers", "```java\nprivate Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }\n```"], [441, "java", "RequestHandler.mainRequestHandler", "```java\n@ServiceMethod\n    public void mainRequestHandler(DataStoreRequest dataStoreRequest) {\n\n\n        if (verbose || debug) {\n            logger.info(\"RequestHandler::mainRequestHandler\", dataStoreRequest);\n        }\n        switch (dataStoreRequest.action()) {\n            case GET:\n                masterDataStore.get((GetRequest) dataStoreRequest);\n                break;\n            case GET_LOCAL_DB:\n                handleGetLocalDbVerb(dataStoreRequest);\n                break;\n            case GET_MEM:\n                handleGetMemVerb(dataStoreRequest);\n                break;\n            case SET:\n                masterDataStore.set((SetRequest) dataStoreRequest);\n                break;\n            case SET_BROADCAST:\n                handleSetAndBroadCastVerb(dataStoreRequest);\n                break;\n            case SET_IF_NOT_EXIST:\n                handleSetIfNotExistsVerb(dataStoreRequest);\n                break;\n            case SET_BATCH:\n                handleSetBatch(dataStoreRequest);\n                break;\n            case SET_BATCH_IF_NOT_EXISTS:\n                handleSetBatchIfNotExists(dataStoreRequest);\n                break;\n            case SET_SOURCE:\n                handleSetSource(dataStoreRequest);\n                break;\n            case GET_SOURCE:\n                handleGetSource(dataStoreRequest);\n                break;\n\n            case BATCH_READ:\n                handleBatchRead(dataStoreRequest);\n                break;\n\n            case CLEAR_STATS:\n                handleClearStats(dataStoreRequest);\n                break;\n\n\n            case GET_STATS:\n                handleGetStats(dataStoreRequest);\n                break;\n\n\n            case REMOVE:\n                handleRemove(dataStoreRequest);\n                break;\n\n\n            case REMOVE_SOURCE:\n                handleRemoveSource(dataStoreRequest);\n                break;\n\n            case METHOD_CALL:\n                handleMethodCall((MethodCall) dataStoreRequest);\n                break;\n\n            case SEARCH:\n                handleSearchVerb(dataStoreRequest);\n                break;\n\n            default:\n                puts(dataStoreRequest);\n\n\n        }\n        trackCall(dataStoreRequest.action());\n    }\n```"], [374, "java", "AvroTypeUtil.getAvroSchemaFromHeader", "```java\npublic static String getAvroSchemaFromHeader(Record record, String headerName) throws DataGeneratorException {\n    String jsonSchema = record.getHeader().getAttribute(headerName);\n    if(jsonSchema == null || jsonSchema.isEmpty()) {\n      throw new DataGeneratorException(Errors.AVRO_GENERATOR_03, record.getHeader().getSourceId());\n    }\n    return jsonSchema;\n  }\n```"], [735, "java", "InterfaceRepository.addInterface", "```java\nprivate InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }\n```"], [825, "java", "StdRandom.uniform", "```java\npublic static int uniform(int a, int b)\n  {\n    if (b <= a)\n      throw new IllegalArgumentException(\"Invalid range\");\n    if ((long) b - a >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"Invalid range\");\n    return a + uniform(b - a);\n  }\n```"], [794, "java", "DapController.init", "```java\npublic void init()\n            throws ServletException\n    {\n        org.slf4j.Logger logServerStartup = org.slf4j.LoggerFactory.getLogger(\"serverStartup\");\n        logServerStartup.info(getClass().getName() + \" initialization start\");\n        try {\n            System.setProperty(\"file.encoding\", \"UTF-8\");\n            Field charset = Charset.class.getDeclaredField(\"defaultCharset\");\n            charset.setAccessible(true);\n            charset.set(null, null);\n            initialize();\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n```"], [501, "java", "OfflineClient.getIndex", "```java\n@Override\n    public @NonNull MirroredIndex getIndex(@NonNull String indexName) {\n        MirroredIndex index = null;\n        WeakReference<Object> existingIndex = indices.get(indexName);\n        if (existingIndex != null) {\n            index = (MirroredIndex)existingIndex.get();\n        }\n        if (index == null) {\n            index = new MirroredIndex(this, indexName);\n            indices.put(indexName, new WeakReference<Object>(index));\n        }\n        return index;\n    }\n```"], [746, "java", "TdsRequestedDataset.getGridDataset", "```java\npublic static GridDataset getGridDataset(HttpServletRequest request, HttpServletResponse response, String path) throws IOException {\n    TdsRequestedDataset trd = new TdsRequestedDataset(request, null);\n    if (path != null) trd.path = path;\n    return trd.openAsGridDataset(request, response);\n  }\n```"], [809, "java", "Types.isBuiltinType", "```java\npublic static boolean isBuiltinType(Type type) {\n\t\tClass<?> rawType = getRawType(type);\n\t\treturn (rawType == null) ? false : builtins.contains(rawType);\n\t}\n```"], [52, "java", "SimpleRuleStore.addRule", "```java\npublic void addRule(ElementSelector elementSelector, Action action) {\n    action.setContext(context);\n\n    List<Action> a4p = rules.get(elementSelector);\n\n    if (a4p == null) {\n      a4p = new ArrayList<Action>();\n      rules.put(elementSelector, a4p);\n    }\n\n    a4p.add(action);\n  }\n```"], [935, "java", "RpcResponseResolver.toResponseObject", "```java\nprivate static Object toResponseObject(ResponseCommand responseCommand) throws CodecException {\n        RpcResponseCommand response = (RpcResponseCommand) responseCommand;\n        response.deserialize();\n        return response.getResponseObject();\n    }\n```"], [126, "java", "OClosableLinkedContainer.checkOpenFilesLimit", "```java\nprivate void checkOpenFilesLimit() throws InterruptedException {\n    CountDownLatch ol = openLatch.get();\n    if (ol != null)\n      ol.await();\n\n    while (openFiles.get() > openLimit) {\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      //make other threads to wait till we evict entries and close evicted open files\n      if (openLatch.compareAndSet(null, latch)) {\n        while (openFiles.get() > openLimit) {\n          emptyBuffers();\n        }\n\n        latch.countDown();\n        openLatch.set(null);\n      } else {\n        ol = openLatch.get();\n\n        if (ol != null)\n          ol.await();\n      }\n    }\n  }\n```"], [975, "java", "GuiceApplicationBuilder.load", "```java\npublic GuiceApplicationBuilder load(GuiceableModule... modules) {\n    return newBuilder(delegate.load(Scala.varargs(modules)));\n  }\n```"], [643, "java", "ProfileEntityArrayAttributeValue.setByte", "```java\npublic void setByte(Byte attrValue) {\n\t\tif (attrValue != null) {\n\t\t\tsetString(attrValue.toString());\n\t\t}\n\t\telse {\n\t\t\tsetString(null);\n\t\t}\n\t}\n```"], [230, "java", "StreamUtil.outputStreamWriterOf", "```java\npublic static OutputStreamWriter outputStreamWriterOf(final OutputStream output, final String encoding) throws UnsupportedEncodingException {\n\t\treturn new OutputStreamWriter(output, encoding);\n\t}\n```"], [736, "java", "BufrTableBViewer.writeDiff", "```java\nprivate void writeDiff(TableB wmo, TableB t, Formatter out) {\r\n    out.format(\"#%n# BUFR diff written from %s against %s %n#%n\", t.getName(), wmo.getName());\r\n    out.format(\"Class,FXY,enElementName,BUFR_Unit,BUFR_Scale,BUFR_ReferenceValue,BUFR_DataWidth_Bits%n\");\r\n    List<TableB.Descriptor> listDesc = new ArrayList<>(t.getDescriptors());\r\n    Collections.sort(listDesc);\r\n    for (TableB.Descriptor d1 : listDesc) {\r\n      TableB.Descriptor d2 = wmo.getDescriptor(d1.getId());\r\n      if ((d2 == null) || (d1.getScale() != d2.getScale()) || (d1.getRefVal() != d2.getRefVal()) || (d1.getDataWidth() != d2.getDataWidth())) {\r\n        short fxy = d1.getId();\r\n//        int f = (fxy & 0xC000) >> 14;\r\n        int x  = (fxy & 0x3F00) >> 8;\r\n        int y  = fxy & 0xFF;\r\n        out.format(\"%d,%2d%03d,\\\"%s\\\",%s,%d,%d,%d%n\",x,x,y, d1.getName(), d1.getUnits(), d1.getScale(), d1.getRefVal(), d1.getDataWidth());\r\n      }\r\n    }\r\n    out.flush();\r\n  }\n```"], [954, "java", "OpenRtbUtils.bids", "```java\npublic static Iterable<Bid.Builder> bids(BidResponse.Builder response) {\n    return new ResponseBidsIterator(response, SEAT_ANY, null);\n  }\n```"], [920, "java", "Flowable.blockingSubscribe", "```java\n@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final void blockingSubscribe(Consumer<? super T> onNext) {\n        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);\n    }\n```"], [666, "java", "Completable.repeatUntil", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable repeatUntil(BooleanSupplier stop) {\n        return fromPublisher(toFlowable().repeatUntil(stop));\n    }\n```"]]}, "FuncNameTest-All MRR (bs=1,000)": 0.007485100160514516, "Examples-Validation": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[846, "java", "FareAttribute.setStatementParameters", "```java\n@Override\n    public void setStatementParameters(PreparedStatement statement, boolean setDefaultId) throws SQLException {\n        int oneBasedIndex = 1;\n        if (!setDefaultId) statement.setInt(oneBasedIndex++, id);\n        statement.setString(oneBasedIndex++, fare_id);\n        statement.setDouble(oneBasedIndex++, price);\n        statement.setString(oneBasedIndex++, currency_type);\n        setIntParameter(statement, oneBasedIndex++, payment_method);\n        // FIXME Entity.INT_MISSING causing out of range error on small int\n        setIntParameter(statement, oneBasedIndex++, transfers);\n        statement.setString(oneBasedIndex++, agency_id);\n        setIntParameter(statement, oneBasedIndex++, transfer_duration);\n    }\n```"], [924, "java", "Xmls.children", "```java\npublic static List<Element> children(Element ele, String regex) {\n        final List<Element> list = new ArrayList<Element>(ele.getChildNodes().getLength());\n        eachChildren(ele, regex, new Each<Element>() {\n            public void invoke(int index, Element cld, int length) {\n                list.add(cld);\n            }\n        });\n        return list;\n    }\n```"], [277, "java", "SelectSelectivePlugin.initialized", "```java\n@Override\n    public void initialized(IntrospectedTable introspectedTable) {\n        super.initialized(introspectedTable);\n\n        // bug:26,27\n        this.selectByExampleSelectiveEle = null;\n        this.selectByPrimaryKeySelectiveEle = null;\n    }\n```"], [201, "java", "AbstractSpeedModelManager.consumeKeyMessage", "```java\npublic void consumeKeyMessage(String key, U message, Configuration hadoopConf) throws IOException {\n    log.info(\"{} : {}\", key, message);\n  }\n```"], [449, "java", "SocializeShareUtils.shareViaSocialNetworks", "```java\n@Override\n\tpublic void shareViaSocialNetworks(Activity context, final Entity entity, final ShareOptions shareOptions, final SocialNetworkShareListener listener, final SocialNetwork...networks) {\n\t\t\n\t\tfinal SocializeSession session = getSocialize().getSession();\n\t\t\n\t\tif(isDisplayAuthDialog(context, session, shareOptions, networks)) {\n\t\t\t\n\t\t\tauthDialogFactory.show(context, new AuthDialogListener() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onShow(Dialog dialog, AuthPanelView dialogView) {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onCancel(Dialog dialog) {\n\t\t\t\t\tif(listener != null) {\n\t\t\t\t\t\tlistener.onCancel();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onSkipAuth(Activity context, Dialog dialog) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdoShare(context, entity, listener, shareOptions, networks);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onError(Activity context, Dialog dialog, Exception error) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tif(listener != null) {\n\t\t\t\t\t\tlistener.onError(SocializeException.wrap(error));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onAuthenticate(Activity context, Dialog dialog, SocialNetwork network) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdoShare(context, entity, listener, shareOptions, network);\n\t\t\t\t}\n\t\t\t}, !config.isAllowSkipAuthOnAllActions());\n\t\t}\n\t\telse {\n\t\t\tdoShare(context, entity, listener, shareOptions, networks);\n\t\t}\t\t\t\n\t}\n```"], [56, "java", "AbstractAuthenticationFilter.doFilter", "```java\n@Override\n    protected void doFilter(final HttpServletRequest _request,\n                            final HttpServletResponse _response,\n                            final FilterChain _chain)\n        throws IOException, ServletException\n    {\n        if (isLoggedIn(_request)) {\n            _chain.doFilter(_request, _response);\n        } else {\n            doAuthenticate(_request, _response, _chain);\n        }\n    }\n```"], [563, "java", "PrettyConfig.getMappingById", "```java\npublic UrlMapping getMappingById(String id)\n   {\n      if (id != null)\n      {\n         if (id.startsWith(PrettyContext.PRETTY_PREFIX))\n         {\n            id = id.substring(PrettyContext.PRETTY_PREFIX.length());\n         }\n         for (UrlMapping mapping : getMappings())\n         {\n            if (mapping.getId().equals(id))\n            {\n               return mapping;\n            }\n         }\n      }\n      return null;\n   }\n```"], [71, "java", "ExecutionEngine.fireErrorReceivingResponseEvent", "```java\nprivate static void fireErrorReceivingResponseEvent(OperationContext opContext, HttpURLConnection request,\n            RequestResult result) {\n        if (opContext.getErrorReceivingResponseEventHandler().hasListeners()\n                || OperationContext.getGlobalErrorReceivingResponseEventHandler().hasListeners()) {\n            ErrorReceivingResponseEvent event = new ErrorReceivingResponseEvent(opContext, request, result);\n            opContext.getErrorReceivingResponseEventHandler().fireEvent(event);\n            OperationContext.getGlobalErrorReceivingResponseEventHandler().fireEvent(event);\n        }\n    }\n```"], [999, "java", "ThrowableAssert.overridingErrorMessage", "```java\n@Override\n  public @NotNull ThrowableAssert overridingErrorMessage(@Nullable String message) {\n    objectAssert.overridingErrorMessage(message);\n    return super.overridingErrorMessage(message);\n  }\n```"], [523, "java", "ShadowLauncherApps.addDynamicShortcut", "```java\npublic void addDynamicShortcut(ShortcutInfo shortcutInfo) {\n    shortcuts.add(shortcutInfo);\n    shortcutsChanged(shortcutInfo.getPackage(), Lists.newArrayList(shortcutInfo));\n  }\n```"], [961, "java", "AbstractFuture.get", "```java\n@CanIgnoreReturnValue\n  @Override\n  public V get(long timeout, TimeUnit unit)\n      throws InterruptedException, TimeoutException, ExecutionException {\n    // NOTE: if timeout < 0, remainingNanos will be < 0 and we will fall into the while(true) loop\n    // at the bottom and throw a timeoutexception.\n    final long timeoutNanos = unit.toNanos(timeout); // we rely on the implicit null check on unit.\n    long remainingNanos = timeoutNanos;\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n    Object localValue = value;\n    if (localValue != null & !(localValue instanceof SetFuture)) {\n      return getDoneValue(localValue);\n    }\n    // we delay calling nanoTime until we know we will need to either park or spin\n    final long endNanos = remainingNanos > 0 ? System.nanoTime() + remainingNanos : 0;\n    long_wait_loop:\n    if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n      Waiter oldHead = waiters;\n      if (oldHead != Waiter.TOMBSTONE) {\n        Waiter node = new Waiter();\n        do {\n          node.setNext(oldHead);\n          if (ATOMIC_HELPER.casWaiters(this, oldHead, node)) {\n            while (true) {\n              LockSupport.parkNanos(this, remainingNanos);\n              // Check interruption first, if we woke up due to interruption we need to honor that.\n              if (Thread.interrupted()) {\n                removeWaiter(node);\n                throw new InterruptedException();\n              }\n\n              // Otherwise re-read and check doneness. If we loop then it must have been a spurious\n              // wakeup\n              localValue = value;\n              if (localValue != null & !(localValue instanceof SetFuture)) {\n                return getDoneValue(localValue);\n              }\n\n              // timed out?\n              remainingNanos = endNanos - System.nanoTime();\n              if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n                // Remove the waiter, one way or another we are done parking this thread.\n                removeWaiter(node);\n                break long_wait_loop; // jump down to the busy wait loop\n              }\n            }\n          }\n          oldHead = waiters; // re-read and loop.\n        } while (oldHead != Waiter.TOMBSTONE);\n      }\n      // re-read value, if we get here then we must have observed a TOMBSTONE while trying to add a\n      // waiter.\n      return getDoneValue(value);\n    }\n    // If we get here then we have remainingNanos < SPIN_THRESHOLD_NANOS and there is no node on the\n    // waiters list\n    while (remainingNanos > 0) {\n      localValue = value;\n      if (localValue != null & !(localValue instanceof SetFuture)) {\n        return getDoneValue(localValue);\n      }\n      if (Thread.interrupted()) {\n        throw new InterruptedException();\n      }\n      remainingNanos = endNanos - System.nanoTime();\n    }\n\n    String futureToString = toString();\n    final String unitString = unit.toString().toLowerCase(Locale.ROOT);\n    String message = \"Waited \" + timeout + \" \" + unit.toString().toLowerCase(Locale.ROOT);\n    // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise\n    if (remainingNanos + SPIN_THRESHOLD_NANOS < 0) {\n      // We over-waited for our timeout.\n      message += \" (plus \";\n      long overWaitNanos = -remainingNanos;\n      long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);\n      long overWaitLeftoverNanos = overWaitNanos - unit.toNanos(overWaitUnits);\n      boolean shouldShowExtraNanos =\n          overWaitUnits == 0 || overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS;\n      if (overWaitUnits > 0) {\n        message += overWaitUnits + \" \" + unitString;\n        if (shouldShowExtraNanos) {\n          message += \",\";\n        }\n        message += \" \";\n      }\n      if (shouldShowExtraNanos) {\n        message += overWaitLeftoverNanos + \" nanoseconds \";\n      }\n\n      message += \"delay)\";\n    }\n    // It's confusing to see a completed future in a timeout message; if isDone() returns false,\n    // then we know it must have given a pending toString value earlier. If not, then the future\n    // completed after the timeout expired, and the message might be success.\n    if (isDone()) {\n      throw new TimeoutException(message + \" but future completed as timeout expired\");\n    }\n    throw new TimeoutException(message + \" for \" + futureToString);\n  }\n```"], [183, "java", "Duration.minus", "```java\npublic Duration minus(long amount) {\n        return new Minus().apply(this, unit == null ? FOREVER : new Duration(amount, unit));\n    }\n```"], [19, "java", "PropertyWrapper.removeAllCallbacks", "```java\n@Override\n    public void removeAllCallbacks() {\n        final Set<Runnable> callbacksToRemove = new HashSet<Runnable>(callbacks);\n        for (Runnable callback : callbacksToRemove) {\n            prop.removeCallback(callback);\n        }\n        callbacks.removeAll(callbacksToRemove);\n    }\n```"], [904, "java", "NowAndTodayUtil.parseNow", "```java\nprivate static void parseNow(String value, String lowerValue, Calendar c) throws DateParseException {\n        if (lowerValue.length() > NOW_LENGTH) {\n            Matcher matcher = NOW_OFFSET_PATTERN.matcher(lowerValue);\n            if (!matcher.find()) {\n                throw new DateParseException(\"Improper value in 'NOW' value: \" + value\n                        + \". 'NOW' must be followed by + or -, then numeric offset, then units (h{our{s}}, \"\n                        + \"m{inute{s}}, d{ay{s}}, or y{ears}\");\n            }\n            if (matcher.groupCount() != 4) {\n                throw new DateParseException(\"Improper value in 'NOW' value: \" + value + \". Pattern match returned \"\n                        + matcher.groupCount() + \" instead of 4\");\n            }\n            char sign = matcher.group(2).charAt(0);\n            if (sign != '+' && sign != '-') {\n                throw new DateParseException(\"Improper sign in 'NOW' value '\" + lowerValue + \"'\");\n            }\n            String offsetStr = matcher.group(3);\n            int offset;\n            try {\n                offset = Integer.parseInt(offsetStr);\n            } catch (NumberFormatException e) {\n                throw new DateParseException(\"Improper offset in 'NOW' value '\" + value + \"'\");\n            }\n            if (sign == '-') {\n                offset = -offset;\n            }\n            int calendarField;\n            String units = matcher.group(4);\n            if (\"years\".startsWith(units)) {\n                calendarField = Calendar.YEAR;\n            } else if (\"days\".startsWith(units)) {\n                calendarField = Calendar.DATE;\n            } else if (\"hours\".startsWith(units)) {\n                calendarField = Calendar.HOUR;\n            } else if (\"minutes\".startsWith(units)) {\n                calendarField = Calendar.MINUTE;\n            } else {\n                throw new DateParseException(\"Improper units in 'NOW' value: '\" + units + \"', must be y{ear{s}}, \"\n                        + \"d{ay{s}}, h{our{s}}, or m{inute{s}}\");\n            }\n            c.add(calendarField, offset);\n        }\n    }\n```"], [824, "java", "SVGGraphics2D.getSVGFontStyle", "```java\nprivate String getSVGFontStyle() {\n        StringBuilder b = new StringBuilder();\n        b.append(\"fill: \").append(svgColorStr()).append(\"; \");\n        b.append(\"fill-opacity: \").append(getColorAlpha() * getAlpha())\n                .append(\"; \");\n        String fontFamily = this.fontMapper.mapFont(this.font.getFamily());\n        b.append(\"font-family: \").append(fontFamily).append(\"; \");\n        b.append(\"font-size: \").append(this.font.getSize()).append(this.fontSizeUnits).append(\";\");\n        if (this.font.isBold()) {\n            b.append(\" font-weight: bold;\");\n        }\n        if (this.font.isItalic()) {\n            b.append(\" font-style: italic;\");\n        }\n        return b.toString();\n    }\n```"], [741, "java", "LogglyClient.log", "```java\npublic boolean log(String message) {\n        if (message == null) return false;\n\n        boolean ok;\n        try {\n            ok = loggly.log(token, tags, message).isExecuted();\n        } catch (Exception e) {\n            e.printStackTrace();\n            ok = false;\n        }\n        return ok;\n    }\n```"], [372, "java", "CheckUtilities.checkStringListArgument", "```java\npublic static void checkStringListArgument(List<String> str, String variableName) {\n    if (null == str) {\n      throw new NullPointerException(ExceptionMessageMap.getMessage(\"000002\")\n          + \"  { variableName=[\" + variableName + \"] }\");\n    }\n    if (str.size() == 0) {\n      throw new IllegalArgumentException(ExceptionMessageMap.getMessage(\"000002\")\n          + \"  { variableName=[\" + variableName + \"] }\");\n    }\n    for (int i = 0; i < str.size(); i++) {\n      checkStringArgument(str.get(i), variableName);\n    }\n  }\n```"], [368, "java", "BorderWidth.isValid", "```java\npublic static boolean isValid(final String cssValue) {\n        final String trimmedCssValue = StringUtil.strip(cssValue).toLowerCase();\n        final String[] cssValueParts = StringUtil.splitBySpace(trimmedCssValue);\n        if (cssValueParts.length > 4) {\n            return false;\n        }\n        for (final String cssValuePart : cssValueParts) {\n            boolean invalidValue = true;\n            for (final CssLengthUnit cssLengthUnit : CssLengthUnit.values()) {\n                final String unit = cssLengthUnit.getUnit();\n                if (cssValuePart.endsWith(unit)) {\n                    final String valueOnly = cssValuePart.replaceFirst(unit,\n                            \"\");\n                    try {\n                        Float.parseFloat(valueOnly);\n                    } catch (final NumberFormatException e) {\n                        break;\n                    }\n                    invalidValue = false;\n                    break;\n                }\n            }\n            if (PREDEFINED_CONSTANTS.contains(cssValuePart)) {\n                invalidValue = false;\n            }\n            if (invalidValue) {\n                return false;\n            }\n        }\n        return true;\n    }\n```"], [996, "java", "ZKClientImpl.getChildren", "```java\n@Override\n  public WatchableTask<List<String>> getChildren(String path) {\n    return new WatchableTask<List<String>>(\"zkGetChildren: \" + path) {\n      @Override\n      protected Promise run(Context context) throws Throwable {\n        SettablePromise<List<String>> promise = Promises.settable();\n        _zkClient.getChildren(path, _watcher, (int rc, String p, Object ctx, List<String> children) -> {\n          KeeperException.Code code = KeeperException.Code.get(rc);\n          switch (code) {\n            case OK:\n              promise.done(children);\n              break;\n            default:\n              promise.fail(KeeperException.create(code, p));\n          }\n        }, null);\n        return promise;\n      }\n    };\n  }\n```"], [908, "java", "Trans.getConnectionAuto", "```java\npublic static Connection getConnectionAuto(DataSource ds) throws SQLException {\n        if (get() == null)\n            return ds.getConnection();\n        else\n            return get().getConnection(ds);\n    }\n```"], [695, "java", "ShadowUsageStatsManager.getAppStandbyBucket", "```java\n@Implementation(minSdk = Build.VERSION_CODES.P)\n  @HiddenApi\n  public @StandbyBuckets int getAppStandbyBucket(String packageName) {\n    Integer bucket = appStandbyBuckets.get(packageName);\n    return (bucket == null) ? UsageStatsManager.STANDBY_BUCKET_ACTIVE : bucket;\n  }\n```"], [826, "java", "BaseActions.push", "```java\npublic boolean push(final int down, final V value)\n    {\n        check();\n        context.getValueStack().push(down, value);\n        return true;\n    }\n```"], [531, "java", "ConditionFactory.untilCall", "```java\npublic <T> T untilCall(T proxyMethodReturnValue, final Matcher<? super T> matcher) {\n        if (!existInCP(\"java.util.ServiceLoader\")) {\n            throw new UnsupportedOperationException(\"java.util.ServiceLoader not found in classpath so cannot create condition\");\n        }\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        if (cl == null) {\n            cl = ClassLoader.getSystemClassLoader();\n        }\n        Iterator<ProxyConditionFactory> iterator = java.util.ServiceLoader.load(ProxyConditionFactory.class, cl).iterator();\n        if (!iterator.hasNext()) {\n            throw new UnsupportedOperationException(\"There's currently no plugin installed that can handle proxy conditions, please consider adding 'awaitility-proxy' to the classpath. If using Maven you can do:\" +\n                    \"<dependency>\\n\" +\n                    \"\\t<groupId>org.awaitility</groupId>\\n\" +\n                    \"\\t<artifactId>awaitility-proxy</artifactId>\\n\" +\n                    \"\\t<version>${awaitility.version}</version>\\n\" +\n                    \"</dependency>\\n\");\n        }\n        @SuppressWarnings(\"unchecked\") ProxyConditionFactory<T> factory = iterator.next();\n        if (factory == null) {\n            throw new IllegalArgumentException(\"Internal error: Proxy condition plugin initialization returned null, please report an issue.\");\n        }\n        return until(factory.createProxyCondition(proxyMethodReturnValue, matcher, generateConditionSettings()));\n    }\n```"], [662, "java", "MentionsEditText.onTouchEvent", "```java\n@Override\n    public boolean onTouchEvent(@NonNull MotionEvent event) {\n        final MentionSpan touchedSpan = getTouchedSpan(event);\n\n        // Android 6 occasionally throws a NullPointerException inside Editor.onTouchEvent()\n        // for ACTION_UP when attempting to display (uninitialised) text handles.\n        boolean superResult;\n        if (android.os.Build.VERSION.SDK_INT == Build.VERSION_CODES.M &&\n            event.getActionMasked() == MotionEvent.ACTION_UP) {\n            try {\n                superResult = super.onTouchEvent(event);\n            } catch (NullPointerException ignored) {\n                // Ignore this (see above) - since we're now in an unknown state let's clear all\n                // selection (which is still better than an arbitrary crash that we can't control):\n                clearFocus();\n                superResult = true;\n            }\n        } else {\n            superResult = super.onTouchEvent(event);\n        }\n\n        if (event.getAction() == MotionEvent.ACTION_UP) {\n            // Don't call the onclick on mention if MotionEvent.ACTION_UP is for long click action,\n            if (!isLongPressed && touchedSpan != null) {\n                // Manually click span and show soft keyboard\n                touchedSpan.onClick(this);\n                Context context = getContext();\n                if (context != null) {\n                    InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n                    imm.showSoftInput(this, 0);\n                }\n                return true;\n            }\n        } else if (event.getAction() == MotionEvent.ACTION_DOWN) {\n            isLongPressed = false;\n            if (isLongClickable() && touchedSpan != null) {\n                if (longClickRunnable == null) {\n                    longClickRunnable = new CheckLongClickRunnable();\n                }\n                longClickRunnable.touchedSpan = touchedSpan;\n                removeCallbacks(longClickRunnable);\n                postDelayed(longClickRunnable, ViewConfiguration.getLongPressTimeout());\n            }\n        } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {\n            isLongPressed = false;\n        }\n\n        // Check if user clicked on the EditText while showing the suggestions list\n        // If so, avoid the current prefix\n        if (mAvoidPrefixOnTap\n                && mSuggestionsVisibilityManager != null\n                && mSuggestionsVisibilityManager.isDisplayingSuggestions()) {\n            mSuggestionsVisibilityManager.displaySuggestions(false);\n            String keywords = getCurrentKeywordsString();\n            String[] words = keywords.split(\" \");\n            if (words.length > 0) {\n                String prefix = words[words.length - 1];\n                // Note that prefix == \"\" when user types an explicit character and taps the EditText\n                // We must not allow the user to avoid suggestions for the empty string prefix\n                // Otherwise, explicit mentions would be broken, see MOB-38080\n                if (prefix.length() > 0) {\n                    setAvoidedPrefix(prefix);\n                }\n            }\n        }\n        return superResult;\n    }\n```"], [871, "java", "Json.fromJson", "```java\npublic static Object fromJson(Type type, Reader reader)\r\n            throws JsonException {\r\n        return parse(type, reader);\r\n    }\n```"], [379, "java", "DefaultBoundSessionOfHashSetOperations.set", "```java\npublic Long set(HK key, Collection<HV> values) {\n        return ops.multiSet(getKey(), getField(), key, values);\n    }\n```"], [483, "java", "Node.back", "```java\nNode<E> back() {\n            Node<E> f = predecessor();\n            return (f == null || f.isSpecial()) ? null : f;\n        }\n```"], [292, "java", "PVector2DGenerator.createNormal", "```java\npublic static <T> Generator<PVector2D<T>> createNormal()\n  {\n    return new PVector2DGenerator<>(PrimitiveGenerators.doubles(\n      GeneratorConstants.BOUND_NORMAL_DOUBLE_LOWER,\n      GeneratorConstants.BOUND_NORMAL_DOUBLE_UPPER\n    ));\n  }\n```"], [54, "java", "IntMath.factorial", "```java\npublic static int factorial(int n) {\n    checkNonNegative(\"n\", n);\n    return (n < factorials.length) ? factorials[n] : Integer.MAX_VALUE;\n  }\n```"], [998, "java", "RandomizedBackoff.nextBackoff", "```java\n@Override\n  public long nextBackoff(int attempts, Throwable error) {\n    return _policy.nextBackoff(attempts, error) + _minRange + Math.round((_maxRange - _minRange) * ThreadLocalRandom.current().nextDouble());\n  }\n```"], [844, "java", "Striped.lazyWeakSemaphore", "```java\npublic static Striped<Semaphore> lazyWeakSemaphore(int stripes, final int permits) {\n    return lazy(\n        stripes,\n        new Supplier<Semaphore>() {\n          @Override\n          public Semaphore get() {\n            return new Semaphore(permits, false);\n          }\n        });\n  }\n```"], [528, "java", "ItemGroupAssert.assertDoesNotHaveDuplicates", "```java\nprotected final void assertDoesNotHaveDuplicates() {\n    isNotNull();\n    Collection<?> duplicates = duplicatesFrom(actualAsList());\n    if (duplicates.isEmpty()) {\n      return;\n    }\n    failIfCustomMessageIsSet();\n    throw failure(format(\"<%s> contains duplicate(s):<%s>\", actual, duplicates));\n  }\n```"], [854, "java", "Times.nextSecond", "```java\npublic static Date nextSecond(Date date, int second) {\r\n        Calendar cal = Calendar.getInstance();\r\n        if (date != null) {\r\n            cal.setTime(date);\r\n        }\r\n        cal.add(Calendar.SECOND, second);\r\n        return cal.getTime();\r\n    }\n```"], [937, "java", "Xmls.eachChildren", "```java\npublic static void eachChildren(Element ele,\n                                    String regex,\n                                    final Each<Element> callback,\n                                    int off) {\n        if (null == ele || null == callback)\n            return;\n\n        // \u6b63\u5219\u5f0f\n        final Pattern p = null == regex ? null : Pattern.compile(regex);\n\n        NodeList nl = ele.getChildNodes();\n\n        // \u5faa\u73af\u5b50\n        final int len = nl.getLength();\n\n        // \u6bcf\u6b21\u5faa\u73af\u6267\u884c\n        Callback2<Integer, Node> eachInvoke = new Callback2<Integer, Node>() {\n            public void invoke(Integer index, Node nd) {\n                if (nd instanceof Element)\n                    try {\n                        Element tag = (Element) nd;\n                        if (null == p || p.matcher(tag.getTagName()).find())\n                            callback.invoke(index, tag, len);\n                    }\n                    catch (ExitLoop e) {\n                        throw Lang.wrapThrow(e);\n                    }\n                    catch (ContinueLoop e) {}\n                    catch (LoopException e) {\n                        throw Lang.wrapThrow(e);\n                    }\n            }\n        };\n\n        try {\n            // \u8d1f\u5411\u8fed\u4ee3\n            if (off < 0) {\n                for (int i = len + off; i >= 0; i--) {\n                    eachInvoke.invoke(i, nl.item(i));\n                }\n            }\n            // \u6b63\u5411\u8fed\u4ee3\n            else {\n                for (int i = off; i < len; i++) {\n                    eachInvoke.invoke(i, nl.item(i));\n                }\n            }\n        }\n        catch (ExitLoop e) {}\n        catch (RuntimeException e) {\n            if (e.getCause() instanceof ExitLoop)\n                return;\n            else\n                throw e;\n        }\n    }\n```"], [65, "java", "JsonUnflattener.withSeparator", "```java\npublic JsonUnflattener withSeparator(char separator) {\n    isTrue(!Character.toString(separator).matches(\"[\\\"\\\\s]\"),\n        \"Separator contains illegal chracter(%s)\",\n        Character.toString(separator));\n    isTrue(!leftBracket.equals(separator) && !rightBracket.equals(separator),\n        \"Separator(%s) is already used in brackets\",\n        Character.toString(separator));\n\n    this.separator = separator;\n    return this;\n  }\n```"], [437, "java", "PopupAppRegistrationHandler.handleRegistrationRequest", "```java\n@Override\n    public void handleRegistrationRequest(Context context, AppDescriptor descriptor, final Callback callback) {\n        final DialogView dialogView = new DialogView(context, descriptor);\n\n        Dialog dialog = new AlertDialog.Builder(context).setPositiveButton(R.string.app_permission_dialog_allow, new AlertDialog.OnClickListener() {\n\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                callback.onRequestAccepted(dialogView.getSelectedPersona());\n            }\n        }).setNegativeButton(R.string.app_permission_dialog_deny, new AlertDialog.OnClickListener() {\n\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                callback.onRequestRefused();\n            }\n        }).setView(dialogView.getView()).create();\n\n\n        /*\n         * Workaround to fix the crash:\n\t\t * android.view.WindowManager$BadTokenException: Unable to add window\n\t\t * android.view.ViewRootImpl$W@3d67307 -- permission denied for this window type\n\t\t * that appears only on Android 6.0 Marshmallow or greater.\n\t\t * Start a dialog fragment to explain the procedure to the user.\n\t\t * When the user accepts, onClickOnUnderstoodButton() will be called.\n\t\t */\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            //if android MarshMallow or greater\n            if (Settings.canDrawOverlays(context)) {\n                dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n                dialog.show();\n            } else {\n                //to prevent a crash\n                Toast.makeText(context, \"You must activate SPF!\", Toast.LENGTH_SHORT).show();\n            }\n        } else {\n            //other older Android's versions\n            dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n            dialog.show();\n        }\n    }\n```"], [438, "java", "Themes.getColor", "```java\npublic static int getColor(Context context, @AttrRes int attrId) {\n        int color = 0;\n        TypedArray a = context.obtainStyledAttributes(new int[]{attrId});\n        try {\n            color = a.getColor(0, 0);\n        } catch (UnsupportedOperationException e) {\n            error(\"color\", attrId, e);\n        }\n        a.recycle();\n        return color;\n    }\n```"], [504, "java", "ReflectionHelper.getGetterPropertyName", "```java\npublic static String getGetterPropertyName(Member member) {\n        if (member instanceof Field) {\n            return member.getName();\n        } else if (member instanceof Method) {\n            String methodName = member.getName();\n            for (String prefix : PROPERTY_ACCESSOR_PREFIXES) {\n                if (methodName.startsWith(prefix)) {\n                    return decapitalizePropertyName(methodName.substring(prefix.length()));\n                }\n            }\n        }\n        return null;\n    }\n```"], [127, "java", "MenuTree.setDefault", "```java\npublic void setDefault(final UUID _selectCmdUUID)\n    {\n        final UIMenuItem menuItem = getProvider().getRoots().next();\n        menuItem.setHeader(true);\n        boolean hasDefault = false;\n        for (final UIMenuItem childItem : menuItem.getChildren()) {\n            if (_selectCmdUUID == null && childItem.isDefaultSelected()\n                            || _selectCmdUUID != null && _selectCmdUUID.equals(childItem.getCommandUUID())) {\n                hasDefault = true;\n                childItem.setSelected(true);\n            }\n        }\n        if (!hasDefault) {\n            menuItem.setSelected(true);\n        }\n        expand(menuItem);\n        expandChildren(menuItem);\n    }\n```"], [167, "java", "Mono.timeout", "```java\npublic final Mono<T> timeout(Duration timeout, Mono<? extends T> fallback) {\n\t\treturn timeout(timeout, fallback, Schedulers.parallel());\n\t}\n```"], [636, "java", "Maps.transformEntry", "```java\nstatic <V2, K, V1> Entry<K, V2> transformEntry(\n      final EntryTransformer<? super K, ? super V1, V2> transformer, final Entry<K, V1> entry) {\n    checkNotNull(transformer);\n    checkNotNull(entry);\n    return new AbstractMapEntry<K, V2>() {\n      @Override\n      public K getKey() {\n        return entry.getKey();\n      }\n\n      @Override\n      public V2 getValue() {\n        return transformer.transformEntry(entry.getKey(), entry.getValue());\n      }\n    };\n  }\n```"], [821, "java", "Record.get", "```java\npublic Object get(Object name) {\r\n        if (null == name)\r\n            return null;\r\n        return map.get(name.toString().toLowerCase());\r\n    }\n```"], [770, "java", "VotesClass.getBillsBySponsorYear", "```java\npublic Bills getBillsBySponsorYear(String candidateId, String year) throws VoteSmartException, VoteSmartErrorException {\r\n\t\treturn api.query(\"Votes.getBillsBySponsorYear\", new ArgMap(\"candidateId\", candidateId, \"year\", year), Bills.class );\r\n\t}\n```"], [685, "java", "Resources.asCharSource", "```java\npublic static CharSource asCharSource(URL url, Charset charset) {\n    return asByteSource(url).asCharSource(charset);\n  }\n```"], [135, "java", "SchematronResourcePure.validateCompletely", "```java\npublic void validateCompletely (@Nonnull final IPSErrorHandler aErrorHandler)\n  {\n    ValueEnforcer.notNull (aErrorHandler, \"ErrorHandler\");\n\n    try\n    {\n      getOrCreateBoundSchema ().getOriginalSchema ().validateCompletely (aErrorHandler);\n    }\n    catch (final RuntimeException ex)\n    {\n      // May happen when XPath errors are contained\n    }\n  }\n```"], [838, "java", "ShadowArscAssetManager9.nativeThemeCopy", "```java\n@Implementation(minSdk = Build.VERSION_CODES.Q)\n  protected static void nativeThemeCopy(long dst_asset_manager_ptr, long dst_theme_ptr,\n      long src_asset_manager_ptr, long src_theme_ptr) {\n    Theme dst_theme = Registries.NATIVE_THEME9_REGISTRY.getNativeObject(dst_theme_ptr);\n    Theme src_theme = Registries.NATIVE_THEME9_REGISTRY.getNativeObject(src_theme_ptr);\n\n    if (dst_asset_manager_ptr != src_asset_manager_ptr) {\n      CppAssetManager2 dst_assetmanager = AssetManagerFromLong(dst_asset_manager_ptr);\n      CHECK(dst_theme.GetAssetManager() == dst_assetmanager);\n\n      CppAssetManager2 src_assetmanager = AssetManagerFromLong(src_asset_manager_ptr);\n      CHECK(src_theme.GetAssetManager() == src_assetmanager);\n\n      dst_theme.SetTo(src_theme);\n    } else {\n      dst_theme.SetTo(src_theme);\n    }\n  }\n```"], [25, "java", "BcelUtil.accessFlagsToString", "```java\nstatic String accessFlagsToString(Method m) {\n\n    int flags = m.getAccessFlags();\n\n    StringBuilder buf = new StringBuilder();\n    // Note that pow is a binary mask for the flag (= 2^i).\n    for (int i = 0, pow = 1; i <= Const.MAX_ACC_FLAG; i++) {\n      if ((flags & pow) != 0) {\n        if (buf.length() > 0) {\n          buf.append(\" \");\n        }\n        if (i < Const.ACCESS_NAMES_LENGTH) {\n          buf.append(Const.getAccessName(i));\n        } else {\n          buf.append(String.format(\"ACC_BIT(%x)\", pow));\n        }\n      }\n      pow <<= 1;\n    }\n\n    return buf.toString();\n  }\n```"], [872, "java", "Collections2.filter", "```java\npublic static <E> Collection<E> filter(Collection<E> unfiltered, Predicate<? super E> predicate) {\n    if (unfiltered instanceof FilteredCollection) {\n      // Support clear(), removeAll(), and retainAll() when filtering a filtered\n      // collection.\n      return ((FilteredCollection<E>) unfiltered).createCombined(predicate);\n    }\n\n    return new FilteredCollection<E>(checkNotNull(unfiltered), checkNotNull(predicate));\n  }\n```"], [326, "java", "Chronos.runBroadcast", "```java\n@NonNull\n    public static <Output> ChronosOperationResult<Output> runBroadcast(\n            @NonNull final ChronosOperation<Output> operation) {\n        return ChronosService.getInstance().runSync(operation, true);\n    }\n```"], [604, "java", "XmlToXsdExtensions.xmlToXsd", "```java\npublic static void xmlToXsd(final File xmlInputFile, final File xsdOutFile,\n\t\tfinal Inst2XsdOptions inst2XsdOptions) throws XmlException, IOException\n\t{\n\t\txmlToXsd(xmlInputFile, xsdOutFile, inst2XsdOptions, new XmlOptions().setSavePrettyPrint());\n\t}\n```"]]}, "Validation-All MRR (bs=1,000)": 0.006256573620415141, "Examples-Test-java": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[745, "java", "Is24XmlUtils.getContext", "```java\npublic synchronized static JAXBContext getContext() throws JAXBException {\n        if (JAXB == null) initContext(Thread.currentThread().getContextClassLoader());\n        return JAXB;\n    }\n```"], [480, "java", "LogServiceImpl.setLoggerLevel", "```java\npublic void setLoggerLevel(String loggerName, String level) throws ManagementConsoleException {\r\n\r\n    sleeConnection.getSleeManagementMBeanUtils().getLogManagementMBeanUtils().setLoggerLevel(loggerName, level);\r\n\r\n  }\n```"], [126, "java", "Observable.hide", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> hide() {\n        return RxJavaPlugins.onAssembly(new ObservableHide<T>(this));\n    }\n```"], [432, "java", "FileAppender.setFile", "```java\npublic void setFile(String file) {\n    if (file == null) {\n      fileName = null;\n    } else {\n      // Trim spaces from both ends. The users probably does not want\n      // trailing spaces in file names.\n      fileName = file.trim();\n    }\n  }\n```"], [549, "java", "Properties.inspectProperties", "```java\nprotected HashMap<String, PropertyDescriptor> inspectProperties() {\n\t\tboolean scanAccessible = classDescriptor.isScanAccessible();\n\t\tClass type = classDescriptor.getType();\n\n\t\tHashMap<String, PropertyDescriptor> map = new HashMap<>();\n\n\t\tMethod[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type);\n\n\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t// first find the getters, and then the setters!\n\t\t\tfor (Method method : methods) {\n\t\t\t\tif (Modifier.isStatic(method.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static methods\n\t\t\t\t}\n\n\t\t\t\tboolean add = false;\n\t\t\t\tboolean issetter = false;\n\n\t\t\t\tString propertyName;\n\n\t\t\t\tif (iteration == 0) {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertyGetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertySetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (add) {\n\t\t\t\t\tMethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true);\n\t\t\t\t\taddProperty(map, propertyName, methodDescriptor, issetter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classDescriptor.isIncludeFieldsAsProperties()) {\n\t\t\tFieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors();\n\t\t\tString[] prefix = classDescriptor.getPropertyFieldPrefix();\n\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldDescriptors) {\n\t\t\t\tField field = fieldDescriptor.getField();\n\n\t\t\t\tif (Modifier.isStatic(field.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static fields\n\t\t\t\t}\n\n\t\t\t\tString name = field.getName();\n\n\t\t\t\tif (prefix != null) {\n\t\t\t\t\tfor (String p : prefix) {\n\t\t\t\t\t\tif (!name.startsWith(p)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = name.substring(p.length());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!map.containsKey(name)) {\n\t\t\t\t\t// add missing field as a potential property\n\t\t\t\t\tmap.put(name, createPropertyDescriptor(name, fieldDescriptor));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn map;\n\t}\n```"], [59, "java", "ExceptionHelper.wrapOrThrow", "```java\npublic static RuntimeException wrapOrThrow(Throwable error) {\n        if (error instanceof Error) {\n            throw (Error)error;\n        }\n        if (error instanceof RuntimeException) {\n            return (RuntimeException)error;\n        }\n        return new RuntimeException(error);\n    }\n```"], [606, "java", "SegmentedByteArray.rangeEquals", "```java\npublic boolean rangeEquals(long rangeStart, SegmentedByteArray compareTo, long cmpStart, int length) {\n    \tfor(int i=0;i<length;i++)\n    \t\tif(get(rangeStart + i) != compareTo.get(cmpStart + i))\n    \t\t\treturn false;\n    \treturn true;\n    }\n```"], [18, "java", "Update.getVersion", "```java\npublic String getVersion() throws MalformedElementException {\n        Element version = getFirstChild(root, \"version\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingVersionElmt\"), version); //$NON-NLS-1$\n        String href = getChildText(version, \"href\", true); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingHrefElmt\"), href); //$NON-NLS-1$\n        return decodeHref(href);\n    }\n```"], [346, "java", "AbstractRequestMatcherRegistry.antMatchers", "```java\npublic C antMatchers(String... antPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure antMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.antMatchers(antPatterns));\n\t}\n```"], [439, "java", "AbstractRefreshMetricsListener.noFailRefreshEndMetricsReporting", "```java\nprivate final void noFailRefreshEndMetricsReporting(ConsumerRefreshMetrics refreshMetrics) {\n        try {\n            refreshEndMetricsReporting(refreshMetrics);\n        } catch (Exception e) {\n            // Metric reporting is not considered critical to consumer refresh. Log exceptions and continue.\n            log.log(Level.SEVERE, \"Encountered an exception in reporting consumer refresh metrics, ignoring exception and continuing with consumer refresh\", e);\n        }\n    }\n```"], [49, "java", "JtxTransaction.commitOrRollback", "```java\nprotected void commitOrRollback(boolean doCommit) {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (doCommit) {\n\t\t\t\tlog.debug(\"Commit JTX\");\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Rollback JTX\");\n\t\t\t}\n\t\t}\n\t\tboolean forcedRollback = false;\n\t\tif (!isNoTransaction()) {\n\t\t\tif (isRollbackOnly()) {\n\t\t\t\tif (doCommit) {\n\t\t\t\t\tdoCommit = false;\n\t\t\t\t\tforcedRollback = true;\n\t\t\t\t}\n\t\t\t} else if (!isActive()) {\n\t\t\t\tif (isCompleted()) {\n\t\t\t\t\tthrow new JtxException(\"TX is already completed, commit or rollback should be called once per TX\");\n\t\t\t\t}\n\t\t\t\tthrow new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\"));\n\t\t\t}\n\t\t}\n\t\tif (doCommit) {\n\t\t\tcommitAllResources();\n\t\t} else {\n\t\t\trollbackAllResources(forcedRollback);\n\t\t}\n\t}\n```"], [352, "java", "PrologParser.main", "```java\npublic static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }\n```"], [268, "java", "FileNameUtil.concat", "```java\npublic static String concat(final String basePath, final String fullFilenameToAdd) {\n\t\treturn doConcat(basePath, fullFilenameToAdd, SYSTEM_SEPARATOR);\n\t}\n```"], [387, "java", "UserClient.updateUser", "```java\npublic User updateUser(User userParam)\n    {\n        if(userParam != null && this.serviceTicket != null)\n        {\n            userParam.setServiceTicket(this.serviceTicket);\n        }\n\n        return new User(this.postJson(\n                userParam, WS.Path.User.Version1.userUpdate()));\n    }\n```"], [825, "java", "RollupService.setServerTime", "```java\npublic synchronized void setServerTime(long millis) {\n        log.info(\"Manually setting server time to {}  {}\", millis, new java.util.Date(millis));\n        context.setCurrentTimeMillis(millis);\n    }\n```"], [808, "java", "EmailFilter.or", "```java\nprotected void or(final SearchTerm searchTerm) {\n\t\tif (this.searchTerm == null) {\n\t\t\tthis.searchTerm = searchTerm;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchTerm = new OrTerm(this.searchTerm, searchTerm);\n\t}\n```"], [511, "java", "ReteGraph.addChild", "```java\npublic boolean addChild(BaseVertex vertex) {\n        if ( vertex != null && vertices.add( vertex ) ) {\n            firePropertyChange( PROP_CHILD_ADDED,\n                                null,\n                                vertex );\n            return true;\n        }\n        return false;\n    }\n```"], [156, "java", "JPANotificationRESTController.getNotifications", "```java\n@RequestMapping(method = RequestMethod.GET)\n    @ResponseBody\n    public List<EntryDTO> getNotifications(\n            @RequestParam(value = \"page\", required = false) Integer page,\n            @RequestParam(value = \"pageSize\", required = false) Integer pageSize) {\n\n        return restService.getNotifications(page, pageSize);\n    }\n```"], [301, "java", "Iterators.limit", "```java\npublic static <E> Iterator<E> limit(Iterator<? extends E> iterator,\n\t\tint limit)\n\t{\n\t\treturn new LimitIterator<E>(iterator, limit);\n\t}\n```"], [925, "java", "Base64.encodeToString", "```java\npublic static String encodeToString(String s) {\n        try {\n            return new String(encodeToChar(s.getBytes(ENCODING), false));\n        } catch (UnsupportedEncodingException ignore) {\n            return null;\n        }\n    }\n```"], [103, "java", "AreaGrid.calculateColumns", "```java\nprivate void calculateColumns()\n    {\n        //create the sorted list of points\n        GridPoint points[] = new GridPoint[areas.size() * 2];\n        int pi = 0;\n        for (Area area : areas)\n        {\n            points[pi] = new GridPoint(area.getX1(), area, true);\n            points[pi+1] = new GridPoint(area.getX2() + 1, area, false);\n            pi += 2;\n            //X2+1 ensures that the end of one box will be on the same point\n            //as the start of the following box\n        }\n        Arrays.sort(points);\n        \n        //calculate the number of columns\n        int cnt = 0;\n        int last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n            if (!theSame(points[i].value, last))\n            { \n                last = points[i].value;\n                cnt++;\n            }\n        if (!theSame(last, abspos.getX2()))\n        \tcnt++; //last column finishes the whole area\n        width = cnt;\n        \n        //calculate the column widths and the layout\n        maxindent = 0;\n        minindent = -1;\n        cols = new int[width];\n        cnt = 0;\n        last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n        {\n            if (!theSame(points[i].value, last)) \n            {\n                cols[cnt] = points[i].value - last;\n                last = points[i].value;\n                cnt++;\n            }\n            if (points[i].begin)\n            {\n                target.getPosition(points[i].area).setX1(cnt);\n                maxindent = cnt;\n                if (minindent == -1) minindent = maxindent;\n                //points[i].node.getArea().setX1(parent.getArea().getX1() + getColOfs(cnt));\n            }\n            else\n            {\n                Rectangular pos = target.getPosition(points[i].area); \n                pos.setX2(cnt-1);\n                if (pos.getX2() < pos.getX1())\n                    pos.setX2(pos.getX1());\n                //points[i].node.getArea().setX2(parent.getArea().getX1() + getColOfs(pos.getX2()+1));\n            }\n        }\n        if (!theSame(last, abspos.getX2()))\n        \tcols[cnt] = abspos.getX2() - last;\n        if (minindent == -1)\n            minindent = 0;\n    }\n```"], [570, "java", "JdbcHelper.initialize", "```java\nprivate static void initialize() {\n\t\tString driver = ConfigHelper.getProperty(\"jdbc.driver\");\n\t\tString url = ConfigHelper.getProperty(\"jdbc.url\");\n\t\tString username = ConfigHelper.getProperty(\"jdbc.username\");\n\t\tString password = ConfigHelper.getProperty(\"jdbc.password\");\n\t\tint maxActive = ConfigHelper.getNumerProperty(\"jdbc.max.active\");\n\t\tint maxIdle = ConfigHelper.getNumerProperty(\"jdbc.max.idle\");\n\t\tAssertHelper.notNull(driver);\n\t\tAssertHelper.notNull(url);\n\t\tAssertHelper.notNull(username);\n\t\tAssertHelper.notNull(password);\n\t\t//\u521d\u59cb\u5316DBCP\u6570\u636e\u6e90\n\t\tBasicDataSource ds = new BasicDataSource();\n\t\tds.setDriverClassName(driver);\n\t\tds.setUrl(url);\n\t\tds.setUsername(username);\n\t\tds.setPassword(password);\n        if(maxActive != 0) {\n\t\t    ds.setMaxActive(maxActive);\n        }\n        if(maxIdle != 0) {\n\t\t    ds.setMaxIdle(maxIdle);\n        }\n\t\tdataSource = ds;\n\t}\n```"], [993, "java", "PasswordLoginModule.abort", "```java\n@Override\n    // Check is broken [LOG.info()]: PMD reports issues although log stmt is guarded. @todo revisit when upgrading PMD.\n    @SuppressWarnings(\"PMD.GuardLogStatementJavaUtil\")\n    public final boolean abort()\n            throws LoginException {\n\n        if (pendingSubject == null) {\n            // the login method of this module has failed earlier, hence we do not need to clean up anything\n            // return 'false' to indicate that this module's login and/or commit method failed\n            // As the login method failed, the state of the module has already been cleared and we do not know\n            // the username / domain anymore. Hence no auditing / message queue notification, and not verbose logging.\n\n            LOG.debug(\"Aborting authentication, as the authentication has failed earlier (login method)\");\n\n            return false;\n        } else if (committedSubject == null) {\n            // the login method of this module succeeded, but the overall authentication failed\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Aborting authentication: '\" + username + \"@\" + domain + \"'\");\n            }\n\n            // cache the username and domain, for they will be purged by \"cleanState()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            cleanState();\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(tempUsername).\n                    append(\"@\").\n                    append(tempDomain).\n                    toString();\n            AuditHelper.auditEvent(audit, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        } else {\n            // overall authentication succeeded and commit succeeded, but someone else's commit failed\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(username).\n                    append(\"@\").\n                    append(domain).\n                    toString();\n            AuditHelper.auditEvent(audit, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // cache the username and domain, for they will be purged by \"logout()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            logout();\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        }\n    }\n```"], [123, "java", "Parser.parseOptionalBody", "```java\nprivate void parseOptionalBody( Node parent, String tag, String bodyType ) \n        throws JasperException \n    {\n\tif (reader.matches(\"/>\")) {\n\t    // EmptyBody\n\t    return;\n\t}\n\n\tif (!reader.matches(\">\")) {\n\t    err.jspError(reader.mark(), \"jsp.error.unterminated\",\n\t\t\t \"&lt;\" + tag );\n\t}\n        \n        if( reader.matchesETag( tag ) ) {\n            // EmptyBody\n            return;\n        }\n        \n        if( !parseJspAttributeAndBody( parent, tag, bodyType ) ) {\n            // Must be ( '>' # Body ETag )\n            parseBody(parent, tag, bodyType );\n        }\n    }\n```"], [132, "java", "Completable.doOnComplete", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable doOnComplete(Action onComplete) {\n        return doOnLifecycle(Functions.emptyConsumer(), Functions.emptyConsumer(),\n                onComplete, Functions.EMPTY_ACTION,\n                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);\n    }\n```"], [776, "java", "Strings.trimLeadingCharacter", "```java\npublic static String trimLeadingCharacter(String str, final char leadingCharacter)\n   {\n      return trimLeadingCharacter(str, new CharacterChecker()\n      {\n         public boolean isCharacterLegal(char character)\n         {\n            return character == leadingCharacter;\n         }\n      });\n   }\n```"], [412, "java", "ProxettaAsmUtil.resolveJavaVersion", "```java\npublic static int resolveJavaVersion(final int version) {\n\t\tfinal int javaVersionNumber = SystemUtil.info().getJavaVersionNumber();\n\t\tfinal int platformVersion = javaVersionNumber - 8 + 52;\n\n\t\treturn version > platformVersion ? version : platformVersion;\n\t}\n```"], [315, "java", "OpenRtbJsonUtils.startArray", "```java\npublic static void startArray(JsonParser par) throws IOException {\n    JsonToken token = par.getCurrentToken();\n    if (token == null || token == JsonToken.FIELD_NAME) {\n      token = par.nextToken();\n    }\n    if (token == JsonToken.START_ARRAY) {\n      par.nextToken();\n    } else {\n      throw new JsonParseException(par, \"Expected start of array\");\n    }\n  }\n```"], [267, "java", "Observable.take", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler) {\n        return takeUntil(timer(time, unit, scheduler));\n    }\n```"], [669, "java", "AbstractEndpoint.executeAndHandle", "```java\nprotected HttpResponse executeAndHandle(Request request)\n            throws IOException, IllegalArgumentException, IllegalAccessException, FileNotFoundException, IllegalStateException {\n        HttpResponse response = execute(request);\n        handleResponse(response, request);\n        return response;\n    }\n```"], [377, "java", "PipelineConfigurationUpgrader.upgradeIfNecessary", "```java\npublic PipelineConfiguration upgradeIfNecessary(\n      StageLibraryTask library,\n      PipelineConfiguration pipelineConf,\n      List<Issue> issues\n  ) {\n    Preconditions.checkArgument(issues.isEmpty(), \"Given list of issues must be empty.\");\n    boolean upgrade;\n\n    // Firstly upgrading schema if needed, then data\n    upgrade = needsSchemaUpgrade(pipelineConf, issues);\n    if(upgrade && issues.isEmpty()) {\n      pipelineConf = upgradeSchema(library, pipelineConf, issues);\n    }\n\n    // Something went wrong with the schema upgrade\n    if(!issues.isEmpty()) {\n      return null;\n    }\n\n    // Upgrading data if needed\n    upgrade = needsUpgrade(library, pipelineConf, issues);\n    if (upgrade && issues.isEmpty()) {\n      //we try to upgrade only if we have all defs for the pipelineConf\n      pipelineConf = upgrade(library, pipelineConf, issues);\n    }\n    return (issues.isEmpty()) ? pipelineConf : null;\n  }\n```"], [565, "java", "TimerServiceImpl.getWaitingOnTxCompletionTimers", "```java\nprivate Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }\n```"], [122, "java", "RequestHandler.mainRequestHandler", "```java\n@ServiceMethod\n    public void mainRequestHandler(DataStoreRequest dataStoreRequest) {\n\n\n        if (verbose || debug) {\n            logger.info(\"RequestHandler::mainRequestHandler\", dataStoreRequest);\n        }\n        switch (dataStoreRequest.action()) {\n            case GET:\n                masterDataStore.get((GetRequest) dataStoreRequest);\n                break;\n            case GET_LOCAL_DB:\n                handleGetLocalDbVerb(dataStoreRequest);\n                break;\n            case GET_MEM:\n                handleGetMemVerb(dataStoreRequest);\n                break;\n            case SET:\n                masterDataStore.set((SetRequest) dataStoreRequest);\n                break;\n            case SET_BROADCAST:\n                handleSetAndBroadCastVerb(dataStoreRequest);\n                break;\n            case SET_IF_NOT_EXIST:\n                handleSetIfNotExistsVerb(dataStoreRequest);\n                break;\n            case SET_BATCH:\n                handleSetBatch(dataStoreRequest);\n                break;\n            case SET_BATCH_IF_NOT_EXISTS:\n                handleSetBatchIfNotExists(dataStoreRequest);\n                break;\n            case SET_SOURCE:\n                handleSetSource(dataStoreRequest);\n                break;\n            case GET_SOURCE:\n                handleGetSource(dataStoreRequest);\n                break;\n\n            case BATCH_READ:\n                handleBatchRead(dataStoreRequest);\n                break;\n\n            case CLEAR_STATS:\n                handleClearStats(dataStoreRequest);\n                break;\n\n\n            case GET_STATS:\n                handleGetStats(dataStoreRequest);\n                break;\n\n\n            case REMOVE:\n                handleRemove(dataStoreRequest);\n                break;\n\n\n            case REMOVE_SOURCE:\n                handleRemoveSource(dataStoreRequest);\n                break;\n\n            case METHOD_CALL:\n                handleMethodCall((MethodCall) dataStoreRequest);\n                break;\n\n            case SEARCH:\n                handleSearchVerb(dataStoreRequest);\n                break;\n\n            default:\n                puts(dataStoreRequest);\n\n\n        }\n        trackCall(dataStoreRequest.action());\n    }\n```"], [255, "java", "AvroTypeUtil.getAvroSchemaFromHeader", "```java\npublic static String getAvroSchemaFromHeader(Record record, String headerName) throws DataGeneratorException {\n    String jsonSchema = record.getHeader().getAttribute(headerName);\n    if(jsonSchema == null || jsonSchema.isEmpty()) {\n      throw new DataGeneratorException(Errors.AVRO_GENERATOR_03, record.getHeader().getSourceId());\n    }\n    return jsonSchema;\n  }\n```"], [699, "java", "InterfaceRepository.addInterface", "```java\nprivate InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }\n```"], [800, "java", "StdRandom.uniform", "```java\npublic static int uniform(int a, int b)\n  {\n    if (b <= a)\n      throw new IllegalArgumentException(\"Invalid range\");\n    if ((long) b - a >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"Invalid range\");\n    return a + uniform(b - a);\n  }\n```"], [995, "java", "DapController.init", "```java\npublic void init()\n            throws ServletException\n    {\n        org.slf4j.Logger logServerStartup = org.slf4j.LoggerFactory.getLogger(\"serverStartup\");\n        logServerStartup.info(getClass().getName() + \" initialization start\");\n        try {\n            System.setProperty(\"file.encoding\", \"UTF-8\");\n            Field charset = Charset.class.getDeclaredField(\"defaultCharset\");\n            charset.setAccessible(true);\n            charset.set(null, null);\n            initialize();\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n```"], [267, "java", "OfflineClient.getIndex", "```java\n@Override\n    public @NonNull MirroredIndex getIndex(@NonNull String indexName) {\n        MirroredIndex index = null;\n        WeakReference<Object> existingIndex = indices.get(indexName);\n        if (existingIndex != null) {\n            index = (MirroredIndex)existingIndex.get();\n        }\n        if (index == null) {\n            index = new MirroredIndex(this, indexName);\n            indices.put(indexName, new WeakReference<Object>(index));\n        }\n        return index;\n    }\n```"], [127, "java", "TdsRequestedDataset.getGridDataset", "```java\npublic static GridDataset getGridDataset(HttpServletRequest request, HttpServletResponse response, String path) throws IOException {\n    TdsRequestedDataset trd = new TdsRequestedDataset(request, null);\n    if (path != null) trd.path = path;\n    return trd.openAsGridDataset(request, response);\n  }\n```"], [739, "java", "Types.isBuiltinType", "```java\npublic static boolean isBuiltinType(Type type) {\n\t\tClass<?> rawType = getRawType(type);\n\t\treturn (rawType == null) ? false : builtins.contains(rawType);\n\t}\n```"], [132, "java", "SimpleRuleStore.addRule", "```java\npublic void addRule(ElementSelector elementSelector, Action action) {\n    action.setContext(context);\n\n    List<Action> a4p = rules.get(elementSelector);\n\n    if (a4p == null) {\n      a4p = new ArrayList<Action>();\n      rules.put(elementSelector, a4p);\n    }\n\n    a4p.add(action);\n  }\n```"], [811, "java", "RpcResponseResolver.toResponseObject", "```java\nprivate static Object toResponseObject(ResponseCommand responseCommand) throws CodecException {\n        RpcResponseCommand response = (RpcResponseCommand) responseCommand;\n        response.deserialize();\n        return response.getResponseObject();\n    }\n```"], [247, "java", "OClosableLinkedContainer.checkOpenFilesLimit", "```java\nprivate void checkOpenFilesLimit() throws InterruptedException {\n    CountDownLatch ol = openLatch.get();\n    if (ol != null)\n      ol.await();\n\n    while (openFiles.get() > openLimit) {\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      //make other threads to wait till we evict entries and close evicted open files\n      if (openLatch.compareAndSet(null, latch)) {\n        while (openFiles.get() > openLimit) {\n          emptyBuffers();\n        }\n\n        latch.countDown();\n        openLatch.set(null);\n      } else {\n        ol = openLatch.get();\n\n        if (ol != null)\n          ol.await();\n      }\n    }\n  }\n```"], [540, "java", "GuiceApplicationBuilder.load", "```java\npublic GuiceApplicationBuilder load(GuiceableModule... modules) {\n    return newBuilder(delegate.load(Scala.varargs(modules)));\n  }\n```"], [877, "java", "ProfileEntityArrayAttributeValue.setByte", "```java\npublic void setByte(Byte attrValue) {\n\t\tif (attrValue != null) {\n\t\t\tsetString(attrValue.toString());\n\t\t}\n\t\telse {\n\t\t\tsetString(null);\n\t\t}\n\t}\n```"], [424, "java", "StreamUtil.outputStreamWriterOf", "```java\npublic static OutputStreamWriter outputStreamWriterOf(final OutputStream output, final String encoding) throws UnsupportedEncodingException {\n\t\treturn new OutputStreamWriter(output, encoding);\n\t}\n```"], [189, "java", "BufrTableBViewer.writeDiff", "```java\nprivate void writeDiff(TableB wmo, TableB t, Formatter out) {\r\n    out.format(\"#%n# BUFR diff written from %s against %s %n#%n\", t.getName(), wmo.getName());\r\n    out.format(\"Class,FXY,enElementName,BUFR_Unit,BUFR_Scale,BUFR_ReferenceValue,BUFR_DataWidth_Bits%n\");\r\n    List<TableB.Descriptor> listDesc = new ArrayList<>(t.getDescriptors());\r\n    Collections.sort(listDesc);\r\n    for (TableB.Descriptor d1 : listDesc) {\r\n      TableB.Descriptor d2 = wmo.getDescriptor(d1.getId());\r\n      if ((d2 == null) || (d1.getScale() != d2.getScale()) || (d1.getRefVal() != d2.getRefVal()) || (d1.getDataWidth() != d2.getDataWidth())) {\r\n        short fxy = d1.getId();\r\n//        int f = (fxy & 0xC000) >> 14;\r\n        int x  = (fxy & 0x3F00) >> 8;\r\n        int y  = fxy & 0xFF;\r\n        out.format(\"%d,%2d%03d,\\\"%s\\\",%s,%d,%d,%d%n\",x,x,y, d1.getName(), d1.getUnits(), d1.getScale(), d1.getRefVal(), d1.getDataWidth());\r\n      }\r\n    }\r\n    out.flush();\r\n  }\n```"], [654, "java", "OpenRtbUtils.bids", "```java\npublic static Iterable<Bid.Builder> bids(BidResponse.Builder response) {\n    return new ResponseBidsIterator(response, SEAT_ANY, null);\n  }\n```"], [92, "java", "Flowable.blockingSubscribe", "```java\n@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final void blockingSubscribe(Consumer<? super T> onNext) {\n        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);\n    }\n```"], [728, "java", "Completable.repeatUntil", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable repeatUntil(BooleanSupplier stop) {\n        return fromPublisher(toFlowable().repeatUntil(stop));\n    }\n```"]]}, "Test-java MRR (bs=1,000)": 0.007480628495717182, "Examples-FuncNameTest-java": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[324, "java", "Is24XmlUtils.getContext", "```java\npublic synchronized static JAXBContext getContext() throws JAXBException {\n        if (JAXB == null) initContext(Thread.currentThread().getContextClassLoader());\n        return JAXB;\n    }\n```"], [480, "java", "LogServiceImpl.setLoggerLevel", "```java\npublic void setLoggerLevel(String loggerName, String level) throws ManagementConsoleException {\r\n\r\n    sleeConnection.getSleeManagementMBeanUtils().getLogManagementMBeanUtils().setLoggerLevel(loggerName, level);\r\n\r\n  }\n```"], [58, "java", "Observable.hide", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> hide() {\n        return RxJavaPlugins.onAssembly(new ObservableHide<T>(this));\n    }\n```"], [772, "java", "FileAppender.setFile", "```java\npublic void setFile(String file) {\n    if (file == null) {\n      fileName = null;\n    } else {\n      // Trim spaces from both ends. The users probably does not want\n      // trailing spaces in file names.\n      fileName = file.trim();\n    }\n  }\n```"], [492, "java", "Properties.inspectProperties", "```java\nprotected HashMap<String, PropertyDescriptor> inspectProperties() {\n\t\tboolean scanAccessible = classDescriptor.isScanAccessible();\n\t\tClass type = classDescriptor.getType();\n\n\t\tHashMap<String, PropertyDescriptor> map = new HashMap<>();\n\n\t\tMethod[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type);\n\n\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t// first find the getters, and then the setters!\n\t\t\tfor (Method method : methods) {\n\t\t\t\tif (Modifier.isStatic(method.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static methods\n\t\t\t\t}\n\n\t\t\t\tboolean add = false;\n\t\t\t\tboolean issetter = false;\n\n\t\t\t\tString propertyName;\n\n\t\t\t\tif (iteration == 0) {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertyGetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertySetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (add) {\n\t\t\t\t\tMethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true);\n\t\t\t\t\taddProperty(map, propertyName, methodDescriptor, issetter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classDescriptor.isIncludeFieldsAsProperties()) {\n\t\t\tFieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors();\n\t\t\tString[] prefix = classDescriptor.getPropertyFieldPrefix();\n\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldDescriptors) {\n\t\t\t\tField field = fieldDescriptor.getField();\n\n\t\t\t\tif (Modifier.isStatic(field.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static fields\n\t\t\t\t}\n\n\t\t\t\tString name = field.getName();\n\n\t\t\t\tif (prefix != null) {\n\t\t\t\t\tfor (String p : prefix) {\n\t\t\t\t\t\tif (!name.startsWith(p)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = name.substring(p.length());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!map.containsKey(name)) {\n\t\t\t\t\t// add missing field as a potential property\n\t\t\t\t\tmap.put(name, createPropertyDescriptor(name, fieldDescriptor));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn map;\n\t}\n```"], [826, "java", "ExceptionHelper.wrapOrThrow", "```java\npublic static RuntimeException wrapOrThrow(Throwable error) {\n        if (error instanceof Error) {\n            throw (Error)error;\n        }\n        if (error instanceof RuntimeException) {\n            return (RuntimeException)error;\n        }\n        return new RuntimeException(error);\n    }\n```"], [213, "java", "SegmentedByteArray.rangeEquals", "```java\npublic boolean rangeEquals(long rangeStart, SegmentedByteArray compareTo, long cmpStart, int length) {\n    \tfor(int i=0;i<length;i++)\n    \t\tif(get(rangeStart + i) != compareTo.get(cmpStart + i))\n    \t\t\treturn false;\n    \treturn true;\n    }\n```"], [226, "java", "Update.getVersion", "```java\npublic String getVersion() throws MalformedElementException {\n        Element version = getFirstChild(root, \"version\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingVersionElmt\"), version); //$NON-NLS-1$\n        String href = getChildText(version, \"href\", true); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingHrefElmt\"), href); //$NON-NLS-1$\n        return decodeHref(href);\n    }\n```"], [333, "java", "AbstractRequestMatcherRegistry.antMatchers", "```java\npublic C antMatchers(String... antPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure antMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.antMatchers(antPatterns));\n\t}\n```"], [636, "java", "AbstractRefreshMetricsListener.noFailRefreshEndMetricsReporting", "```java\nprivate final void noFailRefreshEndMetricsReporting(ConsumerRefreshMetrics refreshMetrics) {\n        try {\n            refreshEndMetricsReporting(refreshMetrics);\n        } catch (Exception e) {\n            // Metric reporting is not considered critical to consumer refresh. Log exceptions and continue.\n            log.log(Level.SEVERE, \"Encountered an exception in reporting consumer refresh metrics, ignoring exception and continuing with consumer refresh\", e);\n        }\n    }\n```"], [377, "java", "JtxTransaction.commitOrRollback", "```java\nprotected void commitOrRollback(boolean doCommit) {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (doCommit) {\n\t\t\t\tlog.debug(\"Commit JTX\");\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Rollback JTX\");\n\t\t\t}\n\t\t}\n\t\tboolean forcedRollback = false;\n\t\tif (!isNoTransaction()) {\n\t\t\tif (isRollbackOnly()) {\n\t\t\t\tif (doCommit) {\n\t\t\t\t\tdoCommit = false;\n\t\t\t\t\tforcedRollback = true;\n\t\t\t\t}\n\t\t\t} else if (!isActive()) {\n\t\t\t\tif (isCompleted()) {\n\t\t\t\t\tthrow new JtxException(\"TX is already completed, commit or rollback should be called once per TX\");\n\t\t\t\t}\n\t\t\t\tthrow new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\"));\n\t\t\t}\n\t\t}\n\t\tif (doCommit) {\n\t\t\tcommitAllResources();\n\t\t} else {\n\t\t\trollbackAllResources(forcedRollback);\n\t\t}\n\t}\n```"], [323, "java", "PrologParser.main", "```java\npublic static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }\n```"], [8, "java", "FileNameUtil.concat", "```java\npublic static String concat(final String basePath, final String fullFilenameToAdd) {\n\t\treturn doConcat(basePath, fullFilenameToAdd, SYSTEM_SEPARATOR);\n\t}\n```"], [295, "java", "UserClient.updateUser", "```java\npublic User updateUser(User userParam)\n    {\n        if(userParam != null && this.serviceTicket != null)\n        {\n            userParam.setServiceTicket(this.serviceTicket);\n        }\n\n        return new User(this.postJson(\n                userParam, WS.Path.User.Version1.userUpdate()));\n    }\n```"], [860, "java", "RollupService.setServerTime", "```java\npublic synchronized void setServerTime(long millis) {\n        log.info(\"Manually setting server time to {}  {}\", millis, new java.util.Date(millis));\n        context.setCurrentTimeMillis(millis);\n    }\n```"], [929, "java", "EmailFilter.or", "```java\nprotected void or(final SearchTerm searchTerm) {\n\t\tif (this.searchTerm == null) {\n\t\t\tthis.searchTerm = searchTerm;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchTerm = new OrTerm(this.searchTerm, searchTerm);\n\t}\n```"], [101, "java", "ReteGraph.addChild", "```java\npublic boolean addChild(BaseVertex vertex) {\n        if ( vertex != null && vertices.add( vertex ) ) {\n            firePropertyChange( PROP_CHILD_ADDED,\n                                null,\n                                vertex );\n            return true;\n        }\n        return false;\n    }\n```"], [152, "java", "JPANotificationRESTController.getNotifications", "```java\n@RequestMapping(method = RequestMethod.GET)\n    @ResponseBody\n    public List<EntryDTO> getNotifications(\n            @RequestParam(value = \"page\", required = false) Integer page,\n            @RequestParam(value = \"pageSize\", required = false) Integer pageSize) {\n\n        return restService.getNotifications(page, pageSize);\n    }\n```"], [718, "java", "Iterators.limit", "```java\npublic static <E> Iterator<E> limit(Iterator<? extends E> iterator,\n\t\tint limit)\n\t{\n\t\treturn new LimitIterator<E>(iterator, limit);\n\t}\n```"], [544, "java", "Base64.encodeToString", "```java\npublic static String encodeToString(String s) {\n        try {\n            return new String(encodeToChar(s.getBytes(ENCODING), false));\n        } catch (UnsupportedEncodingException ignore) {\n            return null;\n        }\n    }\n```"], [943, "java", "AreaGrid.calculateColumns", "```java\nprivate void calculateColumns()\n    {\n        //create the sorted list of points\n        GridPoint points[] = new GridPoint[areas.size() * 2];\n        int pi = 0;\n        for (Area area : areas)\n        {\n            points[pi] = new GridPoint(area.getX1(), area, true);\n            points[pi+1] = new GridPoint(area.getX2() + 1, area, false);\n            pi += 2;\n            //X2+1 ensures that the end of one box will be on the same point\n            //as the start of the following box\n        }\n        Arrays.sort(points);\n        \n        //calculate the number of columns\n        int cnt = 0;\n        int last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n            if (!theSame(points[i].value, last))\n            { \n                last = points[i].value;\n                cnt++;\n            }\n        if (!theSame(last, abspos.getX2()))\n        \tcnt++; //last column finishes the whole area\n        width = cnt;\n        \n        //calculate the column widths and the layout\n        maxindent = 0;\n        minindent = -1;\n        cols = new int[width];\n        cnt = 0;\n        last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n        {\n            if (!theSame(points[i].value, last)) \n            {\n                cols[cnt] = points[i].value - last;\n                last = points[i].value;\n                cnt++;\n            }\n            if (points[i].begin)\n            {\n                target.getPosition(points[i].area).setX1(cnt);\n                maxindent = cnt;\n                if (minindent == -1) minindent = maxindent;\n                //points[i].node.getArea().setX1(parent.getArea().getX1() + getColOfs(cnt));\n            }\n            else\n            {\n                Rectangular pos = target.getPosition(points[i].area); \n                pos.setX2(cnt-1);\n                if (pos.getX2() < pos.getX1())\n                    pos.setX2(pos.getX1());\n                //points[i].node.getArea().setX2(parent.getArea().getX1() + getColOfs(pos.getX2()+1));\n            }\n        }\n        if (!theSame(last, abspos.getX2()))\n        \tcols[cnt] = abspos.getX2() - last;\n        if (minindent == -1)\n            minindent = 0;\n    }\n```"], [700, "java", "JdbcHelper.initialize", "```java\nprivate static void initialize() {\n\t\tString driver = ConfigHelper.getProperty(\"jdbc.driver\");\n\t\tString url = ConfigHelper.getProperty(\"jdbc.url\");\n\t\tString username = ConfigHelper.getProperty(\"jdbc.username\");\n\t\tString password = ConfigHelper.getProperty(\"jdbc.password\");\n\t\tint maxActive = ConfigHelper.getNumerProperty(\"jdbc.max.active\");\n\t\tint maxIdle = ConfigHelper.getNumerProperty(\"jdbc.max.idle\");\n\t\tAssertHelper.notNull(driver);\n\t\tAssertHelper.notNull(url);\n\t\tAssertHelper.notNull(username);\n\t\tAssertHelper.notNull(password);\n\t\t//\u521d\u59cb\u5316DBCP\u6570\u636e\u6e90\n\t\tBasicDataSource ds = new BasicDataSource();\n\t\tds.setDriverClassName(driver);\n\t\tds.setUrl(url);\n\t\tds.setUsername(username);\n\t\tds.setPassword(password);\n        if(maxActive != 0) {\n\t\t    ds.setMaxActive(maxActive);\n        }\n        if(maxIdle != 0) {\n\t\t    ds.setMaxIdle(maxIdle);\n        }\n\t\tdataSource = ds;\n\t}\n```"], [699, "java", "PasswordLoginModule.abort", "```java\n@Override\n    // Check is broken [LOG.info()]: PMD reports issues although log stmt is guarded. @todo revisit when upgrading PMD.\n    @SuppressWarnings(\"PMD.GuardLogStatementJavaUtil\")\n    public final boolean abort()\n            throws LoginException {\n\n        if (pendingSubject == null) {\n            // the login method of this module has failed earlier, hence we do not need to clean up anything\n            // return 'false' to indicate that this module's login and/or commit method failed\n            // As the login method failed, the state of the module has already been cleared and we do not know\n            // the username / domain anymore. Hence no auditing / message queue notification, and not verbose logging.\n\n            LOG.debug(\"Aborting authentication, as the authentication has failed earlier (login method)\");\n\n            return false;\n        } else if (committedSubject == null) {\n            // the login method of this module succeeded, but the overall authentication failed\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Aborting authentication: '\" + username + \"@\" + domain + \"'\");\n            }\n\n            // cache the username and domain, for they will be purged by \"cleanState()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            cleanState();\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(tempUsername).\n                    append(\"@\").\n                    append(tempDomain).\n                    toString();\n            AuditHelper.auditEvent(audit, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        } else {\n            // overall authentication succeeded and commit succeeded, but someone else's commit failed\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(username).\n                    append(\"@\").\n                    append(domain).\n                    toString();\n            AuditHelper.auditEvent(audit, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // cache the username and domain, for they will be purged by \"logout()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            logout();\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        }\n    }\n```"], [507, "java", "Parser.parseOptionalBody", "```java\nprivate void parseOptionalBody( Node parent, String tag, String bodyType ) \n        throws JasperException \n    {\n\tif (reader.matches(\"/>\")) {\n\t    // EmptyBody\n\t    return;\n\t}\n\n\tif (!reader.matches(\">\")) {\n\t    err.jspError(reader.mark(), \"jsp.error.unterminated\",\n\t\t\t \"&lt;\" + tag );\n\t}\n        \n        if( reader.matchesETag( tag ) ) {\n            // EmptyBody\n            return;\n        }\n        \n        if( !parseJspAttributeAndBody( parent, tag, bodyType ) ) {\n            // Must be ( '>' # Body ETag )\n            parseBody(parent, tag, bodyType );\n        }\n    }\n```"], [120, "java", "Completable.doOnComplete", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable doOnComplete(Action onComplete) {\n        return doOnLifecycle(Functions.emptyConsumer(), Functions.emptyConsumer(),\n                onComplete, Functions.EMPTY_ACTION,\n                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);\n    }\n```"], [746, "java", "Strings.trimLeadingCharacter", "```java\npublic static String trimLeadingCharacter(String str, final char leadingCharacter)\n   {\n      return trimLeadingCharacter(str, new CharacterChecker()\n      {\n         public boolean isCharacterLegal(char character)\n         {\n            return character == leadingCharacter;\n         }\n      });\n   }\n```"], [237, "java", "ProxettaAsmUtil.resolveJavaVersion", "```java\npublic static int resolveJavaVersion(final int version) {\n\t\tfinal int javaVersionNumber = SystemUtil.info().getJavaVersionNumber();\n\t\tfinal int platformVersion = javaVersionNumber - 8 + 52;\n\n\t\treturn version > platformVersion ? version : platformVersion;\n\t}\n```"], [263, "java", "OpenRtbJsonUtils.startArray", "```java\npublic static void startArray(JsonParser par) throws IOException {\n    JsonToken token = par.getCurrentToken();\n    if (token == null || token == JsonToken.FIELD_NAME) {\n      token = par.nextToken();\n    }\n    if (token == JsonToken.START_ARRAY) {\n      par.nextToken();\n    } else {\n      throw new JsonParseException(par, \"Expected start of array\");\n    }\n  }\n```"], [722, "java", "Observable.take", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler) {\n        return takeUntil(timer(time, unit, scheduler));\n    }\n```"], [965, "java", "AbstractEndpoint.executeAndHandle", "```java\nprotected HttpResponse executeAndHandle(Request request)\n            throws IOException, IllegalArgumentException, IllegalAccessException, FileNotFoundException, IllegalStateException {\n        HttpResponse response = execute(request);\n        handleResponse(response, request);\n        return response;\n    }\n```"], [555, "java", "PipelineConfigurationUpgrader.upgradeIfNecessary", "```java\npublic PipelineConfiguration upgradeIfNecessary(\n      StageLibraryTask library,\n      PipelineConfiguration pipelineConf,\n      List<Issue> issues\n  ) {\n    Preconditions.checkArgument(issues.isEmpty(), \"Given list of issues must be empty.\");\n    boolean upgrade;\n\n    // Firstly upgrading schema if needed, then data\n    upgrade = needsSchemaUpgrade(pipelineConf, issues);\n    if(upgrade && issues.isEmpty()) {\n      pipelineConf = upgradeSchema(library, pipelineConf, issues);\n    }\n\n    // Something went wrong with the schema upgrade\n    if(!issues.isEmpty()) {\n      return null;\n    }\n\n    // Upgrading data if needed\n    upgrade = needsUpgrade(library, pipelineConf, issues);\n    if (upgrade && issues.isEmpty()) {\n      //we try to upgrade only if we have all defs for the pipelineConf\n      pipelineConf = upgrade(library, pipelineConf, issues);\n    }\n    return (issues.isEmpty()) ? pipelineConf : null;\n  }\n```"], [733, "java", "TimerServiceImpl.getWaitingOnTxCompletionTimers", "```java\nprivate Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }\n```"], [441, "java", "RequestHandler.mainRequestHandler", "```java\n@ServiceMethod\n    public void mainRequestHandler(DataStoreRequest dataStoreRequest) {\n\n\n        if (verbose || debug) {\n            logger.info(\"RequestHandler::mainRequestHandler\", dataStoreRequest);\n        }\n        switch (dataStoreRequest.action()) {\n            case GET:\n                masterDataStore.get((GetRequest) dataStoreRequest);\n                break;\n            case GET_LOCAL_DB:\n                handleGetLocalDbVerb(dataStoreRequest);\n                break;\n            case GET_MEM:\n                handleGetMemVerb(dataStoreRequest);\n                break;\n            case SET:\n                masterDataStore.set((SetRequest) dataStoreRequest);\n                break;\n            case SET_BROADCAST:\n                handleSetAndBroadCastVerb(dataStoreRequest);\n                break;\n            case SET_IF_NOT_EXIST:\n                handleSetIfNotExistsVerb(dataStoreRequest);\n                break;\n            case SET_BATCH:\n                handleSetBatch(dataStoreRequest);\n                break;\n            case SET_BATCH_IF_NOT_EXISTS:\n                handleSetBatchIfNotExists(dataStoreRequest);\n                break;\n            case SET_SOURCE:\n                handleSetSource(dataStoreRequest);\n                break;\n            case GET_SOURCE:\n                handleGetSource(dataStoreRequest);\n                break;\n\n            case BATCH_READ:\n                handleBatchRead(dataStoreRequest);\n                break;\n\n            case CLEAR_STATS:\n                handleClearStats(dataStoreRequest);\n                break;\n\n\n            case GET_STATS:\n                handleGetStats(dataStoreRequest);\n                break;\n\n\n            case REMOVE:\n                handleRemove(dataStoreRequest);\n                break;\n\n\n            case REMOVE_SOURCE:\n                handleRemoveSource(dataStoreRequest);\n                break;\n\n            case METHOD_CALL:\n                handleMethodCall((MethodCall) dataStoreRequest);\n                break;\n\n            case SEARCH:\n                handleSearchVerb(dataStoreRequest);\n                break;\n\n            default:\n                puts(dataStoreRequest);\n\n\n        }\n        trackCall(dataStoreRequest.action());\n    }\n```"], [374, "java", "AvroTypeUtil.getAvroSchemaFromHeader", "```java\npublic static String getAvroSchemaFromHeader(Record record, String headerName) throws DataGeneratorException {\n    String jsonSchema = record.getHeader().getAttribute(headerName);\n    if(jsonSchema == null || jsonSchema.isEmpty()) {\n      throw new DataGeneratorException(Errors.AVRO_GENERATOR_03, record.getHeader().getSourceId());\n    }\n    return jsonSchema;\n  }\n```"], [735, "java", "InterfaceRepository.addInterface", "```java\nprivate InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }\n```"], [825, "java", "StdRandom.uniform", "```java\npublic static int uniform(int a, int b)\n  {\n    if (b <= a)\n      throw new IllegalArgumentException(\"Invalid range\");\n    if ((long) b - a >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"Invalid range\");\n    return a + uniform(b - a);\n  }\n```"], [794, "java", "DapController.init", "```java\npublic void init()\n            throws ServletException\n    {\n        org.slf4j.Logger logServerStartup = org.slf4j.LoggerFactory.getLogger(\"serverStartup\");\n        logServerStartup.info(getClass().getName() + \" initialization start\");\n        try {\n            System.setProperty(\"file.encoding\", \"UTF-8\");\n            Field charset = Charset.class.getDeclaredField(\"defaultCharset\");\n            charset.setAccessible(true);\n            charset.set(null, null);\n            initialize();\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n```"], [501, "java", "OfflineClient.getIndex", "```java\n@Override\n    public @NonNull MirroredIndex getIndex(@NonNull String indexName) {\n        MirroredIndex index = null;\n        WeakReference<Object> existingIndex = indices.get(indexName);\n        if (existingIndex != null) {\n            index = (MirroredIndex)existingIndex.get();\n        }\n        if (index == null) {\n            index = new MirroredIndex(this, indexName);\n            indices.put(indexName, new WeakReference<Object>(index));\n        }\n        return index;\n    }\n```"], [746, "java", "TdsRequestedDataset.getGridDataset", "```java\npublic static GridDataset getGridDataset(HttpServletRequest request, HttpServletResponse response, String path) throws IOException {\n    TdsRequestedDataset trd = new TdsRequestedDataset(request, null);\n    if (path != null) trd.path = path;\n    return trd.openAsGridDataset(request, response);\n  }\n```"], [809, "java", "Types.isBuiltinType", "```java\npublic static boolean isBuiltinType(Type type) {\n\t\tClass<?> rawType = getRawType(type);\n\t\treturn (rawType == null) ? false : builtins.contains(rawType);\n\t}\n```"], [52, "java", "SimpleRuleStore.addRule", "```java\npublic void addRule(ElementSelector elementSelector, Action action) {\n    action.setContext(context);\n\n    List<Action> a4p = rules.get(elementSelector);\n\n    if (a4p == null) {\n      a4p = new ArrayList<Action>();\n      rules.put(elementSelector, a4p);\n    }\n\n    a4p.add(action);\n  }\n```"], [935, "java", "RpcResponseResolver.toResponseObject", "```java\nprivate static Object toResponseObject(ResponseCommand responseCommand) throws CodecException {\n        RpcResponseCommand response = (RpcResponseCommand) responseCommand;\n        response.deserialize();\n        return response.getResponseObject();\n    }\n```"], [126, "java", "OClosableLinkedContainer.checkOpenFilesLimit", "```java\nprivate void checkOpenFilesLimit() throws InterruptedException {\n    CountDownLatch ol = openLatch.get();\n    if (ol != null)\n      ol.await();\n\n    while (openFiles.get() > openLimit) {\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      //make other threads to wait till we evict entries and close evicted open files\n      if (openLatch.compareAndSet(null, latch)) {\n        while (openFiles.get() > openLimit) {\n          emptyBuffers();\n        }\n\n        latch.countDown();\n        openLatch.set(null);\n      } else {\n        ol = openLatch.get();\n\n        if (ol != null)\n          ol.await();\n      }\n    }\n  }\n```"], [975, "java", "GuiceApplicationBuilder.load", "```java\npublic GuiceApplicationBuilder load(GuiceableModule... modules) {\n    return newBuilder(delegate.load(Scala.varargs(modules)));\n  }\n```"], [643, "java", "ProfileEntityArrayAttributeValue.setByte", "```java\npublic void setByte(Byte attrValue) {\n\t\tif (attrValue != null) {\n\t\t\tsetString(attrValue.toString());\n\t\t}\n\t\telse {\n\t\t\tsetString(null);\n\t\t}\n\t}\n```"], [230, "java", "StreamUtil.outputStreamWriterOf", "```java\npublic static OutputStreamWriter outputStreamWriterOf(final OutputStream output, final String encoding) throws UnsupportedEncodingException {\n\t\treturn new OutputStreamWriter(output, encoding);\n\t}\n```"], [736, "java", "BufrTableBViewer.writeDiff", "```java\nprivate void writeDiff(TableB wmo, TableB t, Formatter out) {\r\n    out.format(\"#%n# BUFR diff written from %s against %s %n#%n\", t.getName(), wmo.getName());\r\n    out.format(\"Class,FXY,enElementName,BUFR_Unit,BUFR_Scale,BUFR_ReferenceValue,BUFR_DataWidth_Bits%n\");\r\n    List<TableB.Descriptor> listDesc = new ArrayList<>(t.getDescriptors());\r\n    Collections.sort(listDesc);\r\n    for (TableB.Descriptor d1 : listDesc) {\r\n      TableB.Descriptor d2 = wmo.getDescriptor(d1.getId());\r\n      if ((d2 == null) || (d1.getScale() != d2.getScale()) || (d1.getRefVal() != d2.getRefVal()) || (d1.getDataWidth() != d2.getDataWidth())) {\r\n        short fxy = d1.getId();\r\n//        int f = (fxy & 0xC000) >> 14;\r\n        int x  = (fxy & 0x3F00) >> 8;\r\n        int y  = fxy & 0xFF;\r\n        out.format(\"%d,%2d%03d,\\\"%s\\\",%s,%d,%d,%d%n\",x,x,y, d1.getName(), d1.getUnits(), d1.getScale(), d1.getRefVal(), d1.getDataWidth());\r\n      }\r\n    }\r\n    out.flush();\r\n  }\n```"], [954, "java", "OpenRtbUtils.bids", "```java\npublic static Iterable<Bid.Builder> bids(BidResponse.Builder response) {\n    return new ResponseBidsIterator(response, SEAT_ANY, null);\n  }\n```"], [920, "java", "Flowable.blockingSubscribe", "```java\n@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final void blockingSubscribe(Consumer<? super T> onNext) {\n        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);\n    }\n```"], [666, "java", "Completable.repeatUntil", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable repeatUntil(BooleanSupplier stop) {\n        return fromPublisher(toFlowable().repeatUntil(stop));\n    }\n```"]]}, "FuncNameTest-java MRR (bs=1,000)": 0.007485100160514516, "Examples-Validation-java": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[846, "java", "FareAttribute.setStatementParameters", "```java\n@Override\n    public void setStatementParameters(PreparedStatement statement, boolean setDefaultId) throws SQLException {\n        int oneBasedIndex = 1;\n        if (!setDefaultId) statement.setInt(oneBasedIndex++, id);\n        statement.setString(oneBasedIndex++, fare_id);\n        statement.setDouble(oneBasedIndex++, price);\n        statement.setString(oneBasedIndex++, currency_type);\n        setIntParameter(statement, oneBasedIndex++, payment_method);\n        // FIXME Entity.INT_MISSING causing out of range error on small int\n        setIntParameter(statement, oneBasedIndex++, transfers);\n        statement.setString(oneBasedIndex++, agency_id);\n        setIntParameter(statement, oneBasedIndex++, transfer_duration);\n    }\n```"], [924, "java", "Xmls.children", "```java\npublic static List<Element> children(Element ele, String regex) {\n        final List<Element> list = new ArrayList<Element>(ele.getChildNodes().getLength());\n        eachChildren(ele, regex, new Each<Element>() {\n            public void invoke(int index, Element cld, int length) {\n                list.add(cld);\n            }\n        });\n        return list;\n    }\n```"], [277, "java", "SelectSelectivePlugin.initialized", "```java\n@Override\n    public void initialized(IntrospectedTable introspectedTable) {\n        super.initialized(introspectedTable);\n\n        // bug:26,27\n        this.selectByExampleSelectiveEle = null;\n        this.selectByPrimaryKeySelectiveEle = null;\n    }\n```"], [201, "java", "AbstractSpeedModelManager.consumeKeyMessage", "```java\npublic void consumeKeyMessage(String key, U message, Configuration hadoopConf) throws IOException {\n    log.info(\"{} : {}\", key, message);\n  }\n```"], [449, "java", "SocializeShareUtils.shareViaSocialNetworks", "```java\n@Override\n\tpublic void shareViaSocialNetworks(Activity context, final Entity entity, final ShareOptions shareOptions, final SocialNetworkShareListener listener, final SocialNetwork...networks) {\n\t\t\n\t\tfinal SocializeSession session = getSocialize().getSession();\n\t\t\n\t\tif(isDisplayAuthDialog(context, session, shareOptions, networks)) {\n\t\t\t\n\t\t\tauthDialogFactory.show(context, new AuthDialogListener() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onShow(Dialog dialog, AuthPanelView dialogView) {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onCancel(Dialog dialog) {\n\t\t\t\t\tif(listener != null) {\n\t\t\t\t\t\tlistener.onCancel();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onSkipAuth(Activity context, Dialog dialog) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdoShare(context, entity, listener, shareOptions, networks);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onError(Activity context, Dialog dialog, Exception error) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tif(listener != null) {\n\t\t\t\t\t\tlistener.onError(SocializeException.wrap(error));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onAuthenticate(Activity context, Dialog dialog, SocialNetwork network) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdoShare(context, entity, listener, shareOptions, network);\n\t\t\t\t}\n\t\t\t}, !config.isAllowSkipAuthOnAllActions());\n\t\t}\n\t\telse {\n\t\t\tdoShare(context, entity, listener, shareOptions, networks);\n\t\t}\t\t\t\n\t}\n```"], [56, "java", "AbstractAuthenticationFilter.doFilter", "```java\n@Override\n    protected void doFilter(final HttpServletRequest _request,\n                            final HttpServletResponse _response,\n                            final FilterChain _chain)\n        throws IOException, ServletException\n    {\n        if (isLoggedIn(_request)) {\n            _chain.doFilter(_request, _response);\n        } else {\n            doAuthenticate(_request, _response, _chain);\n        }\n    }\n```"], [563, "java", "PrettyConfig.getMappingById", "```java\npublic UrlMapping getMappingById(String id)\n   {\n      if (id != null)\n      {\n         if (id.startsWith(PrettyContext.PRETTY_PREFIX))\n         {\n            id = id.substring(PrettyContext.PRETTY_PREFIX.length());\n         }\n         for (UrlMapping mapping : getMappings())\n         {\n            if (mapping.getId().equals(id))\n            {\n               return mapping;\n            }\n         }\n      }\n      return null;\n   }\n```"], [71, "java", "ExecutionEngine.fireErrorReceivingResponseEvent", "```java\nprivate static void fireErrorReceivingResponseEvent(OperationContext opContext, HttpURLConnection request,\n            RequestResult result) {\n        if (opContext.getErrorReceivingResponseEventHandler().hasListeners()\n                || OperationContext.getGlobalErrorReceivingResponseEventHandler().hasListeners()) {\n            ErrorReceivingResponseEvent event = new ErrorReceivingResponseEvent(opContext, request, result);\n            opContext.getErrorReceivingResponseEventHandler().fireEvent(event);\n            OperationContext.getGlobalErrorReceivingResponseEventHandler().fireEvent(event);\n        }\n    }\n```"], [999, "java", "ThrowableAssert.overridingErrorMessage", "```java\n@Override\n  public @NotNull ThrowableAssert overridingErrorMessage(@Nullable String message) {\n    objectAssert.overridingErrorMessage(message);\n    return super.overridingErrorMessage(message);\n  }\n```"], [523, "java", "ShadowLauncherApps.addDynamicShortcut", "```java\npublic void addDynamicShortcut(ShortcutInfo shortcutInfo) {\n    shortcuts.add(shortcutInfo);\n    shortcutsChanged(shortcutInfo.getPackage(), Lists.newArrayList(shortcutInfo));\n  }\n```"], [961, "java", "AbstractFuture.get", "```java\n@CanIgnoreReturnValue\n  @Override\n  public V get(long timeout, TimeUnit unit)\n      throws InterruptedException, TimeoutException, ExecutionException {\n    // NOTE: if timeout < 0, remainingNanos will be < 0 and we will fall into the while(true) loop\n    // at the bottom and throw a timeoutexception.\n    final long timeoutNanos = unit.toNanos(timeout); // we rely on the implicit null check on unit.\n    long remainingNanos = timeoutNanos;\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n    Object localValue = value;\n    if (localValue != null & !(localValue instanceof SetFuture)) {\n      return getDoneValue(localValue);\n    }\n    // we delay calling nanoTime until we know we will need to either park or spin\n    final long endNanos = remainingNanos > 0 ? System.nanoTime() + remainingNanos : 0;\n    long_wait_loop:\n    if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n      Waiter oldHead = waiters;\n      if (oldHead != Waiter.TOMBSTONE) {\n        Waiter node = new Waiter();\n        do {\n          node.setNext(oldHead);\n          if (ATOMIC_HELPER.casWaiters(this, oldHead, node)) {\n            while (true) {\n              LockSupport.parkNanos(this, remainingNanos);\n              // Check interruption first, if we woke up due to interruption we need to honor that.\n              if (Thread.interrupted()) {\n                removeWaiter(node);\n                throw new InterruptedException();\n              }\n\n              // Otherwise re-read and check doneness. If we loop then it must have been a spurious\n              // wakeup\n              localValue = value;\n              if (localValue != null & !(localValue instanceof SetFuture)) {\n                return getDoneValue(localValue);\n              }\n\n              // timed out?\n              remainingNanos = endNanos - System.nanoTime();\n              if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n                // Remove the waiter, one way or another we are done parking this thread.\n                removeWaiter(node);\n                break long_wait_loop; // jump down to the busy wait loop\n              }\n            }\n          }\n          oldHead = waiters; // re-read and loop.\n        } while (oldHead != Waiter.TOMBSTONE);\n      }\n      // re-read value, if we get here then we must have observed a TOMBSTONE while trying to add a\n      // waiter.\n      return getDoneValue(value);\n    }\n    // If we get here then we have remainingNanos < SPIN_THRESHOLD_NANOS and there is no node on the\n    // waiters list\n    while (remainingNanos > 0) {\n      localValue = value;\n      if (localValue != null & !(localValue instanceof SetFuture)) {\n        return getDoneValue(localValue);\n      }\n      if (Thread.interrupted()) {\n        throw new InterruptedException();\n      }\n      remainingNanos = endNanos - System.nanoTime();\n    }\n\n    String futureToString = toString();\n    final String unitString = unit.toString().toLowerCase(Locale.ROOT);\n    String message = \"Waited \" + timeout + \" \" + unit.toString().toLowerCase(Locale.ROOT);\n    // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise\n    if (remainingNanos + SPIN_THRESHOLD_NANOS < 0) {\n      // We over-waited for our timeout.\n      message += \" (plus \";\n      long overWaitNanos = -remainingNanos;\n      long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);\n      long overWaitLeftoverNanos = overWaitNanos - unit.toNanos(overWaitUnits);\n      boolean shouldShowExtraNanos =\n          overWaitUnits == 0 || overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS;\n      if (overWaitUnits > 0) {\n        message += overWaitUnits + \" \" + unitString;\n        if (shouldShowExtraNanos) {\n          message += \",\";\n        }\n        message += \" \";\n      }\n      if (shouldShowExtraNanos) {\n        message += overWaitLeftoverNanos + \" nanoseconds \";\n      }\n\n      message += \"delay)\";\n    }\n    // It's confusing to see a completed future in a timeout message; if isDone() returns false,\n    // then we know it must have given a pending toString value earlier. If not, then the future\n    // completed after the timeout expired, and the message might be success.\n    if (isDone()) {\n      throw new TimeoutException(message + \" but future completed as timeout expired\");\n    }\n    throw new TimeoutException(message + \" for \" + futureToString);\n  }\n```"], [183, "java", "Duration.minus", "```java\npublic Duration minus(long amount) {\n        return new Minus().apply(this, unit == null ? FOREVER : new Duration(amount, unit));\n    }\n```"], [19, "java", "PropertyWrapper.removeAllCallbacks", "```java\n@Override\n    public void removeAllCallbacks() {\n        final Set<Runnable> callbacksToRemove = new HashSet<Runnable>(callbacks);\n        for (Runnable callback : callbacksToRemove) {\n            prop.removeCallback(callback);\n        }\n        callbacks.removeAll(callbacksToRemove);\n    }\n```"], [904, "java", "NowAndTodayUtil.parseNow", "```java\nprivate static void parseNow(String value, String lowerValue, Calendar c) throws DateParseException {\n        if (lowerValue.length() > NOW_LENGTH) {\n            Matcher matcher = NOW_OFFSET_PATTERN.matcher(lowerValue);\n            if (!matcher.find()) {\n                throw new DateParseException(\"Improper value in 'NOW' value: \" + value\n                        + \". 'NOW' must be followed by + or -, then numeric offset, then units (h{our{s}}, \"\n                        + \"m{inute{s}}, d{ay{s}}, or y{ears}\");\n            }\n            if (matcher.groupCount() != 4) {\n                throw new DateParseException(\"Improper value in 'NOW' value: \" + value + \". Pattern match returned \"\n                        + matcher.groupCount() + \" instead of 4\");\n            }\n            char sign = matcher.group(2).charAt(0);\n            if (sign != '+' && sign != '-') {\n                throw new DateParseException(\"Improper sign in 'NOW' value '\" + lowerValue + \"'\");\n            }\n            String offsetStr = matcher.group(3);\n            int offset;\n            try {\n                offset = Integer.parseInt(offsetStr);\n            } catch (NumberFormatException e) {\n                throw new DateParseException(\"Improper offset in 'NOW' value '\" + value + \"'\");\n            }\n            if (sign == '-') {\n                offset = -offset;\n            }\n            int calendarField;\n            String units = matcher.group(4);\n            if (\"years\".startsWith(units)) {\n                calendarField = Calendar.YEAR;\n            } else if (\"days\".startsWith(units)) {\n                calendarField = Calendar.DATE;\n            } else if (\"hours\".startsWith(units)) {\n                calendarField = Calendar.HOUR;\n            } else if (\"minutes\".startsWith(units)) {\n                calendarField = Calendar.MINUTE;\n            } else {\n                throw new DateParseException(\"Improper units in 'NOW' value: '\" + units + \"', must be y{ear{s}}, \"\n                        + \"d{ay{s}}, h{our{s}}, or m{inute{s}}\");\n            }\n            c.add(calendarField, offset);\n        }\n    }\n```"], [824, "java", "SVGGraphics2D.getSVGFontStyle", "```java\nprivate String getSVGFontStyle() {\n        StringBuilder b = new StringBuilder();\n        b.append(\"fill: \").append(svgColorStr()).append(\"; \");\n        b.append(\"fill-opacity: \").append(getColorAlpha() * getAlpha())\n                .append(\"; \");\n        String fontFamily = this.fontMapper.mapFont(this.font.getFamily());\n        b.append(\"font-family: \").append(fontFamily).append(\"; \");\n        b.append(\"font-size: \").append(this.font.getSize()).append(this.fontSizeUnits).append(\";\");\n        if (this.font.isBold()) {\n            b.append(\" font-weight: bold;\");\n        }\n        if (this.font.isItalic()) {\n            b.append(\" font-style: italic;\");\n        }\n        return b.toString();\n    }\n```"], [741, "java", "LogglyClient.log", "```java\npublic boolean log(String message) {\n        if (message == null) return false;\n\n        boolean ok;\n        try {\n            ok = loggly.log(token, tags, message).isExecuted();\n        } catch (Exception e) {\n            e.printStackTrace();\n            ok = false;\n        }\n        return ok;\n    }\n```"], [372, "java", "CheckUtilities.checkStringListArgument", "```java\npublic static void checkStringListArgument(List<String> str, String variableName) {\n    if (null == str) {\n      throw new NullPointerException(ExceptionMessageMap.getMessage(\"000002\")\n          + \"  { variableName=[\" + variableName + \"] }\");\n    }\n    if (str.size() == 0) {\n      throw new IllegalArgumentException(ExceptionMessageMap.getMessage(\"000002\")\n          + \"  { variableName=[\" + variableName + \"] }\");\n    }\n    for (int i = 0; i < str.size(); i++) {\n      checkStringArgument(str.get(i), variableName);\n    }\n  }\n```"], [368, "java", "BorderWidth.isValid", "```java\npublic static boolean isValid(final String cssValue) {\n        final String trimmedCssValue = StringUtil.strip(cssValue).toLowerCase();\n        final String[] cssValueParts = StringUtil.splitBySpace(trimmedCssValue);\n        if (cssValueParts.length > 4) {\n            return false;\n        }\n        for (final String cssValuePart : cssValueParts) {\n            boolean invalidValue = true;\n            for (final CssLengthUnit cssLengthUnit : CssLengthUnit.values()) {\n                final String unit = cssLengthUnit.getUnit();\n                if (cssValuePart.endsWith(unit)) {\n                    final String valueOnly = cssValuePart.replaceFirst(unit,\n                            \"\");\n                    try {\n                        Float.parseFloat(valueOnly);\n                    } catch (final NumberFormatException e) {\n                        break;\n                    }\n                    invalidValue = false;\n                    break;\n                }\n            }\n            if (PREDEFINED_CONSTANTS.contains(cssValuePart)) {\n                invalidValue = false;\n            }\n            if (invalidValue) {\n                return false;\n            }\n        }\n        return true;\n    }\n```"], [996, "java", "ZKClientImpl.getChildren", "```java\n@Override\n  public WatchableTask<List<String>> getChildren(String path) {\n    return new WatchableTask<List<String>>(\"zkGetChildren: \" + path) {\n      @Override\n      protected Promise run(Context context) throws Throwable {\n        SettablePromise<List<String>> promise = Promises.settable();\n        _zkClient.getChildren(path, _watcher, (int rc, String p, Object ctx, List<String> children) -> {\n          KeeperException.Code code = KeeperException.Code.get(rc);\n          switch (code) {\n            case OK:\n              promise.done(children);\n              break;\n            default:\n              promise.fail(KeeperException.create(code, p));\n          }\n        }, null);\n        return promise;\n      }\n    };\n  }\n```"], [908, "java", "Trans.getConnectionAuto", "```java\npublic static Connection getConnectionAuto(DataSource ds) throws SQLException {\n        if (get() == null)\n            return ds.getConnection();\n        else\n            return get().getConnection(ds);\n    }\n```"], [695, "java", "ShadowUsageStatsManager.getAppStandbyBucket", "```java\n@Implementation(minSdk = Build.VERSION_CODES.P)\n  @HiddenApi\n  public @StandbyBuckets int getAppStandbyBucket(String packageName) {\n    Integer bucket = appStandbyBuckets.get(packageName);\n    return (bucket == null) ? UsageStatsManager.STANDBY_BUCKET_ACTIVE : bucket;\n  }\n```"], [826, "java", "BaseActions.push", "```java\npublic boolean push(final int down, final V value)\n    {\n        check();\n        context.getValueStack().push(down, value);\n        return true;\n    }\n```"], [531, "java", "ConditionFactory.untilCall", "```java\npublic <T> T untilCall(T proxyMethodReturnValue, final Matcher<? super T> matcher) {\n        if (!existInCP(\"java.util.ServiceLoader\")) {\n            throw new UnsupportedOperationException(\"java.util.ServiceLoader not found in classpath so cannot create condition\");\n        }\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        if (cl == null) {\n            cl = ClassLoader.getSystemClassLoader();\n        }\n        Iterator<ProxyConditionFactory> iterator = java.util.ServiceLoader.load(ProxyConditionFactory.class, cl).iterator();\n        if (!iterator.hasNext()) {\n            throw new UnsupportedOperationException(\"There's currently no plugin installed that can handle proxy conditions, please consider adding 'awaitility-proxy' to the classpath. If using Maven you can do:\" +\n                    \"<dependency>\\n\" +\n                    \"\\t<groupId>org.awaitility</groupId>\\n\" +\n                    \"\\t<artifactId>awaitility-proxy</artifactId>\\n\" +\n                    \"\\t<version>${awaitility.version}</version>\\n\" +\n                    \"</dependency>\\n\");\n        }\n        @SuppressWarnings(\"unchecked\") ProxyConditionFactory<T> factory = iterator.next();\n        if (factory == null) {\n            throw new IllegalArgumentException(\"Internal error: Proxy condition plugin initialization returned null, please report an issue.\");\n        }\n        return until(factory.createProxyCondition(proxyMethodReturnValue, matcher, generateConditionSettings()));\n    }\n```"], [662, "java", "MentionsEditText.onTouchEvent", "```java\n@Override\n    public boolean onTouchEvent(@NonNull MotionEvent event) {\n        final MentionSpan touchedSpan = getTouchedSpan(event);\n\n        // Android 6 occasionally throws a NullPointerException inside Editor.onTouchEvent()\n        // for ACTION_UP when attempting to display (uninitialised) text handles.\n        boolean superResult;\n        if (android.os.Build.VERSION.SDK_INT == Build.VERSION_CODES.M &&\n            event.getActionMasked() == MotionEvent.ACTION_UP) {\n            try {\n                superResult = super.onTouchEvent(event);\n            } catch (NullPointerException ignored) {\n                // Ignore this (see above) - since we're now in an unknown state let's clear all\n                // selection (which is still better than an arbitrary crash that we can't control):\n                clearFocus();\n                superResult = true;\n            }\n        } else {\n            superResult = super.onTouchEvent(event);\n        }\n\n        if (event.getAction() == MotionEvent.ACTION_UP) {\n            // Don't call the onclick on mention if MotionEvent.ACTION_UP is for long click action,\n            if (!isLongPressed && touchedSpan != null) {\n                // Manually click span and show soft keyboard\n                touchedSpan.onClick(this);\n                Context context = getContext();\n                if (context != null) {\n                    InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n                    imm.showSoftInput(this, 0);\n                }\n                return true;\n            }\n        } else if (event.getAction() == MotionEvent.ACTION_DOWN) {\n            isLongPressed = false;\n            if (isLongClickable() && touchedSpan != null) {\n                if (longClickRunnable == null) {\n                    longClickRunnable = new CheckLongClickRunnable();\n                }\n                longClickRunnable.touchedSpan = touchedSpan;\n                removeCallbacks(longClickRunnable);\n                postDelayed(longClickRunnable, ViewConfiguration.getLongPressTimeout());\n            }\n        } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {\n            isLongPressed = false;\n        }\n\n        // Check if user clicked on the EditText while showing the suggestions list\n        // If so, avoid the current prefix\n        if (mAvoidPrefixOnTap\n                && mSuggestionsVisibilityManager != null\n                && mSuggestionsVisibilityManager.isDisplayingSuggestions()) {\n            mSuggestionsVisibilityManager.displaySuggestions(false);\n            String keywords = getCurrentKeywordsString();\n            String[] words = keywords.split(\" \");\n            if (words.length > 0) {\n                String prefix = words[words.length - 1];\n                // Note that prefix == \"\" when user types an explicit character and taps the EditText\n                // We must not allow the user to avoid suggestions for the empty string prefix\n                // Otherwise, explicit mentions would be broken, see MOB-38080\n                if (prefix.length() > 0) {\n                    setAvoidedPrefix(prefix);\n                }\n            }\n        }\n        return superResult;\n    }\n```"], [871, "java", "Json.fromJson", "```java\npublic static Object fromJson(Type type, Reader reader)\r\n            throws JsonException {\r\n        return parse(type, reader);\r\n    }\n```"], [379, "java", "DefaultBoundSessionOfHashSetOperations.set", "```java\npublic Long set(HK key, Collection<HV> values) {\n        return ops.multiSet(getKey(), getField(), key, values);\n    }\n```"], [483, "java", "Node.back", "```java\nNode<E> back() {\n            Node<E> f = predecessor();\n            return (f == null || f.isSpecial()) ? null : f;\n        }\n```"], [292, "java", "PVector2DGenerator.createNormal", "```java\npublic static <T> Generator<PVector2D<T>> createNormal()\n  {\n    return new PVector2DGenerator<>(PrimitiveGenerators.doubles(\n      GeneratorConstants.BOUND_NORMAL_DOUBLE_LOWER,\n      GeneratorConstants.BOUND_NORMAL_DOUBLE_UPPER\n    ));\n  }\n```"], [54, "java", "IntMath.factorial", "```java\npublic static int factorial(int n) {\n    checkNonNegative(\"n\", n);\n    return (n < factorials.length) ? factorials[n] : Integer.MAX_VALUE;\n  }\n```"], [998, "java", "RandomizedBackoff.nextBackoff", "```java\n@Override\n  public long nextBackoff(int attempts, Throwable error) {\n    return _policy.nextBackoff(attempts, error) + _minRange + Math.round((_maxRange - _minRange) * ThreadLocalRandom.current().nextDouble());\n  }\n```"], [844, "java", "Striped.lazyWeakSemaphore", "```java\npublic static Striped<Semaphore> lazyWeakSemaphore(int stripes, final int permits) {\n    return lazy(\n        stripes,\n        new Supplier<Semaphore>() {\n          @Override\n          public Semaphore get() {\n            return new Semaphore(permits, false);\n          }\n        });\n  }\n```"], [528, "java", "ItemGroupAssert.assertDoesNotHaveDuplicates", "```java\nprotected final void assertDoesNotHaveDuplicates() {\n    isNotNull();\n    Collection<?> duplicates = duplicatesFrom(actualAsList());\n    if (duplicates.isEmpty()) {\n      return;\n    }\n    failIfCustomMessageIsSet();\n    throw failure(format(\"<%s> contains duplicate(s):<%s>\", actual, duplicates));\n  }\n```"], [854, "java", "Times.nextSecond", "```java\npublic static Date nextSecond(Date date, int second) {\r\n        Calendar cal = Calendar.getInstance();\r\n        if (date != null) {\r\n            cal.setTime(date);\r\n        }\r\n        cal.add(Calendar.SECOND, second);\r\n        return cal.getTime();\r\n    }\n```"], [937, "java", "Xmls.eachChildren", "```java\npublic static void eachChildren(Element ele,\n                                    String regex,\n                                    final Each<Element> callback,\n                                    int off) {\n        if (null == ele || null == callback)\n            return;\n\n        // \u6b63\u5219\u5f0f\n        final Pattern p = null == regex ? null : Pattern.compile(regex);\n\n        NodeList nl = ele.getChildNodes();\n\n        // \u5faa\u73af\u5b50\n        final int len = nl.getLength();\n\n        // \u6bcf\u6b21\u5faa\u73af\u6267\u884c\n        Callback2<Integer, Node> eachInvoke = new Callback2<Integer, Node>() {\n            public void invoke(Integer index, Node nd) {\n                if (nd instanceof Element)\n                    try {\n                        Element tag = (Element) nd;\n                        if (null == p || p.matcher(tag.getTagName()).find())\n                            callback.invoke(index, tag, len);\n                    }\n                    catch (ExitLoop e) {\n                        throw Lang.wrapThrow(e);\n                    }\n                    catch (ContinueLoop e) {}\n                    catch (LoopException e) {\n                        throw Lang.wrapThrow(e);\n                    }\n            }\n        };\n\n        try {\n            // \u8d1f\u5411\u8fed\u4ee3\n            if (off < 0) {\n                for (int i = len + off; i >= 0; i--) {\n                    eachInvoke.invoke(i, nl.item(i));\n                }\n            }\n            // \u6b63\u5411\u8fed\u4ee3\n            else {\n                for (int i = off; i < len; i++) {\n                    eachInvoke.invoke(i, nl.item(i));\n                }\n            }\n        }\n        catch (ExitLoop e) {}\n        catch (RuntimeException e) {\n            if (e.getCause() instanceof ExitLoop)\n                return;\n            else\n                throw e;\n        }\n    }\n```"], [65, "java", "JsonUnflattener.withSeparator", "```java\npublic JsonUnflattener withSeparator(char separator) {\n    isTrue(!Character.toString(separator).matches(\"[\\\"\\\\s]\"),\n        \"Separator contains illegal chracter(%s)\",\n        Character.toString(separator));\n    isTrue(!leftBracket.equals(separator) && !rightBracket.equals(separator),\n        \"Separator(%s) is already used in brackets\",\n        Character.toString(separator));\n\n    this.separator = separator;\n    return this;\n  }\n```"], [437, "java", "PopupAppRegistrationHandler.handleRegistrationRequest", "```java\n@Override\n    public void handleRegistrationRequest(Context context, AppDescriptor descriptor, final Callback callback) {\n        final DialogView dialogView = new DialogView(context, descriptor);\n\n        Dialog dialog = new AlertDialog.Builder(context).setPositiveButton(R.string.app_permission_dialog_allow, new AlertDialog.OnClickListener() {\n\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                callback.onRequestAccepted(dialogView.getSelectedPersona());\n            }\n        }).setNegativeButton(R.string.app_permission_dialog_deny, new AlertDialog.OnClickListener() {\n\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                callback.onRequestRefused();\n            }\n        }).setView(dialogView.getView()).create();\n\n\n        /*\n         * Workaround to fix the crash:\n\t\t * android.view.WindowManager$BadTokenException: Unable to add window\n\t\t * android.view.ViewRootImpl$W@3d67307 -- permission denied for this window type\n\t\t * that appears only on Android 6.0 Marshmallow or greater.\n\t\t * Start a dialog fragment to explain the procedure to the user.\n\t\t * When the user accepts, onClickOnUnderstoodButton() will be called.\n\t\t */\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            //if android MarshMallow or greater\n            if (Settings.canDrawOverlays(context)) {\n                dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n                dialog.show();\n            } else {\n                //to prevent a crash\n                Toast.makeText(context, \"You must activate SPF!\", Toast.LENGTH_SHORT).show();\n            }\n        } else {\n            //other older Android's versions\n            dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n            dialog.show();\n        }\n    }\n```"], [438, "java", "Themes.getColor", "```java\npublic static int getColor(Context context, @AttrRes int attrId) {\n        int color = 0;\n        TypedArray a = context.obtainStyledAttributes(new int[]{attrId});\n        try {\n            color = a.getColor(0, 0);\n        } catch (UnsupportedOperationException e) {\n            error(\"color\", attrId, e);\n        }\n        a.recycle();\n        return color;\n    }\n```"], [504, "java", "ReflectionHelper.getGetterPropertyName", "```java\npublic static String getGetterPropertyName(Member member) {\n        if (member instanceof Field) {\n            return member.getName();\n        } else if (member instanceof Method) {\n            String methodName = member.getName();\n            for (String prefix : PROPERTY_ACCESSOR_PREFIXES) {\n                if (methodName.startsWith(prefix)) {\n                    return decapitalizePropertyName(methodName.substring(prefix.length()));\n                }\n            }\n        }\n        return null;\n    }\n```"], [127, "java", "MenuTree.setDefault", "```java\npublic void setDefault(final UUID _selectCmdUUID)\n    {\n        final UIMenuItem menuItem = getProvider().getRoots().next();\n        menuItem.setHeader(true);\n        boolean hasDefault = false;\n        for (final UIMenuItem childItem : menuItem.getChildren()) {\n            if (_selectCmdUUID == null && childItem.isDefaultSelected()\n                            || _selectCmdUUID != null && _selectCmdUUID.equals(childItem.getCommandUUID())) {\n                hasDefault = true;\n                childItem.setSelected(true);\n            }\n        }\n        if (!hasDefault) {\n            menuItem.setSelected(true);\n        }\n        expand(menuItem);\n        expandChildren(menuItem);\n    }\n```"], [167, "java", "Mono.timeout", "```java\npublic final Mono<T> timeout(Duration timeout, Mono<? extends T> fallback) {\n\t\treturn timeout(timeout, fallback, Schedulers.parallel());\n\t}\n```"], [636, "java", "Maps.transformEntry", "```java\nstatic <V2, K, V1> Entry<K, V2> transformEntry(\n      final EntryTransformer<? super K, ? super V1, V2> transformer, final Entry<K, V1> entry) {\n    checkNotNull(transformer);\n    checkNotNull(entry);\n    return new AbstractMapEntry<K, V2>() {\n      @Override\n      public K getKey() {\n        return entry.getKey();\n      }\n\n      @Override\n      public V2 getValue() {\n        return transformer.transformEntry(entry.getKey(), entry.getValue());\n      }\n    };\n  }\n```"], [821, "java", "Record.get", "```java\npublic Object get(Object name) {\r\n        if (null == name)\r\n            return null;\r\n        return map.get(name.toString().toLowerCase());\r\n    }\n```"], [770, "java", "VotesClass.getBillsBySponsorYear", "```java\npublic Bills getBillsBySponsorYear(String candidateId, String year) throws VoteSmartException, VoteSmartErrorException {\r\n\t\treturn api.query(\"Votes.getBillsBySponsorYear\", new ArgMap(\"candidateId\", candidateId, \"year\", year), Bills.class );\r\n\t}\n```"], [685, "java", "Resources.asCharSource", "```java\npublic static CharSource asCharSource(URL url, Charset charset) {\n    return asByteSource(url).asCharSource(charset);\n  }\n```"], [135, "java", "SchematronResourcePure.validateCompletely", "```java\npublic void validateCompletely (@Nonnull final IPSErrorHandler aErrorHandler)\n  {\n    ValueEnforcer.notNull (aErrorHandler, \"ErrorHandler\");\n\n    try\n    {\n      getOrCreateBoundSchema ().getOriginalSchema ().validateCompletely (aErrorHandler);\n    }\n    catch (final RuntimeException ex)\n    {\n      // May happen when XPath errors are contained\n    }\n  }\n```"], [838, "java", "ShadowArscAssetManager9.nativeThemeCopy", "```java\n@Implementation(minSdk = Build.VERSION_CODES.Q)\n  protected static void nativeThemeCopy(long dst_asset_manager_ptr, long dst_theme_ptr,\n      long src_asset_manager_ptr, long src_theme_ptr) {\n    Theme dst_theme = Registries.NATIVE_THEME9_REGISTRY.getNativeObject(dst_theme_ptr);\n    Theme src_theme = Registries.NATIVE_THEME9_REGISTRY.getNativeObject(src_theme_ptr);\n\n    if (dst_asset_manager_ptr != src_asset_manager_ptr) {\n      CppAssetManager2 dst_assetmanager = AssetManagerFromLong(dst_asset_manager_ptr);\n      CHECK(dst_theme.GetAssetManager() == dst_assetmanager);\n\n      CppAssetManager2 src_assetmanager = AssetManagerFromLong(src_asset_manager_ptr);\n      CHECK(src_theme.GetAssetManager() == src_assetmanager);\n\n      dst_theme.SetTo(src_theme);\n    } else {\n      dst_theme.SetTo(src_theme);\n    }\n  }\n```"], [25, "java", "BcelUtil.accessFlagsToString", "```java\nstatic String accessFlagsToString(Method m) {\n\n    int flags = m.getAccessFlags();\n\n    StringBuilder buf = new StringBuilder();\n    // Note that pow is a binary mask for the flag (= 2^i).\n    for (int i = 0, pow = 1; i <= Const.MAX_ACC_FLAG; i++) {\n      if ((flags & pow) != 0) {\n        if (buf.length() > 0) {\n          buf.append(\" \");\n        }\n        if (i < Const.ACCESS_NAMES_LENGTH) {\n          buf.append(Const.getAccessName(i));\n        } else {\n          buf.append(String.format(\"ACC_BIT(%x)\", pow));\n        }\n      }\n      pow <<= 1;\n    }\n\n    return buf.toString();\n  }\n```"], [872, "java", "Collections2.filter", "```java\npublic static <E> Collection<E> filter(Collection<E> unfiltered, Predicate<? super E> predicate) {\n    if (unfiltered instanceof FilteredCollection) {\n      // Support clear(), removeAll(), and retainAll() when filtering a filtered\n      // collection.\n      return ((FilteredCollection<E>) unfiltered).createCombined(predicate);\n    }\n\n    return new FilteredCollection<E>(checkNotNull(unfiltered), checkNotNull(predicate));\n  }\n```"], [326, "java", "Chronos.runBroadcast", "```java\n@NonNull\n    public static <Output> ChronosOperationResult<Output> runBroadcast(\n            @NonNull final ChronosOperation<Output> operation) {\n        return ChronosService.getInstance().runSync(operation, true);\n    }\n```"], [604, "java", "XmlToXsdExtensions.xmlToXsd", "```java\npublic static void xmlToXsd(final File xmlInputFile, final File xsdOutFile,\n\t\tfinal Inst2XsdOptions inst2XsdOptions) throws XmlException, IOException\n\t{\n\t\txmlToXsd(xmlInputFile, xsdOutFile, inst2XsdOptions, new XmlOptions().setSavePrettyPrint());\n\t}\n```"]]}, "Validation-java MRR (bs=1,000)": 0.006256573620415141, "Eval": {"Primary MRR": 0.007480628495717182, "FuncName MRR": 0.007485100160514516}}
