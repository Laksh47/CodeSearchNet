node {
  name: "dropout_keep_rate"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "sample_loss_weights/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 200
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "sample_loss_weights"
  op: "PlaceholderWithDefault"
  input: "sample_loss_weights/input"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 200
        }
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/dropout_keep_rate"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/source_token"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 200
        }
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/target_token"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 200
        }
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/path"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 200
        }
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout_keep_rate"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/source_token"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 200
        }
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/target_token"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 200
        }
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 200
        }
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\240\206\001\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.007736071012914181
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.007736071012914181
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 14
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/sub"
  op: "Sub"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/max"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/mul"
  op: "Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/RandomUniform"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform"
  op: "Add"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100000
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\240\206\001\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.007736071012914181
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.007736071012914181
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 25
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/sub"
  op: "Sub"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/max"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/mul"
  op: "Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/RandomUniform"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform"
  op: "Add"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100000
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08833085745573044
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08833085745573044
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 36
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/sub"
  op: "Sub"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/max"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/mul"
  op: "Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/RandomUniform"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform"
  op: "Add"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup"
  op: "ResourceGather"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/source_token"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup/Identity"
  op: "Identity"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup/Identity_1"
  op: "Identity"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1"
  op: "ResourceGather"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1/Identity"
  op: "Identity"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1/Identity_1"
  op: "Identity"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2"
  op: "ResourceGather"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/target_token"
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2/Identity"
  op: "Identity"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2/Identity_1"
  op: "Identity"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
  op: "ConcatV2"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup/Identity_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1/Identity_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2/Identity_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat/axis"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/sub"
  op: "Sub"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/sub/x"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout_keep_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/Shape"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 60
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform/sub"
  op: "Sub"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform/max"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform/mul"
  op: "Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform/RandomUniform"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform"
  op: "Add"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform/mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/sub"
  op: "Sub"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/sub/x"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/truediv"
  op: "RealDiv"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/truediv/x"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/random_uniform"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
  op: "Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/Cast"
  op: "Cast"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
  op: "Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\000\003\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape"
  op: "Reshape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0625
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0625
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 77
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/sub"
  op: "Sub"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/max"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/mul"
  op: "Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/RandomUniform"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform"
  op: "Add"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 768
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul"
  op: "MatMul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Tanh"
  op: "Tanh"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1"
  op: "MatMul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Tanh"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\310\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_1"
  op: "Reshape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sub_1"
  op: "Sub"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Rank_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range"
  op: "Range"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range/start"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range/limit"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_1/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_1/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_1"
  op: "Range"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_1/start"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sub_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_1/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_1/values_1"
  op: "Pack"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_1/values_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_1"
  op: "ConcatV2"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_1/values_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_1/values_3"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/transpose"
  op: "Transpose"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax"
  op: "Softmax"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sub_2"
  op: "Sub"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Rank_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_2/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_2/limit"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_2/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_2"
  op: "Range"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_2/start"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_2/limit"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_2/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_3/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_3/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_3"
  op: "Range"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_3/start"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sub_2"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_3/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_2/values_1"
  op: "Pack"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_2/values_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_2"
  op: "ConcatV2"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_2"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_2/values_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/range_3"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_2/values_3"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_2/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_1"
  op: "Transpose"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\310\000\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2"
  op: "Reshape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Tanh"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
  op: "Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
  op: "Sum"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "code_encoder/concat/concat_dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "code_encoder/concat/concat"
  op: "Identity"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout_keep_rate"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/tokens"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/tokens_mask"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\'\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0236052218824625
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0236052218824625
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 136
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/sub"
  op: "Sub"
  input: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/max"
  input: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/mul"
  op: "Mul"
  input: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/RandomUniform"
  input: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform"
  op: "Add"
  input: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/mul"
  input: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10000
        }
        dim {
          size: 768
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "query_encoder/nbow_encoder/token_embeddings"
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "query_encoder/nbow_encoder/token_embeddings"
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Assign"
  op: "AssignVariableOp"
  input: "query_encoder/nbow_encoder/token_embeddings"
  input: "query_encoder/nbow_encoder/token_embeddings/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "query_encoder/nbow_encoder/token_embeddings"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/sub"
  op: "Sub"
  input: "query_encoder/nbow_encoder/sub/x"
  input: "query_encoder/nbow_encoder/dropout_keep_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/ReadVariableOp"
  op: "ReadVariableOp"
  input: "query_encoder/nbow_encoder/token_embeddings"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\'\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "query_encoder/nbow_encoder/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 150
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/random_uniform/sub"
  op: "Sub"
  input: "query_encoder/nbow_encoder/dropout/random_uniform/max"
  input: "query_encoder/nbow_encoder/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/random_uniform/mul"
  op: "Mul"
  input: "query_encoder/nbow_encoder/dropout/random_uniform/RandomUniform"
  input: "query_encoder/nbow_encoder/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/random_uniform"
  op: "Add"
  input: "query_encoder/nbow_encoder/dropout/random_uniform/mul"
  input: "query_encoder/nbow_encoder/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/sub"
  op: "Sub"
  input: "query_encoder/nbow_encoder/dropout/sub/x"
  input: "query_encoder/nbow_encoder/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/truediv"
  op: "RealDiv"
  input: "query_encoder/nbow_encoder/dropout/truediv/x"
  input: "query_encoder/nbow_encoder/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "query_encoder/nbow_encoder/dropout/random_uniform"
  input: "query_encoder/nbow_encoder/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/mul"
  op: "Mul"
  input: "query_encoder/nbow_encoder/dropout/ReadVariableOp"
  input: "query_encoder/nbow_encoder/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/Cast"
  op: "Cast"
  input: "query_encoder/nbow_encoder/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dropout/mul_1"
  op: "Mul"
  input: "query_encoder/nbow_encoder/dropout/mul"
  input: "query_encoder/nbow_encoder/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/embedding_lookup/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/embedding_lookup"
  op: "GatherV2"
  input: "query_encoder/nbow_encoder/dropout/mul_1"
  input: "query_encoder/nbow_encoder/tokens"
  input: "query_encoder/nbow_encoder/embedding_lookup/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/embedding_lookup/Identity"
  op: "Identity"
  input: "query_encoder/nbow_encoder/embedding_lookup"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/Sum"
  op: "Sum"
  input: "query_encoder/nbow_encoder/tokens_mask"
  input: "query_encoder/nbow_encoder/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08833085745573044
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08833085745573044
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 170
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/max"
  input: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/mul"
  input: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "query_encoder/nbow_encoder/dense/kernel"
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "query_encoder/nbow_encoder/dense/kernel"
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Assign"
  op: "AssignVariableOp"
  input: "query_encoder/nbow_encoder/dense/kernel"
  input: "query_encoder/nbow_encoder/dense/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "query_encoder/nbow_encoder/dense/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/ReadVariableOp"
  op: "ReadVariableOp"
  input: "query_encoder/nbow_encoder/dense/kernel"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/axes"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/free"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/Shape"
  op: "Shape"
  input: "query_encoder/nbow_encoder/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/GatherV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/GatherV2"
  op: "GatherV2"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Shape"
  input: "query_encoder/nbow_encoder/dense/Tensordot/free"
  input: "query_encoder/nbow_encoder/dense/Tensordot/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/GatherV2_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/GatherV2_1"
  op: "GatherV2"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Shape"
  input: "query_encoder/nbow_encoder/dense/Tensordot/axes"
  input: "query_encoder/nbow_encoder/dense/Tensordot/GatherV2_1/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/Prod"
  op: "Prod"
  input: "query_encoder/nbow_encoder/dense/Tensordot/GatherV2"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/Prod_1"
  op: "Prod"
  input: "query_encoder/nbow_encoder/dense/Tensordot/GatherV2_1"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/concat"
  op: "ConcatV2"
  input: "query_encoder/nbow_encoder/dense/Tensordot/free"
  input: "query_encoder/nbow_encoder/dense/Tensordot/axes"
  input: "query_encoder/nbow_encoder/dense/Tensordot/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/stack"
  op: "Pack"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Prod"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Prod_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/transpose"
  op: "Transpose"
  input: "query_encoder/nbow_encoder/embedding_lookup/Identity"
  input: "query_encoder/nbow_encoder/dense/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/Reshape"
  op: "Reshape"
  input: "query_encoder/nbow_encoder/dense/Tensordot/transpose"
  input: "query_encoder/nbow_encoder/dense/Tensordot/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/transpose_1"
  op: "Transpose"
  input: "query_encoder/nbow_encoder/dense/Tensordot/ReadVariableOp"
  input: "query_encoder/nbow_encoder/dense/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/Reshape_1"
  op: "Reshape"
  input: "query_encoder/nbow_encoder/dense/Tensordot/transpose_1"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/MatMul"
  op: "MatMul"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Reshape"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot/concat_1"
  op: "ConcatV2"
  input: "query_encoder/nbow_encoder/dense/Tensordot/GatherV2"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Const_2"
  input: "query_encoder/nbow_encoder/dense/Tensordot/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Tensordot"
  op: "Reshape"
  input: "query_encoder/nbow_encoder/dense/Tensordot/MatMul"
  input: "query_encoder/nbow_encoder/dense/Tensordot/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/Sigmoid"
  op: "Sigmoid"
  input: "query_encoder/nbow_encoder/dense/Tensordot"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/ExpandDims"
  op: "ExpandDims"
  input: "query_encoder/nbow_encoder/tokens_mask"
  input: "query_encoder/nbow_encoder/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/mul"
  op: "Mul"
  input: "query_encoder/nbow_encoder/dense/Sigmoid"
  input: "query_encoder/nbow_encoder/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/mul_1"
  op: "Mul"
  input: "query_encoder/nbow_encoder/embedding_lookup/Identity"
  input: "query_encoder/nbow_encoder/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/Sum_1"
  op: "Sum"
  input: "query_encoder/nbow_encoder/mul_1"
  input: "query_encoder/nbow_encoder/Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/Sum_2/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/Sum_2"
  op: "Sum"
  input: "query_encoder/nbow_encoder/mul"
  input: "query_encoder/nbow_encoder/Sum_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/add"
  op: "AddV2"
  input: "query_encoder/nbow_encoder/Sum_2"
  input: "query_encoder/nbow_encoder/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/truediv"
  op: "RealDiv"
  input: "query_encoder/nbow_encoder/Sum_1"
  input: "query_encoder/nbow_encoder/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "norm/mul"
  op: "Mul"
  input: "query_encoder/nbow_encoder/truediv"
  input: "query_encoder/nbow_encoder/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "norm/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "norm/Sum"
  op: "Sum"
  input: "norm/mul"
  input: "norm/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "norm/Sqrt"
  op: "Sqrt"
  input: "norm/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.000000013351432e-10
      }
    }
  }
}
node {
  name: "add"
  op: "AddV2"
  input: "norm/Sqrt"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "norm_1/mul"
  op: "Mul"
  input: "code_encoder/concat/concat"
  input: "code_encoder/concat/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "norm_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "norm_1/Sum"
  op: "Sum"
  input: "norm_1/mul"
  input: "norm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "norm_1/Sqrt"
  op: "Sqrt"
  input: "norm_1/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.000000013351432e-10
      }
    }
  }
}
node {
  name: "add_1"
  op: "AddV2"
  input: "norm_1/Sqrt"
  input: "add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "query_encoder/nbow_encoder/truediv"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv_1"
  op: "RealDiv"
  input: "code_encoder/concat/concat"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_query_cooccurrence_logits"
  op: "MatMul"
  input: "truediv"
  input: "truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "Shape"
  op: "Shape"
  input: "code_query_cooccurrence_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "Shape"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "Fill/dims"
  op: "Pack"
  input: "strided_slice"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Fill/value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -inf
      }
    }
  }
}
node {
  name: "Fill"
  op: "Fill"
  input: "Fill/dims"
  input: "Fill/value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Diag"
  op: "Diag"
  input: "Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "DiagPart"
  op: "DiagPart"
  input: "code_query_cooccurrence_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "sub/x"
  input: "DiagPart"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_2"
  op: "AddV2"
  input: "code_query_cooccurrence_logits"
  input: "Diag"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Relu"
  op: "Relu"
  input: "add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Max/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "Max"
  op: "Max"
  input: "Relu"
  input: "Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "add_3"
  op: "AddV2"
  input: "sub"
  input: "Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Maximum/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Maximum"
  op: "Maximum"
  input: "Maximum/x"
  input: "add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "Maximum"
  input: "sample_loss_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "mul"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "sample_loss_weights"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "truediv_2"
  op: "RealDiv"
  input: "Sum"
  input: "Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "DiagPart_1"
  op: "DiagPart"
  input: "code_query_cooccurrence_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "ExpandDims"
  op: "ExpandDims"
  input: "DiagPart_1"
  input: "ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "GreaterEqual"
  op: "GreaterEqual"
  input: "code_query_cooccurrence_logits"
  input: "ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Sum_2/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sum_2"
  op: "Sum"
  input: "Cast"
  input: "Sum_2/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "truediv_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "truediv_3"
  op: "RealDiv"
  input: "truediv_3/x"
  input: "Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_2_grad/Shape"
  input: "gradients/truediv_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_2_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/Fill"
  input: "Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_2_grad/Sum"
  op: "Sum"
  input: "gradients/truediv_2_grad/RealDiv"
  input: "gradients/truediv_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_2_grad/Sum"
  input: "gradients/truediv_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_2_grad/Neg"
  op: "Neg"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_2_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/truediv_2_grad/Neg"
  input: "Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_2_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/truediv_2_grad/RealDiv_1"
  input: "Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_2_grad/mul"
  op: "Mul"
  input: "gradients/Fill"
  input: "gradients/truediv_2_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/truediv_2_grad/mul"
  input: "gradients/truediv_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/truediv_2_grad/Sum_1"
  input: "gradients/truediv_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_2"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_2_grad/Reshape"
  input: "gradients/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 200
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_grad/Reshape"
  input: "gradients/Sum_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Shape"
  op: "Shape"
  input: "Maximum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_grad/Shape_1"
  op: "Shape"
  input: "sample_loss_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_grad/Shape"
  input: "gradients/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Mul"
  op: "Mul"
  input: "gradients/Sum_grad/Tile"
  input: "sample_loss_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Sum"
  op: "Sum"
  input: "gradients/mul_grad/Mul"
  input: "gradients/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_grad/Sum"
  input: "gradients/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Mul_1"
  op: "Mul"
  input: "Maximum"
  input: "gradients/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_grad/Mul_1"
  input: "gradients/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_grad/Sum_1"
  input: "gradients/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Shape_1"
  op: "Shape"
  input: "add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Maximum_grad/Shape_2"
  op: "Shape"
  input: "gradients/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Maximum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/zeros"
  op: "Fill"
  input: "gradients/Maximum_grad/Shape_2"
  input: "gradients/Maximum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Maximum_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "Maximum/x"
  input: "add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/Maximum_grad/Shape"
  input: "gradients/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Select"
  op: "Select"
  input: "gradients/Maximum_grad/GreaterEqual"
  input: "gradients/mul_grad/Reshape"
  input: "gradients/Maximum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Sum"
  op: "Sum"
  input: "gradients/Maximum_grad/Select"
  input: "gradients/Maximum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Maximum_grad/Reshape"
  op: "Reshape"
  input: "gradients/Maximum_grad/Sum"
  input: "gradients/Maximum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Select_1"
  op: "Select"
  input: "gradients/Maximum_grad/GreaterEqual"
  input: "gradients/Maximum_grad/zeros"
  input: "gradients/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
}
node {
  name: "gradients/Maximum_grad/Sum_1"
  op: "Sum"
  input: "gradients/Maximum_grad/Select_1"
  input: "gradients/Maximum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Maximum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/Maximum_grad/Sum_1"
  input: "gradients/Maximum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Maximum"
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/Shape"
  op: "Shape"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_3_grad/Shape_1"
  op: "Shape"
  input: "Max"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_3_grad/Shape"
  input: "gradients/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_3"
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/Maximum_grad/Reshape_1"
  input: "gradients/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_3_grad/Sum"
  input: "gradients/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_3"
      }
    }
  }
}
node {
  name: "gradients/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/Maximum_grad/Reshape_1"
  input: "gradients/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_3_grad/Sum_1"
  input: "gradients/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_3"
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Shape"
  op: "Shape"
  input: "sub/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sub"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/Shape_1"
  op: "Shape"
  input: "DiagPart"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sub"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/sub_grad/Shape"
  input: "gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sub"
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Sum"
  op: "Sum"
  input: "gradients/add_3_grad/Reshape"
  input: "gradients/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_grad/Reshape"
  op: "Reshape"
  input: "gradients/sub_grad/Sum"
  input: "gradients/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sub"
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Neg"
  op: "Neg"
  input: "gradients/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sub"
      }
    }
  }
}
node {
  name: "gradients/sub_grad/Sum_1"
  op: "Sum"
  input: "gradients/sub_grad/Neg"
  input: "gradients/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sub"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/sub_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/sub_grad/Sum_1"
  input: "gradients/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@sub"
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Shape"
  op: "Shape"
  input: "Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Max_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Max_grad/add"
  op: "AddV2"
  input: "Max/reduction_indices"
  input: "gradients/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
}
node {
  name: "gradients/Max_grad/mod"
  op: "FloorMod"
  input: "gradients/Max_grad/add"
  input: "gradients/Max_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Max_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Max_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Max_grad/range"
  op: "Range"
  input: "gradients/Max_grad/range/start"
  input: "gradients/Max_grad/Size"
  input: "gradients/Max_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Fill"
  op: "Fill"
  input: "gradients/Max_grad/Shape_1"
  input: "gradients/Max_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Max_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Max_grad/range"
  input: "gradients/Max_grad/mod"
  input: "gradients/Max_grad/Shape"
  input: "gradients/Max_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Reshape"
  op: "Reshape"
  input: "Max"
  input: "gradients/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_3_grad/Reshape_1"
  input: "gradients/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Equal"
  op: "Equal"
  input: "gradients/Max_grad/Reshape"
  input: "Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
  attr {
    key: "incompatible_shape_error"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/Max_grad/Cast"
  op: "Cast"
  input: "gradients/Max_grad/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
}
node {
  name: "gradients/Max_grad/Sum"
  op: "Sum"
  input: "gradients/Max_grad/Cast"
  input: "Max/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Max_grad/Reshape_2"
  op: "Reshape"
  input: "gradients/Max_grad/Sum"
  input: "gradients/Max_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
}
node {
  name: "gradients/Max_grad/truediv"
  op: "RealDiv"
  input: "gradients/Max_grad/Cast"
  input: "gradients/Max_grad/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
}
node {
  name: "gradients/Max_grad/mul"
  op: "Mul"
  input: "gradients/Max_grad/truediv"
  input: "gradients/Max_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Max"
      }
    }
  }
}
node {
  name: "gradients/DiagPart_grad/Diag"
  op: "Diag"
  input: "gradients/sub_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@DiagPart"
      }
    }
  }
}
node {
  name: "gradients/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/Max_grad/mul"
  input: "Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Relu"
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Shape"
  op: "Shape"
  input: "code_query_cooccurrence_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_2_grad/Shape_1"
  op: "Shape"
  input: "Diag"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_2_grad/Shape"
  input: "gradients/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_2"
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/Relu_grad/ReluGrad"
  input: "gradients/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_2_grad/Sum"
  input: "gradients/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_2"
      }
    }
  }
}
node {
  name: "gradients/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/Relu_grad/ReluGrad"
  input: "gradients/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_2_grad/Sum_1"
  input: "gradients/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_2"
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/DiagPart_grad/Diag"
  input: "gradients/add_2_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@DiagPart"
      }
    }
  }
}
node {
  name: "gradients/code_query_cooccurrence_logits_grad/MatMul"
  op: "MatMul"
  input: "gradients/AddN"
  input: "truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_query_cooccurrence_logits"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/code_query_cooccurrence_logits_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/AddN"
  input: "truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_query_cooccurrence_logits"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape"
  op: "Shape"
  input: "query_encoder/nbow_encoder/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape_1"
  op: "Shape"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_grad/Shape"
  input: "gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/code_query_cooccurrence_logits_grad/MatMul"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/truediv_grad/RealDiv"
  input: "gradients/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum"
  input: "gradients/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Neg"
  op: "Neg"
  input: "query_encoder/nbow_encoder/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/truediv_grad/Neg"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/truediv_grad/RealDiv_1"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/mul"
  op: "Mul"
  input: "gradients/code_query_cooccurrence_logits_grad/MatMul"
  input: "gradients/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/truediv_grad/mul"
  input: "gradients/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum_1"
  input: "gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Shape"
  op: "Shape"
  input: "code_encoder/concat/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Shape_1"
  op: "Shape"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_1_grad/Shape"
  input: "gradients/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/code_query_cooccurrence_logits_grad/MatMul_1"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Sum"
  op: "Sum"
  input: "gradients/truediv_1_grad/RealDiv"
  input: "gradients/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_1_grad/Sum"
  input: "gradients/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Neg"
  op: "Neg"
  input: "code_encoder/concat/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/truediv_1_grad/Neg"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/truediv_1_grad/RealDiv_1"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/mul"
  op: "Mul"
  input: "gradients/code_query_cooccurrence_logits_grad/MatMul_1"
  input: "gradients/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/truediv_1_grad/mul"
  input: "gradients/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/truediv_1_grad/Sum_1"
  input: "gradients/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/add_grad/Shape"
  op: "Shape"
  input: "norm/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/Shape_1"
  op: "Shape"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_grad/Shape"
  input: "gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add"
      }
    }
  }
}
node {
  name: "gradients/add_grad/Sum"
  op: "Sum"
  input: "gradients/truediv_grad/Reshape_1"
  input: "gradients/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_grad/Sum"
  input: "gradients/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add"
      }
    }
  }
}
node {
  name: "gradients/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/truediv_grad/Reshape_1"
  input: "gradients/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_grad/Sum_1"
  input: "gradients/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add"
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Shape"
  op: "Shape"
  input: "norm_1/Sqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_1_grad/Shape_1"
  op: "Shape"
  input: "add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/add_1_grad/Shape"
  input: "gradients/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_1"
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/truediv_1_grad/Reshape_1"
  input: "gradients/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/add_1_grad/Sum"
  input: "gradients/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_1"
      }
    }
  }
}
node {
  name: "gradients/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/truediv_1_grad/Reshape_1"
  input: "gradients/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/add_1_grad/Sum_1"
  input: "gradients/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@add_1"
      }
    }
  }
}
node {
  name: "gradients/norm/Sqrt_grad/SqrtGrad"
  op: "SqrtGrad"
  input: "norm/Sqrt"
  input: "gradients/add_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sqrt"
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sqrt_grad/SqrtGrad"
  op: "SqrtGrad"
  input: "norm_1/Sqrt"
  input: "gradients/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sqrt"
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/Shape"
  op: "Shape"
  input: "norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/add"
  op: "AddV2"
  input: "norm/Sum/reduction_indices"
  input: "gradients/norm/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/norm/Sum_grad/add"
  input: "gradients/norm/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/range"
  op: "Range"
  input: "gradients/norm/Sum_grad/range/start"
  input: "gradients/norm/Sum_grad/Size"
  input: "gradients/norm/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/norm/Sum_grad/Shape_1"
  input: "gradients/norm/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/norm/Sum_grad/range"
  input: "gradients/norm/Sum_grad/mod"
  input: "gradients/norm/Sum_grad/Shape"
  input: "gradients/norm/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/norm/Sum_grad/DynamicStitch"
  input: "gradients/norm/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/norm/Sum_grad/Shape"
  input: "gradients/norm/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/norm/Sqrt_grad/SqrtGrad"
  input: "gradients/norm/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/norm/Sum_grad/Reshape"
  input: "gradients/norm/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/Shape"
  op: "Shape"
  input: "norm_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/add"
  op: "AddV2"
  input: "norm_1/Sum/reduction_indices"
  input: "gradients/norm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/norm_1/Sum_grad/add"
  input: "gradients/norm_1/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/range"
  op: "Range"
  input: "gradients/norm_1/Sum_grad/range/start"
  input: "gradients/norm_1/Sum_grad/Size"
  input: "gradients/norm_1/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/norm_1/Sum_grad/Shape_1"
  input: "gradients/norm_1/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/norm_1/Sum_grad/range"
  input: "gradients/norm_1/Sum_grad/mod"
  input: "gradients/norm_1/Sum_grad/Shape"
  input: "gradients/norm_1/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/norm_1/Sum_grad/DynamicStitch"
  input: "gradients/norm_1/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/norm_1/Sum_grad/Shape"
  input: "gradients/norm_1/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/norm_1/Sqrt_grad/SqrtGrad"
  input: "gradients/norm_1/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm_1/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/norm_1/Sum_grad/Reshape"
  input: "gradients/norm_1/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/Sum"
      }
    }
  }
}
node {
  name: "gradients/norm/mul_grad/Shape"
  op: "Shape"
  input: "query_encoder/nbow_encoder/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/norm/mul_grad/Shape_1"
  op: "Shape"
  input: "query_encoder/nbow_encoder/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/norm/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/norm/mul_grad/Shape"
  input: "gradients/norm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/mul"
      }
    }
  }
}
node {
  name: "gradients/norm/mul_grad/Mul"
  op: "Mul"
  input: "gradients/norm/Sum_grad/Tile"
  input: "query_encoder/nbow_encoder/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/mul"
      }
    }
  }
}
node {
  name: "gradients/norm/mul_grad/Sum"
  op: "Sum"
  input: "gradients/norm/mul_grad/Mul"
  input: "gradients/norm/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/norm/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/norm/mul_grad/Sum"
  input: "gradients/norm/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/mul"
      }
    }
  }
}
node {
  name: "gradients/norm/mul_grad/Mul_1"
  op: "Mul"
  input: "query_encoder/nbow_encoder/truediv"
  input: "gradients/norm/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/mul"
      }
    }
  }
}
node {
  name: "gradients/norm/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/norm/mul_grad/Mul_1"
  input: "gradients/norm/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/norm/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/norm/mul_grad/Sum_1"
  input: "gradients/norm/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm/mul"
      }
    }
  }
}
node {
  name: "gradients/norm_1/mul_grad/Shape"
  op: "Shape"
  input: "code_encoder/concat/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/norm_1/mul_grad/Shape_1"
  op: "Shape"
  input: "code_encoder/concat/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/norm_1/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/norm_1/mul_grad/Shape"
  input: "gradients/norm_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/mul"
      }
    }
  }
}
node {
  name: "gradients/norm_1/mul_grad/Mul"
  op: "Mul"
  input: "gradients/norm_1/Sum_grad/Tile"
  input: "code_encoder/concat/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/mul"
      }
    }
  }
}
node {
  name: "gradients/norm_1/mul_grad/Sum"
  op: "Sum"
  input: "gradients/norm_1/mul_grad/Mul"
  input: "gradients/norm_1/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/norm_1/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/norm_1/mul_grad/Sum"
  input: "gradients/norm_1/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/mul"
      }
    }
  }
}
node {
  name: "gradients/norm_1/mul_grad/Mul_1"
  op: "Mul"
  input: "code_encoder/concat/concat"
  input: "gradients/norm_1/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/mul"
      }
    }
  }
}
node {
  name: "gradients/norm_1/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/norm_1/mul_grad/Mul_1"
  input: "gradients/norm_1/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/norm_1/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/norm_1/mul_grad/Sum_1"
  input: "gradients/norm_1/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@norm_1/mul"
      }
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/truediv_grad/Reshape"
  input: "gradients/norm/mul_grad/Reshape"
  input: "gradients/norm/mul_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/Shape"
  op: "Shape"
  input: "query_encoder/nbow_encoder/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/Shape_1"
  op: "Shape"
  input: "query_encoder/nbow_encoder/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/Shape"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/AddN_1"
  input: "query_encoder/nbow_encoder/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/RealDiv"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/Sum"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/Neg"
  op: "Neg"
  input: "query_encoder/nbow_encoder/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/Neg"
  input: "query_encoder/nbow_encoder/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/RealDiv_1"
  input: "query_encoder/nbow_encoder/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/mul"
  op: "Mul"
  input: "gradients/AddN_1"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/mul"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/Sum_1"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/truediv"
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/truediv_1_grad/Reshape"
  input: "gradients/norm_1/mul_grad/Reshape"
  input: "gradients/norm_1/mul_grad/Reshape_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Shape"
  op: "Shape"
  input: "query_encoder/nbow_encoder/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/add"
  op: "AddV2"
  input: "query_encoder/nbow_encoder/Sum_1/reduction_indices"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/mod"
  op: "FloorMod"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/add"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/range"
  op: "Range"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/range/start"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Size"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Fill"
  op: "Fill"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Shape_1"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/range"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/mod"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Shape"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/DynamicStitch"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Shape"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/Reshape"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Reshape"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/add_grad/Shape"
  op: "Shape"
  input: "query_encoder/nbow_encoder/Sum_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/add_grad/Shape_1"
  op: "Shape"
  input: "query_encoder/nbow_encoder/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/query_encoder/nbow_encoder/add_grad/Shape"
  input: "gradients/query_encoder/nbow_encoder/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/add"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/add_grad/Sum"
  op: "Sum"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/Reshape_1"
  input: "gradients/query_encoder/nbow_encoder/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/add_grad/Sum"
  input: "gradients/query_encoder/nbow_encoder/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/add"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/query_encoder/nbow_encoder/truediv_grad/Reshape_1"
  input: "gradients/query_encoder/nbow_encoder/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/add_grad/Sum_1"
  input: "gradients/query_encoder/nbow_encoder/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/add"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Shape"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/add"
  op: "AddV2"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Sum/reduction_indices"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/add"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/range"
  op: "Range"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/range/start"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Size"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Shape_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/range"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/mod"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Shape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/DynamicStitch"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Shape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_2"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Sum"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_1_grad/Shape"
  op: "Shape"
  input: "query_encoder/nbow_encoder/embedding_lookup/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_1_grad/Shape_1"
  op: "Shape"
  input: "query_encoder/nbow_encoder/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/Shape"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Tile"
  input: "query_encoder/nbow_encoder/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/Mul"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/Sum"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_1_grad/Mul_1"
  op: "Mul"
  input: "query_encoder/nbow_encoder/embedding_lookup/Identity"
  input: "gradients/query_encoder/nbow_encoder/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/Mul_1"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/Sum_1"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Shape"
  op: "Shape"
  input: "query_encoder/nbow_encoder/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/add"
  op: "AddV2"
  input: "query_encoder/nbow_encoder/Sum_2/reduction_indices"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/mod"
  op: "FloorMod"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/add"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/range"
  op: "Range"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/range/start"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Size"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Fill"
  op: "Fill"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Shape_1"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/range"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/mod"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Shape"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Maximum"
  op: "Maximum"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/DynamicStitch"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Shape"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/add_grad/Reshape"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Tile"
  op: "Tile"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Reshape"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/Sum_2"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Shape"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Shape_1"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Shape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Tile"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Sum"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Mul_1"
  op: "Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Mul_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Sum_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Mul"
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/Reshape_1"
  input: "gradients/query_encoder/nbow_encoder/Sum_2_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_grad/Shape"
  op: "Shape"
  input: "query_encoder/nbow_encoder/dense/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_grad/Shape_1"
  op: "Shape"
  input: "query_encoder/nbow_encoder/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/query_encoder/nbow_encoder/mul_grad/Shape"
  input: "gradients/query_encoder/nbow_encoder/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_grad/Mul"
  op: "Mul"
  input: "gradients/AddN_3"
  input: "query_encoder/nbow_encoder/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_grad/Sum"
  op: "Sum"
  input: "gradients/query_encoder/nbow_encoder/mul_grad/Mul"
  input: "gradients/query_encoder/nbow_encoder/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/mul_grad/Sum"
  input: "gradients/query_encoder/nbow_encoder/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_grad/Mul_1"
  op: "Mul"
  input: "query_encoder/nbow_encoder/dense/Sigmoid"
  input: "gradients/AddN_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/query_encoder/nbow_encoder/mul_grad/Mul_1"
  input: "gradients/query_encoder/nbow_encoder/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/mul_grad/Sum_1"
  input: "gradients/query_encoder/nbow_encoder/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2_grad/Shape"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_1"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Mul_grad/Reshape_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "query_encoder/nbow_encoder/dense/Sigmoid"
  input: "gradients/query_encoder/nbow_encoder/mul_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Sigmoid"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax_grad/mul"
  op: "Mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_1_grad/transpose"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax_grad/Sum"
  op: "Sum"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax_grad/mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax_grad/sub"
  op: "Sub"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_1_grad/transpose"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax_grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax_grad/mul_1"
  op: "Mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax_grad/sub"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot_grad/Shape"
  op: "Shape"
  input: "query_encoder/nbow_encoder/dense/Tensordot/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/dense/Sigmoid_grad/SigmoidGrad"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/transpose"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Softmax_grad/mul_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/transpose"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot_grad/Reshape"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "query_encoder/nbow_encoder/dense/Tensordot/Reshape"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_1_grad/Shape"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/transpose_grad/transpose"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot/Reshape_grad/Shape"
  op: "Shape"
  input: "query_encoder/nbow_encoder/dense/Tensordot/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot/MatMul_grad/MatMul"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/Reshape"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot/Reshape_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/Reshape_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot/MatMul_grad/MatMul_1"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_1_grad/Reshape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Tanh"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "query_encoder/nbow_encoder/dense/Tensordot/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/transpose"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot/Reshape_grad/Reshape"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/transpose"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "query_encoder/nbow_encoder/dense/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/transpose_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dense/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot/Reshape_1_grad/Reshape"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/transpose_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2_grad/Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1_grad/MatMul"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_2"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Tanh"
  input: "gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Tanh"
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/query_encoder/nbow_encoder/mul_1_grad/Reshape"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot/transpose_grad/transpose"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/mul_1"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Tanh_grad/TanhGrad"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Tanh_grad/TanhGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\'\000\000\000\000\000\000\000\003\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Cast"
  op: "Cast"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Shape"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Size"
  op: "Size"
  input: "query_encoder/nbow_encoder/tokens"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Size"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Cast"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/strided_slice/stack"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/strided_slice/stack_1"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/ExpandDims"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/strided_slice"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "gradients/AddN_5"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "query_encoder/nbow_encoder/tokens"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_grad/Shape"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_grad/Reshape"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_grad/MatMul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\'\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\'\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Shape"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul/strided_slice"
  op: "StridedSlice"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Cast"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul/strided_slice/stack"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul/strided_slice/stack_1"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul/x"
  op: "UnsortedSegmentSum"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Reshape"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Reshape_1"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul/x"
  input: "query_encoder/nbow_encoder/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Sum"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1/strided_slice"
  op: "StridedSlice"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Cast"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1/strided_slice/stack"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1/strided_slice/stack_1"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1/y"
  op: "UnsortedSegmentSum"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Reshape"
  input: "gradients/query_encoder/nbow_encoder/embedding_lookup_grad/Reshape_1"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "query_encoder/nbow_encoder/dropout/mul"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Mul_1"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Sum_1"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Shape"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Shape_1"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Shape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_grad/Reshape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Sum"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Mul_1"
  op: "Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Mul_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Sum_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\'\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/BroadcastGradientArgs/s0"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Reshape"
  input: "query_encoder/nbow_encoder/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "query_encoder/nbow_encoder/dropout/ReadVariableOp"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Mul_1"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Sum"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Shape"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Shape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Reshape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Sum"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Mul_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Sum_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/mod"
  op: "FloorMod"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/concat/axis"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/Shape"
  op: "Shape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/ShapeN"
  op: "ShapeN"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup/Identity_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1/Identity_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2/Identity_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/mod"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/ShapeN"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/ShapeN:1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/ShapeN:2"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/Slice"
  op: "Slice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/ConcatOffset"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/ConcatOffset:1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/Slice_2"
  op: "Slice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/dropout/mul_grad/Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/ConcatOffset:2"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/ShapeN:2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/concat"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\240\206\001\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/Size"
  op: "Size"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/source_token"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/Size"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/Const"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/strided_slice/stack"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/strided_slice/stack_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/concat/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/concat"
  op: "ConcatV2"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/ExpandDims"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/strided_slice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/Reshape"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/Slice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/Reshape_1"
  op: "Reshape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/source_token"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\240\206\001\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/Size"
  op: "Size"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/Size"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/Const"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/strided_slice/stack"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/strided_slice/stack_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/concat/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/concat"
  op: "ConcatV2"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/ExpandDims"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/strided_slice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/Slice_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/Reshape_1"
  op: "Reshape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\240\206\001\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/Size"
  op: "Size"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/target_token"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/Size"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/strided_slice/stack"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/strided_slice"
  op: "StridedSlice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/Const"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/strided_slice/stack"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/strided_slice/stack_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/concat/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/concat"
  op: "ConcatV2"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/ExpandDims"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/strided_slice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/concat_grad/Slice_2"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/Reshape_1"
  op: "Reshape"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/target_token"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "gradients/concat/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat"
  op: "ConcatV2"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/Reshape"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/Reshape"
  input: "gradients/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "gradients/concat_1/axis"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/concat_1"
  op: "ConcatV2"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/Reshape_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_2_grad/Reshape_1"
  input: "gradients/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss"
  op: "L2Loss"
  input: "gradients/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_1"
  op: "L2Loss"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_2"
  op: "L2Loss"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_3"
  op: "L2Loss"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_4"
  op: "L2Loss"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "global_norm/L2Loss_5"
  op: "L2Loss"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/transpose_1"
      }
    }
  }
}
node {
  name: "global_norm/stack"
  op: "Pack"
  input: "global_norm/L2Loss"
  input: "global_norm/L2Loss_1"
  input: "global_norm/L2Loss_2"
  input: "global_norm/L2Loss_3"
  input: "global_norm/L2Loss_4"
  input: "global_norm/L2Loss_5"
  attr {
    key: "N"
    value {
      i: 6
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_norm/Sum"
  op: "Sum"
  input: "global_norm/stack"
  input: "global_norm/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "global_norm/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "global_norm/mul"
  op: "Mul"
  input: "global_norm/Sum"
  input: "global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "global_norm/global_norm"
  op: "Sqrt"
  input: "global_norm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/truediv/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv"
  op: "RealDiv"
  input: "clip_by_global_norm/truediv/x"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/truediv_1"
  op: "RealDiv"
  input: "clip_by_global_norm/Const"
  input: "clip_by_global_norm/truediv_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Minimum"
  op: "Minimum"
  input: "clip_by_global_norm/truediv"
  input: "clip_by_global_norm/truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul"
  op: "Mul"
  input: "clip_by_global_norm/mul/x"
  input: "clip_by_global_norm/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/IsFinite"
  op: "IsFinite"
  input: "global_norm/global_norm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: nan
      }
    }
  }
}
node {
  name: "clip_by_global_norm/Select"
  op: "Select"
  input: "clip_by_global_norm/IsFinite"
  input: "clip_by_global_norm/mul"
  input: "clip_by_global_norm/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_global_norm/mul_1"
  op: "Mul"
  input: "gradients/concat"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_0"
  op: "Identity"
  input: "clip_by_global_norm/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_2"
  op: "Mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/Reshape"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_1"
  op: "Identity"
  input: "clip_by_global_norm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_3"
  op: "Mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_2"
  op: "Identity"
  input: "clip_by_global_norm/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_4"
  op: "Mul"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul_grad/MatMul_1"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_3"
  op: "Identity"
  input: "clip_by_global_norm/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/MatMul"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_5"
  op: "Mul"
  input: "gradients/query_encoder/nbow_encoder/dropout/mul_grad/Mul"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_4"
  op: "Identity"
  input: "clip_by_global_norm/mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dropout/mul"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/mul_6"
  op: "Mul"
  input: "gradients/query_encoder/nbow_encoder/dense/Tensordot/transpose_1_grad/transpose"
  input: "clip_by_global_norm/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/transpose_1"
      }
    }
  }
}
node {
  name: "clip_by_global_norm/clip_by_global_norm/_5"
  op: "Identity"
  input: "clip_by_global_norm/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/Tensordot/transpose_1"
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mul_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "mul_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "mul_1/strided_slice"
  op: "StridedSlice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_grad/Const"
  input: "mul_1/strided_slice/stack"
  input: "mul_1/strided_slice/stack_1"
  input: "mul_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_1/x"
  op: "UnsortedSegmentSum"
  input: "clip_by_global_norm/clip_by_global_norm/_0"
  input: "gradients/concat_1"
  input: "mul_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "mul_1/x"
  input: "Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_2/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "mul_2/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "mul_2/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "mul_2/strided_slice"
  op: "StridedSlice"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/Const"
  input: "mul_2/strided_slice/stack"
  input: "mul_2/strided_slice/stack_1"
  input: "mul_2/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "mul_2/x"
  op: "UnsortedSegmentSum"
  input: "clip_by_global_norm/clip_by_global_norm/_1"
  input: "gradients/code_encoder/java/code2vec_encoder/code2vec_encoder/embedding_lookup_1_grad/Reshape_1"
  input: "mul_2/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tnumsegments"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "mul_2"
  op: "Mul"
  input: "mul_2/x"
  input: "Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_3"
  op: "Mul"
  input: "clip_by_global_norm/clip_by_global_norm/_2"
  input: "Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_4"
  op: "Mul"
  input: "clip_by_global_norm/clip_by_global_norm/_3"
  input: "Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_5"
  op: "Mul"
  input: "clip_by_global_norm/clip_by_global_norm/_4"
  input: "Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_6"
  op: "Mul"
  input: "clip_by_global_norm/clip_by_global_norm/_5"
  input: "Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "beta1_power"
    }
  }
}
node {
  name: "beta1_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "AssignVariableOp"
  input: "beta1_power"
  input: "beta1_power/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta1_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta2_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "beta2_power"
    }
  }
}
node {
  name: "beta2_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "AssignVariableOp"
  input: "beta2_power"
  input: "beta2_power/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "beta2_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\240\206\001\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam/Initializer/zeros"
  op: "Fill"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam/Initializer/zeros/shape_as_tensor"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100000
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\240\206\001\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100000
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\240\206\001\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam/Initializer/zeros"
  op: "Fill"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam/Initializer/zeros/shape_as_tensor"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100000
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\240\206\001\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 100000
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 768
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 768
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam/Initializer/zeros"
  op: "Fill"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam/Initializer/zeros/shape_as_tensor"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 768
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\003\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 768
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1"
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\'\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam/Initializer/zeros"
  op: "Fill"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam/Initializer/zeros/shape_as_tensor"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10000
        }
        dim {
          size: 768
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "query_encoder/nbow_encoder/token_embeddings/Adam"
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam/Assign"
  op: "AssignVariableOp"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\'\000\000\000\003\000\000"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10000
        }
        dim {
          size: 768
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "query_encoder/nbow_encoder/token_embeddings/Adam_1"
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam_1"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/token_embeddings/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 768
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "query_encoder/nbow_encoder/dense/kernel/Adam"
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "query_encoder/nbow_encoder/dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "query_encoder/nbow_encoder/dense/kernel/Adam"
  input: "query_encoder/nbow_encoder/dense/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "query_encoder/nbow_encoder/dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 768
          }
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 768
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "query_encoder/nbow_encoder/dense/kernel/Adam_1"
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "query_encoder/nbow_encoder/dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "query_encoder/nbow_encoder/dense/kernel/Adam_1"
  input: "query_encoder/nbow_encoder/dense/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "query_encoder/nbow_encoder/dense/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "query_encoder/nbow_encoder/dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1"
  input: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1"
  input: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1"
  input: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam"
  input: "code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1"
  input: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_query_encoder/nbow_encoder/token_embeddings/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_query_encoder/nbow_encoder/token_embeddings/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_query_encoder/nbow_encoder/token_embeddings/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "query_encoder/nbow_encoder/token_embeddings"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam"
  input: "query_encoder/nbow_encoder/token_embeddings/Adam_1"
  input: "Adam/update_query_encoder/nbow_encoder/token_embeddings/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_query_encoder/nbow_encoder/token_embeddings/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "mul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/token_embeddings"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_query_encoder/nbow_encoder/dense/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_query_encoder/nbow_encoder/dense/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/update_query_encoder/nbow_encoder/dense/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "query_encoder/nbow_encoder/dense/kernel"
  input: "query_encoder/nbow_encoder/dense/kernel/Adam"
  input: "query_encoder/nbow_encoder/dense/kernel/Adam_1"
  input: "Adam/update_query_encoder/nbow_encoder/dense/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_query_encoder/nbow_encoder/dense/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@query_encoder/nbow_encoder/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/ResourceApplyAdam"
  input: "^Adam/update_query_encoder/nbow_encoder/dense/kernel/ResourceApplyAdam"
  input: "^Adam/update_query_encoder/nbow_encoder/token_embeddings/ResourceApplyAdam"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "Adam/ReadVariableOp"
  input: "Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
}
node {
  name: "Adam/AssignVariableOp"
  op: "AssignVariableOp"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta1_power"
  input: "^Adam/AssignVariableOp"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/ResourceApplyAdam"
  input: "^Adam/update_query_encoder/nbow_encoder/dense/kernel/ResourceApplyAdam"
  input: "^Adam/update_query_encoder/nbow_encoder/token_embeddings/ResourceApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "beta2_power"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/ResourceApplyAdam"
  input: "^Adam/update_query_encoder/nbow_encoder/dense/kernel/ResourceApplyAdam"
  input: "^Adam/update_query_encoder/nbow_encoder/token_embeddings/ResourceApplyAdam"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "Adam/ReadVariableOp_2"
  input: "Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
}
node {
  name: "Adam/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "beta2_power"
  input: "^Adam/AssignVariableOp_1"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/ResourceApplyAdam"
  input: "^Adam/update_query_encoder/nbow_encoder/dense/kernel/ResourceApplyAdam"
  input: "^Adam/update_query_encoder/nbow_encoder/token_embeddings/ResourceApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Adam"
  op: "NoOp"
  input: "^Adam/AssignVariableOp"
  input: "^Adam/AssignVariableOp_1"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/ResourceApplyAdam"
  input: "^Adam/update_code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/ResourceApplyAdam"
  input: "^Adam/update_query_encoder/nbow_encoder/dense/kernel/ResourceApplyAdam"
  input: "^Adam/update_query_encoder/nbow_encoder/token_embeddings/ResourceApplyAdam"
}
node {
  name: "init"
  op: "NoOp"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Adam_1/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/ATTENTION/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Adam_1/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/TRANSFORM/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Adam_1/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/path_embeddings/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Adam_1/Assign"
  input: "^code_encoder/java/code2vec_encoder/code2vec_encoder/token_embeddings/Assign"
  input: "^query_encoder/nbow_encoder/dense/kernel/Adam/Assign"
  input: "^query_encoder/nbow_encoder/dense/kernel/Adam_1/Assign"
  input: "^query_encoder/nbow_encoder/dense/kernel/Assign"
  input: "^query_encoder/nbow_encoder/token_embeddings/Adam/Assign"
  input: "^query_encoder/nbow_encoder/token_embeddings/Adam_1/Assign"
  input: "^query_encoder/nbow_encoder/token_embeddings/Assign"
}
versions {
  producer: 119
}
