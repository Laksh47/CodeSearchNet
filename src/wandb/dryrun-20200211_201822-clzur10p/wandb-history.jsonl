{"train-loss": 1.0762708187103271, "train-mrr": {"_type": "histogram", "values": [170, 16, 0, 4, 2, 3, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1373.1736238002777, "_timestamp": 1581453674.5754805, "_step": 0}
{"train-loss": 1.0007911920547485, "train-mrr": {"_type": "histogram", "values": [155, 23, 7, 6, 2, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1383.0860075950623, "_timestamp": 1581453684.4878643, "_step": 1}
{"train-loss": 1.0003851652145386, "train-mrr": {"_type": "histogram", "values": [140, 24, 6, 4, 3, 3, 4, 3, 0, 0, 3, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1392.9223639965057, "_timestamp": 1581453694.3242207, "_step": 2}
{"train-loss": 1.0001672506332397, "train-mrr": {"_type": "histogram", "values": [144, 19, 7, 6, 0, 2, 0, 2, 0, 0, 6, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1402.618126630783, "_timestamp": 1581453704.0199833, "_step": 3}
{"train-loss": 1.0001260042190552, "train-mrr": {"_type": "histogram", "values": [143, 17, 11, 6, 0, 3, 4, 2, 0, 0, 3, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], "bins": [0.005154639016836882, 0.036243557929992676, 0.06733247637748718, 0.09842139482498169, 0.1295103132724762, 0.1605992317199707, 0.1916881501674652, 0.22277706861495972, 0.2538659870624542, 0.28495490550994873, 0.31604382395744324, 0.34713274240493774, 0.37822166085243225, 0.40931057929992676, 0.44039949774742126, 0.47148841619491577, 0.5025773048400879, 0.5336662530899048, 0.5647551417350769, 0.5958440899848938, 0.6269329786300659, 0.6580219268798828, 0.6891108155250549, 0.7201997637748718, 0.751288652420044, 0.7823776006698608, 0.813466489315033, 0.8445554375648499, 0.875644326210022, 0.9067332744598389, 0.937822163105011, 0.9689111113548279, 1.0]}, "_runtime": 1412.2283413410187, "_timestamp": 1581453713.630198, "_step": 4}
{"train-loss": 1.0005946159362793, "train-mrr": {"_type": "histogram", "values": [135, 19, 5, 9, 4, 3, 4, 4, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1422.040432691574, "_timestamp": 1581453723.4422894, "_step": 5}
{"train-loss": 0.999549150466919, "train-mrr": {"_type": "histogram", "values": [144, 17, 5, 3, 3, 2, 0, 3, 0, 0, 6, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1431.937923192978, "_timestamp": 1581453733.3397799, "_step": 6}
{"train-loss": 1.0000922679901123, "train-mrr": {"_type": "histogram", "values": [129, 19, 18, 8, 0, 5, 3, 3, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1441.7318694591522, "_timestamp": 1581453743.1337261, "_step": 7}
{"train-loss": 1.0011494159698486, "train-mrr": {"_type": "histogram", "values": [146, 17, 8, 4, 4, 2, 1, 2, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1451.4395592212677, "_timestamp": 1581453752.841416, "_step": 8}
{"train-loss": 1.0000507831573486, "train-mrr": {"_type": "histogram", "values": [128, 26, 9, 5, 2, 1, 1, 1, 0, 0, 5, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1461.2223064899445, "_timestamp": 1581453762.6241632, "_step": 9}
{"train-loss": 0.9992212057113647, "train-mrr": {"_type": "histogram", "values": [129, 23, 8, 6, 3, 2, 4, 4, 0, 0, 4, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1470.9861536026, "_timestamp": 1581453772.3880103, "_step": 10}
{"train-loss": 1.0000590085983276, "train-mrr": {"_type": "histogram", "values": [122, 21, 6, 8, 4, 5, 4, 3, 0, 0, 7, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1480.749903678894, "_timestamp": 1581453782.1517603, "_step": 11}
{"train-loss": 1.000033974647522, "train-mrr": {"_type": "histogram", "values": [116, 25, 10, 7, 3, 2, 3, 5, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1490.507643699646, "_timestamp": 1581453791.9095004, "_step": 12}
{"train-loss": 1.0000346899032593, "train-mrr": {"_type": "histogram", "values": [122, 29, 10, 5, 1, 2, 1, 6, 0, 0, 3, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 1500.313915014267, "_timestamp": 1581453801.7157717, "_step": 13}
{"train-loss": 0.9990264773368835, "train-mrr": {"_type": "histogram", "values": [132, 17, 8, 8, 3, 2, 2, 7, 0, 0, 4, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1510.0222764015198, "_timestamp": 1581453811.424133, "_step": 14}
{"train-loss": 1.0000399351119995, "train-mrr": {"_type": "histogram", "values": [136, 19, 7, 6, 1, 1, 5, 7, 0, 0, 4, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], "bins": [0.0051282052882015705, 0.03621795028448105, 0.06730769574642181, 0.09839743375778198, 0.12948718667030334, 0.1605769246816635, 0.19166666269302368, 0.22275641560554504, 0.2538461685180664, 0.2849358916282654, 0.31602564454078674, 0.3471153974533081, 0.3782051205635071, 0.40929487347602844, 0.4403846263885498, 0.4714743494987488, 0.5025641322135925, 0.5336538553237915, 0.5647435784339905, 0.5958333611488342, 0.6269230842590332, 0.6580128073692322, 0.6891025900840759, 0.7201923131942749, 0.7512820363044739, 0.7823718190193176, 0.8134615421295166, 0.8445512652397156, 0.8756410479545593, 0.9067307710647583, 0.9378204941749573, 0.968910276889801, 1.0]}, "_runtime": 1519.7274663448334, "_timestamp": 1581453821.129323, "_step": 15}
{"train-loss": 1.0000344514846802, "train-mrr": {"_type": "histogram", "values": [130, 22, 7, 6, 3, 3, 2, 4, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1529.6635267734528, "_timestamp": 1581453831.0653834, "_step": 16}
{"train-loss": 1.0000518560409546, "train-mrr": {"_type": "histogram", "values": [116, 21, 8, 13, 6, 3, 2, 4, 0, 0, 7, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 1539.6721439361572, "_timestamp": 1581453841.0740006, "_step": 17}
{"train-loss": 1.0000227689743042, "train-mrr": {"_type": "histogram", "values": [121, 17, 5, 4, 4, 4, 4, 5, 0, 0, 7, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1549.3737227916718, "_timestamp": 1581453850.7755795, "_step": 18}
{"train-loss": 1.0000156164169312, "train-mrr": {"_type": "histogram", "values": [113, 18, 8, 5, 2, 1, 6, 7, 0, 0, 11, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22], "bins": [0.0052083334885537624, 0.0362955741584301, 0.0673828125, 0.0984700545668602, 0.1295572966337204, 0.16064453125, 0.1917317658662796, 0.2228190153837204, 0.25390625, 0.2849934995174408, 0.3160807192325592, 0.34716796875, 0.3782552182674408, 0.4093424379825592, 0.4404296875, 0.4715169370174408, 0.5026041865348816, 0.53369140625, 0.5647786259651184, 0.5958659052848816, 0.626953125, 0.6580403447151184, 0.6891276240348816, 0.72021484375, 0.7513020634651184, 0.7823893427848816, 0.8134765625, 0.8445637822151184, 0.8756510615348816, 0.90673828125, 0.9378255009651184, 0.9689127802848816, 1.0]}, "_runtime": 1559.170437335968, "_timestamp": 1581453860.572294, "_step": 19}
{"train-loss": 1.0000181198120117, "train-mrr": {"_type": "histogram", "values": [121, 24, 4, 9, 5, 1, 3, 3, 0, 0, 2, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 1568.9443123340607, "_timestamp": 1581453870.346169, "_step": 20}
{"train-loss": 0.9995705485343933, "train-mrr": {"_type": "histogram", "values": [118, 18, 6, 7, 3, 4, 6, 3, 0, 0, 8, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 1578.6986463069916, "_timestamp": 1581453880.100503, "_step": 21}
{"train-loss": 1.0000196695327759, "train-mrr": {"_type": "histogram", "values": [112, 28, 6, 8, 5, 4, 3, 7, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 1588.3383374214172, "_timestamp": 1581453889.740194, "_step": 22}
{"epoch": 0, "train-loss": 1.0006076970570523, "train-mrr": 0.11275611002575343, "train-time-sec": 222.68629336357117, "val-loss": 1.0000672105111574, "val-mrr": 0.052515175028851155, "val-time-sec": 3.516347646713257, "_runtime": 1598.9169931411743, "_timestamp": 1581453900.3188498, "_step": 23}
{"train-loss": 0.9992972016334534, "train-mrr": {"_type": "histogram", "values": [131, 21, 5, 6, 4, 3, 4, 4, 0, 0, 1, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1626.2599754333496, "_timestamp": 1581453927.661832, "_step": 24}
{"train-loss": 1.0000218152999878, "train-mrr": {"_type": "histogram", "values": [117, 17, 8, 9, 7, 0, 5, 6, 0, 0, 7, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1636.3050384521484, "_timestamp": 1581453937.706895, "_step": 25}
{"train-loss": 0.9994978904724121, "train-mrr": {"_type": "histogram", "values": [116, 21, 10, 6, 4, 3, 3, 3, 0, 0, 4, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 1645.7784025669098, "_timestamp": 1581453947.1802592, "_step": 26}
{"train-loss": 1.0000393390655518, "train-mrr": {"_type": "histogram", "values": [120, 14, 12, 8, 4, 3, 6, 4, 0, 0, 2, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1655.33189535141, "_timestamp": 1581453956.733752, "_step": 27}
{"train-loss": 0.9997212290763855, "train-mrr": {"_type": "histogram", "values": [114, 25, 7, 9, 0, 2, 4, 6, 0, 0, 4, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1664.8526866436005, "_timestamp": 1581453966.2545433, "_step": 28}
{"train-loss": 1.0007622241973877, "train-mrr": {"_type": "histogram", "values": [109, 24, 14, 11, 2, 4, 6, 6, 0, 0, 5, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14], "bins": [0.005102040711790323, 0.036192603409290314, 0.06728316098451614, 0.09837372601032257, 0.1294642835855484, 0.16055484116077423, 0.19164541363716125, 0.22273597121238708, 0.2538265287876129, 0.28491708636283875, 0.3160076439380646, 0.3470982015132904, 0.3781887888908386, 0.40927934646606445, 0.4403699040412903, 0.4714604616165161, 0.5025510191917419, 0.5336415767669678, 0.5647321343421936, 0.5958226919174194, 0.6269132494926453, 0.6580038070678711, 0.6890943646430969, 0.7201849222183228, 0.7512755393981934, 0.7823660969734192, 0.813456654548645, 0.8445472121238708, 0.8756377696990967, 0.9067283272743225, 0.9378188848495483, 0.9689094424247742, 1.0]}, "_runtime": 1674.3329527378082, "_timestamp": 1581453975.7348094, "_step": 29}
{"train-loss": 0.9997435808181763, "train-mrr": {"_type": "histogram", "values": [117, 22, 11, 7, 3, 2, 3, 4, 0, 0, 3, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1683.8405084609985, "_timestamp": 1581453985.2423651, "_step": 30}
{"train-loss": 0.9972652196884155, "train-mrr": {"_type": "histogram", "values": [126, 16, 7, 3, 3, 0, 5, 5, 0, 0, 8, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20], "bins": [0.005154639016836882, 0.036243557929992676, 0.06733247637748718, 0.09842139482498169, 0.1295103132724762, 0.1605992317199707, 0.1916881501674652, 0.22277706861495972, 0.2538659870624542, 0.28495490550994873, 0.31604382395744324, 0.34713274240493774, 0.37822166085243225, 0.40931057929992676, 0.44039949774742126, 0.47148841619491577, 0.5025773048400879, 0.5336662530899048, 0.5647551417350769, 0.5958440899848938, 0.6269329786300659, 0.6580219268798828, 0.6891108155250549, 0.7201997637748718, 0.751288652420044, 0.7823776006698608, 0.813466489315033, 0.8445554375648499, 0.875644326210022, 0.9067332744598389, 0.937822163105011, 0.9689111113548279, 1.0]}, "_runtime": 1693.3536014556885, "_timestamp": 1581453994.755458, "_step": 31}
{"train-loss": 1.0004160404205322, "train-mrr": {"_type": "histogram", "values": [138, 17, 8, 6, 0, 1, 5, 0, 0, 0, 8, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1702.795908689499, "_timestamp": 1581454004.1977654, "_step": 32}
{"train-loss": 1.0000497102737427, "train-mrr": {"_type": "histogram", "values": [129, 20, 7, 7, 3, 1, 4, 7, 0, 0, 3, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1712.2640092372894, "_timestamp": 1581454013.665866, "_step": 33}
{"train-loss": 0.9970802068710327, "train-mrr": {"_type": "histogram", "values": [117, 24, 10, 4, 3, 2, 3, 4, 0, 0, 8, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16], "bins": [0.005102040711790323, 0.036192603409290314, 0.06728316098451614, 0.09837372601032257, 0.1294642835855484, 0.16055484116077423, 0.19164541363716125, 0.22273597121238708, 0.2538265287876129, 0.28491708636283875, 0.3160076439380646, 0.3470982015132904, 0.3781887888908386, 0.40927934646606445, 0.4403699040412903, 0.4714604616165161, 0.5025510191917419, 0.5336415767669678, 0.5647321343421936, 0.5958226919174194, 0.6269132494926453, 0.6580038070678711, 0.6890943646430969, 0.7201849222183228, 0.7512755393981934, 0.7823660969734192, 0.813456654548645, 0.8445472121238708, 0.8756377696990967, 0.9067283272743225, 0.9378188848495483, 0.9689094424247742, 1.0]}, "_runtime": 1721.7227802276611, "_timestamp": 1581454023.124637, "_step": 34}
{"train-loss": 1.0000637769699097, "train-mrr": {"_type": "histogram", "values": [133, 18, 11, 5, 0, 2, 5, 6, 0, 0, 2, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1731.1999444961548, "_timestamp": 1581454032.6018012, "_step": 35}
{"train-loss": 1.0000238418579102, "train-mrr": {"_type": "histogram", "values": [128, 22, 3, 5, 3, 3, 0, 8, 0, 0, 3, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 1740.721153497696, "_timestamp": 1581454042.1230102, "_step": 36}
{"train-loss": 0.9998236298561096, "train-mrr": {"_type": "histogram", "values": [127, 18, 8, 4, 1, 6, 2, 8, 0, 0, 3, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1750.2005307674408, "_timestamp": 1581454051.6023874, "_step": 37}
{"train-loss": 0.9998675584793091, "train-mrr": {"_type": "histogram", "values": [130, 15, 4, 3, 5, 5, 8, 3, 0, 0, 5, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1759.65482711792, "_timestamp": 1581454061.0566838, "_step": 38}
{"train-loss": 1.000032663345337, "train-mrr": {"_type": "histogram", "values": [127, 24, 7, 5, 3, 5, 4, 2, 0, 0, 4, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1769.167412519455, "_timestamp": 1581454070.5692692, "_step": 39}
{"train-loss": 0.9993288516998291, "train-mrr": {"_type": "histogram", "values": [123, 20, 14, 4, 2, 3, 5, 3, 0, 0, 4, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 1778.6556372642517, "_timestamp": 1581454080.057494, "_step": 40}
{"train-loss": 0.9983566999435425, "train-mrr": {"_type": "histogram", "values": [121, 22, 9, 3, 5, 5, 1, 2, 0, 0, 8, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 1788.1166772842407, "_timestamp": 1581454089.518534, "_step": 41}
{"train-loss": 0.9979220628738403, "train-mrr": {"_type": "histogram", "values": [141, 23, 6, 10, 1, 2, 2, 3, 0, 0, 1, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 1797.6196534633636, "_timestamp": 1581454099.0215101, "_step": 42}
{"train-loss": 1.000235676765442, "train-mrr": {"_type": "histogram", "values": [155, 19, 5, 3, 3, 4, 4, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1807.1246764659882, "_timestamp": 1581454108.5265331, "_step": 43}
{"train-loss": 1.0000568628311157, "train-mrr": {"_type": "histogram", "values": [147, 20, 7, 2, 2, 4, 2, 3, 0, 0, 3, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1816.559140920639, "_timestamp": 1581454117.9609976, "_step": 44}
{"train-loss": 0.9999182224273682, "train-mrr": {"_type": "histogram", "values": [163, 15, 4, 4, 1, 0, 1, 2, 0, 0, 4, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1826.0442535877228, "_timestamp": 1581454127.4461102, "_step": 45}
{"train-loss": 1.000034213066101, "train-mrr": {"_type": "histogram", "values": [151, 20, 5, 6, 2, 1, 2, 2, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 1835.5578136444092, "_timestamp": 1581454136.9596703, "_step": 46}
{"epoch": 1, "train-loss": 0.9992215357668383, "train-mrr": 0.1240536934620058, "train-time-sec": 216.16491031646729, "val-loss": 1.0000933189141124, "val-mrr": 0.03779891494073366, "val-time-sec": 3.4155874252319336, "_runtime": 1845.7186052799225, "_timestamp": 1581454147.120462, "_step": 47}
{"train-loss": 1.000051498413086, "train-mrr": {"_type": "histogram", "values": [158, 19, 3, 7, 1, 2, 0, 3, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1845.8738043308258, "_timestamp": 1581454147.275661, "_step": 48}
{"train-loss": 1.000038504600525, "train-mrr": {"_type": "histogram", "values": [151, 10, 9, 8, 1, 1, 2, 3, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1855.3866045475006, "_timestamp": 1581454156.7884612, "_step": 49}
{"train-loss": 1.0000265836715698, "train-mrr": {"_type": "histogram", "values": [142, 15, 9, 4, 0, 0, 4, 5, 0, 0, 6, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1864.8661906719208, "_timestamp": 1581454166.2680473, "_step": 50}
{"train-loss": 1.000022053718567, "train-mrr": {"_type": "histogram", "values": [150, 13, 9, 5, 2, 7, 3, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 1874.3153848648071, "_timestamp": 1581454175.7172415, "_step": 51}
{"train-loss": 0.9992763996124268, "train-mrr": {"_type": "histogram", "values": [144, 25, 2, 4, 2, 2, 3, 4, 0, 0, 5, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1883.8263635635376, "_timestamp": 1581454185.2282202, "_step": 52}
{"train-loss": 0.9992401599884033, "train-mrr": {"_type": "histogram", "values": [155, 16, 4, 5, 1, 3, 1, 1, 0, 0, 4, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1893.2860598564148, "_timestamp": 1581454194.6879165, "_step": 53}
{"train-loss": 0.9996861219406128, "train-mrr": {"_type": "histogram", "values": [162, 6, 9, 5, 1, 0, 5, 3, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 1902.7873530387878, "_timestamp": 1581454204.1892097, "_step": 54}
{"train-loss": 0.9986531734466553, "train-mrr": {"_type": "histogram", "values": [166, 14, 7, 5, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 1912.2748355865479, "_timestamp": 1581454213.6766922, "_step": 55}
{"train-loss": 1.000024437904358, "train-mrr": {"_type": "histogram", "values": [163, 16, 7, 2, 2, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1921.694828748703, "_timestamp": 1581454223.0966854, "_step": 56}
{"train-loss": 0.9973021745681763, "train-mrr": {"_type": "histogram", "values": [156, 19, 8, 5, 1, 3, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1931.1991167068481, "_timestamp": 1581454232.6009734, "_step": 57}
{"train-loss": 1.0021910667419434, "train-mrr": {"_type": "histogram", "values": [156, 18, 1, 1, 3, 1, 2, 3, 0, 0, 4, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1940.6910746097565, "_timestamp": 1581454242.0929313, "_step": 58}
{"train-loss": 1.0000085830688477, "train-mrr": {"_type": "histogram", "values": [165, 12, 6, 3, 1, 2, 2, 3, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1950.1502339839935, "_timestamp": 1581454251.5520906, "_step": 59}
{"train-loss": 1.0002272129058838, "train-mrr": {"_type": "histogram", "values": [159, 18, 6, 5, 3, 2, 0, 2, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1959.6721942424774, "_timestamp": 1581454261.074051, "_step": 60}
{"train-loss": 1.0000555515289307, "train-mrr": {"_type": "histogram", "values": [168, 15, 5, 0, 2, 0, 3, 1, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1969.1190853118896, "_timestamp": 1581454270.520942, "_step": 61}
{"train-loss": 1.0000450611114502, "train-mrr": {"_type": "histogram", "values": [170, 10, 6, 6, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 1978.6169052124023, "_timestamp": 1581454280.0187619, "_step": 62}
{"train-loss": 0.9988649487495422, "train-mrr": {"_type": "histogram", "values": [172, 11, 4, 3, 3, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 1988.0740554332733, "_timestamp": 1581454289.475912, "_step": 63}
{"train-loss": 1.0002745389938354, "train-mrr": {"_type": "histogram", "values": [168, 17, 5, 2, 1, 1, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 1997.568067073822, "_timestamp": 1581454298.9699237, "_step": 64}
{"train-loss": 1.0000191926956177, "train-mrr": {"_type": "histogram", "values": [176, 12, 2, 3, 3, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2007.005345582962, "_timestamp": 1581454308.4072022, "_step": 65}
{"train-loss": 1.000040054321289, "train-mrr": {"_type": "histogram", "values": [167, 16, 5, 4, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2016.4222123622894, "_timestamp": 1581454317.824069, "_step": 66}
{"train-loss": 1.000008225440979, "train-mrr": {"_type": "histogram", "values": [167, 14, 9, 3, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2025.8817296028137, "_timestamp": 1581454327.2835863, "_step": 67}
{"train-loss": 1.0000044107437134, "train-mrr": {"_type": "histogram", "values": [168, 15, 7, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2035.3646910190582, "_timestamp": 1581454336.7665477, "_step": 68}
{"train-loss": 1.0000139474868774, "train-mrr": {"_type": "histogram", "values": [148, 26, 4, 8, 0, 2, 1, 3, 1, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 2044.8468430042267, "_timestamp": 1581454346.2486997, "_step": 69}
{"train-loss": 1.000016689300537, "train-mrr": {"_type": "histogram", "values": [175, 16, 4, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2054.3482933044434, "_timestamp": 1581454355.75015, "_step": 70}
{"epoch": 2, "train-loss": 0.9997074952165426, "train-mrr": 0.05020113310291314, "train-time-sec": 215.331139087677, "val-loss": 1.0000898461592824, "val-mrr": 0.02324687499749033, "val-time-sec": 3.451503038406372, "_runtime": 2064.553726196289, "_timestamp": 1581454365.9555829, "_step": 71}
{"train-loss": 0.9980732798576355, "train-mrr": {"_type": "histogram", "values": [171, 16, 3, 3, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 2064.6950829029083, "_timestamp": 1581454366.0969396, "_step": 72}
{"train-loss": 0.9982711672782898, "train-mrr": {"_type": "histogram", "values": [168, 17, 3, 6, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2074.2093901634216, "_timestamp": 1581454375.6112468, "_step": 73}
{"train-loss": 1.0000132322311401, "train-mrr": {"_type": "histogram", "values": [173, 16, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2083.710372209549, "_timestamp": 1581454385.1122289, "_step": 74}
{"train-loss": 1.0000126361846924, "train-mrr": {"_type": "histogram", "values": [163, 20, 4, 3, 2, 3, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2093.2200965881348, "_timestamp": 1581454394.6219532, "_step": 75}
{"train-loss": 1.000011682510376, "train-mrr": {"_type": "histogram", "values": [175, 15, 1, 1, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2102.745213031769, "_timestamp": 1581454404.1470697, "_step": 76}
{"train-loss": 1.0000120401382446, "train-mrr": {"_type": "histogram", "values": [167, 14, 5, 5, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 2112.1559619903564, "_timestamp": 1581454413.5578187, "_step": 77}
{"train-loss": 1.0000077486038208, "train-mrr": {"_type": "histogram", "values": [174, 9, 5, 3, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2121.621448993683, "_timestamp": 1581454423.0233057, "_step": 78}
{"train-loss": 1.0000349283218384, "train-mrr": {"_type": "histogram", "values": [172, 12, 3, 4, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2131.132912635803, "_timestamp": 1581454432.5347693, "_step": 79}
{"train-loss": 1.0000042915344238, "train-mrr": {"_type": "histogram", "values": [178, 12, 2, 1, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2140.649870157242, "_timestamp": 1581454442.0517268, "_step": 80}
{"train-loss": 0.9980071187019348, "train-mrr": {"_type": "histogram", "values": [161, 15, 7, 4, 5, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2150.1044256687164, "_timestamp": 1581454451.5062823, "_step": 81}
{"train-loss": 1.001431941986084, "train-mrr": {"_type": "histogram", "values": [174, 13, 5, 4, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2159.567043542862, "_timestamp": 1581454460.9689002, "_step": 82}
{"train-loss": 1.0006200075149536, "train-mrr": {"_type": "histogram", "values": [178, 13, 3, 2, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2169.082696914673, "_timestamp": 1581454470.4845536, "_step": 83}
{"train-loss": 1.0007750988006592, "train-mrr": {"_type": "histogram", "values": [182, 12, 1, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2178.582359313965, "_timestamp": 1581454479.984216, "_step": 84}
{"train-loss": 1.0000052452087402, "train-mrr": {"_type": "histogram", "values": [182, 8, 2, 2, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2188.0887830257416, "_timestamp": 1581454489.4906397, "_step": 85}
{"train-loss": 0.997495174407959, "train-mrr": {"_type": "histogram", "values": [177, 10, 4, 2, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2197.5577676296234, "_timestamp": 1581454498.9596243, "_step": 86}
{"train-loss": 0.9994316697120667, "train-mrr": {"_type": "histogram", "values": [181, 9, 2, 2, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2207.005204439163, "_timestamp": 1581454508.407061, "_step": 87}
{"train-loss": 1.0001778602600098, "train-mrr": {"_type": "histogram", "values": [183, 7, 2, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2216.546612739563, "_timestamp": 1581454517.9484694, "_step": 88}
{"train-loss": 1.0000039339065552, "train-mrr": {"_type": "histogram", "values": [180, 9, 2, 3, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2226.007822751999, "_timestamp": 1581454527.4096794, "_step": 89}
{"train-loss": 1.0000051259994507, "train-mrr": {"_type": "histogram", "values": [181, 7, 1, 4, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2235.4759154319763, "_timestamp": 1581454536.877772, "_step": 90}
{"train-loss": 0.9976534247398376, "train-mrr": {"_type": "histogram", "values": [184, 4, 2, 3, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 2244.96634888649, "_timestamp": 1581454546.3682055, "_step": 91}
{"train-loss": 0.9996892809867859, "train-mrr": {"_type": "histogram", "values": [188, 5, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2254.4451820850372, "_timestamp": 1581454555.8470387, "_step": 92}
{"train-loss": 1.0000033378601074, "train-mrr": {"_type": "histogram", "values": [177, 9, 6, 3, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2263.8564167022705, "_timestamp": 1581454565.2582734, "_step": 93}
{"train-loss": 1.0000028610229492, "train-mrr": {"_type": "histogram", "values": [177, 10, 6, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2273.3635733127594, "_timestamp": 1581454574.76543, "_step": 94}
{"epoch": 3, "train-loss": 0.9996365374872382, "train-mrr": 0.030124654194313875, "train-time-sec": 215.53673934936523, "val-loss": 1.000144167950279, "val-mrr": 0.02335590340589222, "val-time-sec": 3.4238815307617188, "_runtime": 2283.55108499527, "_timestamp": 1581454584.9529417, "_step": 95}
{"train-loss": 1.0003128051757812, "train-mrr": {"_type": "histogram", "values": [174, 16, 2, 2, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2283.7055213451385, "_timestamp": 1581454585.107378, "_step": 96}
{"train-loss": 0.9972161650657654, "train-mrr": {"_type": "histogram", "values": [180, 7, 2, 3, 2, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2293.1957128047943, "_timestamp": 1581454594.5975695, "_step": 97}
{"train-loss": 1.000003695487976, "train-mrr": {"_type": "histogram", "values": [182, 7, 3, 4, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2302.6999526023865, "_timestamp": 1581454604.1018093, "_step": 98}
{"train-loss": 0.9973000288009644, "train-mrr": {"_type": "histogram", "values": [176, 12, 6, 1, 1, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 2312.194652080536, "_timestamp": 1581454613.5965087, "_step": 99}
{"train-loss": 1.0000988245010376, "train-mrr": {"_type": "histogram", "values": [164, 18, 2, 7, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2321.679259777069, "_timestamp": 1581454623.0811164, "_step": 100}
{"train-loss": 1.0000073909759521, "train-mrr": {"_type": "histogram", "values": [179, 11, 4, 1, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2331.136255502701, "_timestamp": 1581454632.5381122, "_step": 101}
{"train-loss": 0.9998433589935303, "train-mrr": {"_type": "histogram", "values": [182, 12, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2340.5906150341034, "_timestamp": 1581454641.9924717, "_step": 102}
{"train-loss": 0.9999411702156067, "train-mrr": {"_type": "histogram", "values": [173, 8, 2, 1, 3, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], "bins": [0.0051282052882015705, 0.03621795028448105, 0.06730769574642181, 0.09839743375778198, 0.12948718667030334, 0.1605769246816635, 0.19166666269302368, 0.22275641560554504, 0.2538461685180664, 0.2849358916282654, 0.31602564454078674, 0.3471153974533081, 0.3782051205635071, 0.40929487347602844, 0.4403846263885498, 0.4714743494987488, 0.5025641322135925, 0.5336538553237915, 0.5647435784339905, 0.5958333611488342, 0.6269230842590332, 0.6580128073692322, 0.6891025900840759, 0.7201923131942749, 0.7512820363044739, 0.7823718190193176, 0.8134615421295166, 0.8445512652397156, 0.8756410479545593, 0.9067307710647583, 0.9378204941749573, 0.968910276889801, 1.0]}, "_runtime": 2350.095098733902, "_timestamp": 1581454651.4969554, "_step": 103}
{"train-loss": 1.0000030994415283, "train-mrr": {"_type": "histogram", "values": [184, 4, 2, 3, 3, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2359.55597448349, "_timestamp": 1581454660.9578311, "_step": 104}
{"train-loss": 1.0000057220458984, "train-mrr": {"_type": "histogram", "values": [183, 5, 4, 3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2369.0245752334595, "_timestamp": 1581454670.426432, "_step": 105}
{"train-loss": 0.9994168877601624, "train-mrr": {"_type": "histogram", "values": [174, 17, 1, 2, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2378.5363969802856, "_timestamp": 1581454679.9382536, "_step": 106}
{"train-loss": 0.9990832805633545, "train-mrr": {"_type": "histogram", "values": [186, 3, 1, 3, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 2387.9923446178436, "_timestamp": 1581454689.3942013, "_step": 107}
{"train-loss": 1.0003219842910767, "train-mrr": {"_type": "histogram", "values": [154, 22, 10, 6, 3, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 2397.5235481262207, "_timestamp": 1581454698.9254048, "_step": 108}
{"train-loss": 1.0000085830688477, "train-mrr": {"_type": "histogram", "values": [118, 42, 12, 8, 6, 1, 2, 1, 3, 1, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.012656250037252903, 0.02031249925494194, 0.027968749403953552, 0.035624999552965164, 0.043281249701976776, 0.05093749985098839, 0.05859375, 0.06624999642372131, 0.07390625029802322, 0.08156249672174454, 0.08921875059604645, 0.09687499701976776, 0.10453125089406967, 0.11218749731779099, 0.1198437511920929, 0.1274999976158142, 0.13515624403953552, 0.14281250536441803, 0.15046875178813934, 0.15812499821186066, 0.16578124463558197, 0.17343750596046448, 0.1810937523841858, 0.1887499988079071, 0.19640624523162842, 0.20406250655651093, 0.21171875298023224, 0.21937499940395355, 0.22703124582767487, 0.23468750715255737, 0.2423437535762787, 0.25]}, "_runtime": 2406.991030693054, "_timestamp": 1581454708.3928874, "_step": 109}
{"train-loss": 1.0000412464141846, "train-mrr": {"_type": "histogram", "values": [155, 22, 7, 6, 1, 0, 3, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 2416.430813074112, "_timestamp": 1581454717.8326697, "_step": 110}
{"train-loss": 1.00011146068573, "train-mrr": {"_type": "histogram", "values": [174, 12, 8, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2425.8744904994965, "_timestamp": 1581454727.2763472, "_step": 111}
{"train-loss": 0.997945249080658, "train-mrr": {"_type": "histogram", "values": [174, 12, 7, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2435.343815803528, "_timestamp": 1581454736.7456725, "_step": 112}
{"train-loss": 0.9978988766670227, "train-mrr": {"_type": "histogram", "values": [173, 14, 2, 1, 2, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 2444.856896162033, "_timestamp": 1581454746.2587528, "_step": 113}
{"train-loss": 1.0000381469726562, "train-mrr": {"_type": "histogram", "values": [177, 11, 5, 2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2454.2982182502747, "_timestamp": 1581454755.700075, "_step": 114}
{"train-loss": 1.0000532865524292, "train-mrr": {"_type": "histogram", "values": [174, 18, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2463.7533371448517, "_timestamp": 1581454765.1551938, "_step": 115}
{"train-loss": 0.9970430731773376, "train-mrr": {"_type": "histogram", "values": [170, 20, 4, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2473.2056844234467, "_timestamp": 1581454774.607541, "_step": 116}
{"train-loss": 0.9970754384994507, "train-mrr": {"_type": "histogram", "values": [171, 16, 5, 2, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 2482.6682081222534, "_timestamp": 1581454784.0700648, "_step": 117}
{"train-loss": 0.9985921382904053, "train-mrr": {"_type": "histogram", "values": [173, 10, 7, 1, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 2492.1287083625793, "_timestamp": 1581454793.530565, "_step": 118}
{"epoch": 4, "train-loss": 0.9994727282352011, "train-mrr": 0.02937561211241803, "train-time-sec": 215.24384474754333, "val-loss": 1.0001602141480697, "val-mrr": 0.023533457878388855, "val-time-sec": 3.4098551273345947, "_runtime": 2502.2508416175842, "_timestamp": 1581454803.6526983, "_step": 119}
{"train-loss": 1.000034213066101, "train-mrr": {"_type": "histogram", "values": [110, 39, 14, 7, 7, 3, 5, 5, 3, 0, 1, 2, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.011093749664723873, 0.01718750037252903, 0.023281250149011612, 0.029374999925494194, 0.035468749701976776, 0.04156250134110451, 0.04765624925494194, 0.05375000089406967, 0.0598437525331974, 0.06593750417232513, 0.07203125208616257, 0.078125, 0.08421874791383743, 0.09031250327825546, 0.0964062511920929, 0.10249999910593033, 0.10859375447034836, 0.11468750238418579, 0.12078125029802322, 0.12687499821186066, 0.1329687535762787, 0.13906250894069672, 0.14515624940395355, 0.15125000476837158, 0.15734374523162842, 0.16343750059604645, 0.16953125596046448, 0.1756249964237213, 0.18171875178813934, 0.18781250715255737, 0.1939062476158142, 0.20000000298023224]}, "_runtime": 2502.3904678821564, "_timestamp": 1581454803.7923245, "_step": 120}
{"train-loss": 1.0000112056732178, "train-mrr": {"_type": "histogram", "values": [157, 23, 7, 4, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 2511.8246927261353, "_timestamp": 1581454813.2265494, "_step": 121}
{"train-loss": 1.0000433921813965, "train-mrr": {"_type": "histogram", "values": [178, 8, 7, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2521.344980955124, "_timestamp": 1581454822.7468376, "_step": 122}
{"train-loss": 0.9996492862701416, "train-mrr": {"_type": "histogram", "values": [170, 20, 2, 5, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2530.84019947052, "_timestamp": 1581454832.2420561, "_step": 123}
{"train-loss": 0.9991146922111511, "train-mrr": {"_type": "histogram", "values": [180, 14, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2540.3078122138977, "_timestamp": 1581454841.7096689, "_step": 124}
{"train-loss": 0.9970577955245972, "train-mrr": {"_type": "histogram", "values": [166, 18, 2, 3, 0, 2, 2, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2549.7582774162292, "_timestamp": 1581454851.160134, "_step": 125}
{"train-loss": 0.9971531629562378, "train-mrr": {"_type": "histogram", "values": [171, 16, 1, 5, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2559.287368297577, "_timestamp": 1581454860.689225, "_step": 126}
{"train-loss": 0.9970093369483948, "train-mrr": {"_type": "histogram", "values": [166, 19, 4, 3, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 2568.792713165283, "_timestamp": 1581454870.1945698, "_step": 127}
{"train-loss": 1.0000905990600586, "train-mrr": {"_type": "histogram", "values": [176, 11, 3, 3, 1, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2578.272622346878, "_timestamp": 1581454879.674479, "_step": 128}
{"train-loss": 1.0000081062316895, "train-mrr": {"_type": "histogram", "values": [182, 9, 4, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2587.7669088840485, "_timestamp": 1581454889.1687655, "_step": 129}
{"train-loss": 0.9997143745422363, "train-mrr": {"_type": "histogram", "values": [182, 6, 1, 4, 0, 0, 1, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2597.2374274730682, "_timestamp": 1581454898.6392841, "_step": 130}
{"train-loss": 0.9968398213386536, "train-mrr": {"_type": "histogram", "values": [180, 13, 0, 1, 0, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 2606.715090036392, "_timestamp": 1581454908.1169467, "_step": 131}
{"train-loss": 0.9969050884246826, "train-mrr": {"_type": "histogram", "values": [179, 13, 0, 1, 0, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2616.196513414383, "_timestamp": 1581454917.59837, "_step": 132}
{"train-loss": 0.9961099028587341, "train-mrr": {"_type": "histogram", "values": [176, 11, 3, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6], "bins": [0.005102040711790323, 0.036192603409290314, 0.06728316098451614, 0.09837372601032257, 0.1294642835855484, 0.16055484116077423, 0.19164541363716125, 0.22273597121238708, 0.2538265287876129, 0.28491708636283875, 0.3160076439380646, 0.3470982015132904, 0.3781887888908386, 0.40927934646606445, 0.4403699040412903, 0.4714604616165161, 0.5025510191917419, 0.5336415767669678, 0.5647321343421936, 0.5958226919174194, 0.6269132494926453, 0.6580038070678711, 0.6890943646430969, 0.7201849222183228, 0.7512755393981934, 0.7823660969734192, 0.813456654548645, 0.8445472121238708, 0.8756377696990967, 0.9067283272743225, 0.9378188848495483, 0.9689094424247742, 1.0]}, "_runtime": 2625.6989936828613, "_timestamp": 1581454927.1008503, "_step": 133}
{"train-loss": 1.0001754760742188, "train-mrr": {"_type": "histogram", "values": [185, 10, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2635.1824650764465, "_timestamp": 1581454936.5843217, "_step": 134}
{"train-loss": 0.9968442320823669, "train-mrr": {"_type": "histogram", "values": [174, 17, 1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 2644.64821267128, "_timestamp": 1581454946.0500693, "_step": 135}
{"train-loss": 0.9966598749160767, "train-mrr": {"_type": "histogram", "values": [177, 16, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2654.1572115421295, "_timestamp": 1581454955.5590682, "_step": 136}
{"train-loss": 1.0004217624664307, "train-mrr": {"_type": "histogram", "values": [181, 10, 1, 1, 0, 2, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2663.665100812912, "_timestamp": 1581454965.0669575, "_step": 137}
{"train-loss": 1.0000064373016357, "train-mrr": {"_type": "histogram", "values": [176, 16, 2, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2673.137220144272, "_timestamp": 1581454974.5390768, "_step": 138}
{"train-loss": 1.0005414485931396, "train-mrr": {"_type": "histogram", "values": [179, 9, 6, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2682.645126104355, "_timestamp": 1581454984.0469828, "_step": 139}
{"train-loss": 1.000004768371582, "train-mrr": {"_type": "histogram", "values": [174, 17, 0, 1, 0, 0, 2, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2692.134355545044, "_timestamp": 1581454993.5362122, "_step": 140}
{"train-loss": 0.9966541528701782, "train-mrr": {"_type": "histogram", "values": [184, 6, 2, 1, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2701.7314891815186, "_timestamp": 1581455003.1333458, "_step": 141}
{"train-loss": 1.0000061988830566, "train-mrr": {"_type": "histogram", "values": [176, 15, 0, 1, 2, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2711.3666088581085, "_timestamp": 1581455012.7684655, "_step": 142}
{"epoch": 5, "train-loss": 0.9991152873393935, "train-mrr": 0.029834266400987835, "train-time-sec": 215.8973879814148, "val-loss": 1.0002172840268988, "val-mrr": 0.023169466727658322, "val-time-sec": 3.4477744102478027, "_runtime": 2721.631586074829, "_timestamp": 1581455023.0334427, "_step": 143}
{"train-loss": 0.9968898892402649, "train-mrr": {"_type": "histogram", "values": [178, 13, 0, 1, 1, 1, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2721.7811262607574, "_timestamp": 1581455023.182983, "_step": 144}
{"train-loss": 1.0001312494277954, "train-mrr": {"_type": "histogram", "values": [184, 4, 2, 2, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2731.261803627014, "_timestamp": 1581455032.6636603, "_step": 145}
{"train-loss": 0.9965718984603882, "train-mrr": {"_type": "histogram", "values": [184, 4, 4, 3, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2740.753753185272, "_timestamp": 1581455042.1556098, "_step": 146}
{"train-loss": 0.9964700937271118, "train-mrr": {"_type": "histogram", "values": [190, 1, 3, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2750.2356102466583, "_timestamp": 1581455051.637467, "_step": 147}
{"train-loss": 0.9967033863067627, "train-mrr": {"_type": "histogram", "values": [183, 4, 6, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2759.743152141571, "_timestamp": 1581455061.1450088, "_step": 148}
{"train-loss": 1.000005841255188, "train-mrr": {"_type": "histogram", "values": [187, 4, 4, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2769.2398409843445, "_timestamp": 1581455070.6416976, "_step": 149}
{"train-loss": 1.0000425577163696, "train-mrr": {"_type": "histogram", "values": [174, 13, 5, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2778.7180359363556, "_timestamp": 1581455080.1198926, "_step": 150}
{"train-loss": 0.9983708262443542, "train-mrr": {"_type": "histogram", "values": [184, 10, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2788.2091012001038, "_timestamp": 1581455089.6109579, "_step": 151}
{"train-loss": 1.000015377998352, "train-mrr": {"_type": "histogram", "values": [178, 12, 2, 4, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2797.667688369751, "_timestamp": 1581455099.069545, "_step": 152}
{"train-loss": 0.9986103773117065, "train-mrr": {"_type": "histogram", "values": [183, 6, 3, 3, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 2807.144832611084, "_timestamp": 1581455108.5466893, "_step": 153}
{"train-loss": 0.9989974498748779, "train-mrr": {"_type": "histogram", "values": [183, 5, 0, 1, 1, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 2816.581048965454, "_timestamp": 1581455117.9829056, "_step": 154}
{"train-loss": 1.0000030994415283, "train-mrr": {"_type": "histogram", "values": [142, 29, 10, 10, 0, 0, 1, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 2826.012366294861, "_timestamp": 1581455127.414223, "_step": 155}
{"train-loss": 0.9983917474746704, "train-mrr": {"_type": "histogram", "values": [184, 5, 2, 2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 2835.520439147949, "_timestamp": 1581455136.9222958, "_step": 156}
{"train-loss": 1.0013054609298706, "train-mrr": {"_type": "histogram", "values": [177, 10, 0, 4, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 2845.0363688468933, "_timestamp": 1581455146.4382255, "_step": 157}
{"train-loss": 0.9984250068664551, "train-mrr": {"_type": "histogram", "values": [174, 10, 3, 3, 1, 0, 2, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2854.549989461899, "_timestamp": 1581455155.9518461, "_step": 158}
{"train-loss": 0.9975062012672424, "train-mrr": {"_type": "histogram", "values": [187, 2, 1, 5, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2864.0154395103455, "_timestamp": 1581455165.4172962, "_step": 159}
{"train-loss": 1.0000028610229492, "train-mrr": {"_type": "histogram", "values": [173, 18, 2, 1, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2873.513217687607, "_timestamp": 1581455174.9150743, "_step": 160}
{"train-loss": 1.0000187158584595, "train-mrr": {"_type": "histogram", "values": [106, 41, 11, 15, 7, 3, 3, 1, 3, 0, 2, 0, 0, 1, 1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.010052083060145378, 0.01510416716337204, 0.0201562512665987, 0.025208333507180214, 0.030260417610406876, 0.03531249985098839, 0.0403645858168602, 0.04541666805744171, 0.050468750298023224, 0.055520836263895035, 0.06057291850447655, 0.06562500447034836, 0.07067708671092987, 0.07572916895151138, 0.0807812511920929, 0.08583333343267441, 0.09088541567325592, 0.09593750536441803, 0.10098958760499954, 0.10604166984558105, 0.11109375208616257, 0.11614583432674408, 0.12119791656732559, 0.1262499988079071, 0.1313020884990692, 0.13635416328907013, 0.14140625298023224, 0.14645834267139435, 0.15151041746139526, 0.15656250715255737, 0.1616145819425583, 0.1666666716337204]}, "_runtime": 2882.972400665283, "_timestamp": 1581455184.3742573, "_step": 161}
{"train-loss": 1.0000061988830566, "train-mrr": {"_type": "histogram", "values": [158, 18, 8, 4, 7, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 2892.4868125915527, "_timestamp": 1581455193.8886693, "_step": 162}
{"train-loss": 1.0000211000442505, "train-mrr": {"_type": "histogram", "values": [176, 13, 3, 2, 0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2902.0077028274536, "_timestamp": 1581455203.4095595, "_step": 163}
{"train-loss": 0.9989351630210876, "train-mrr": {"_type": "histogram", "values": [171, 14, 4, 0, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2911.4874172210693, "_timestamp": 1581455212.889274, "_step": 164}
{"train-loss": 1.0000712871551514, "train-mrr": {"_type": "histogram", "values": [173, 17, 4, 2, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2920.957593679428, "_timestamp": 1581455222.3594503, "_step": 165}
{"train-loss": 1.0000088214874268, "train-mrr": {"_type": "histogram", "values": [175, 11, 2, 1, 0, 2, 2, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2930.4764857292175, "_timestamp": 1581455231.8783424, "_step": 166}
{"epoch": 6, "train-loss": 0.9994835028503563, "train-mrr": 0.028484579647405885, "train-time-sec": 215.58387112617493, "val-loss": 1.0001638814022666, "val-mrr": 0.021808204196001355, "val-time-sec": 3.430100440979004, "_runtime": 2940.686324596405, "_timestamp": 1581455242.0881813, "_step": 167}
{"train-loss": 0.9999794960021973, "train-mrr": {"_type": "histogram", "values": [184, 6, 2, 3, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2940.822638273239, "_timestamp": 1581455242.224495, "_step": 168}
{"train-loss": 0.9983762502670288, "train-mrr": {"_type": "histogram", "values": [181, 6, 4, 2, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2950.2718317508698, "_timestamp": 1581455251.6736884, "_step": 169}
{"train-loss": 0.9999597668647766, "train-mrr": {"_type": "histogram", "values": [183, 4, 3, 2, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2959.785662651062, "_timestamp": 1581455261.1875193, "_step": 170}
{"train-loss": 1.0000048875808716, "train-mrr": {"_type": "histogram", "values": [171, 12, 2, 4, 0, 1, 2, 0, 3, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 2969.2660694122314, "_timestamp": 1581455270.667926, "_step": 171}
{"train-loss": 1.0002063512802124, "train-mrr": {"_type": "histogram", "values": [175, 12, 2, 3, 0, 0, 2, 1, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 2978.7710173130035, "_timestamp": 1581455280.172874, "_step": 172}
{"train-loss": 1.0000098943710327, "train-mrr": {"_type": "histogram", "values": [178, 7, 3, 5, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2988.23637843132, "_timestamp": 1581455289.638235, "_step": 173}
{"train-loss": 0.9978991746902466, "train-mrr": {"_type": "histogram", "values": [186, 3, 4, 2, 0, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 2997.6586244106293, "_timestamp": 1581455299.060481, "_step": 174}
{"train-loss": 1.0000032186508179, "train-mrr": {"_type": "histogram", "values": [182, 6, 2, 3, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3007.1036036014557, "_timestamp": 1581455308.5054603, "_step": 175}
{"train-loss": 0.9990236163139343, "train-mrr": {"_type": "histogram", "values": [180, 10, 1, 2, 0, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3016.630935907364, "_timestamp": 1581455318.0327926, "_step": 176}
{"train-loss": 1.000969409942627, "train-mrr": {"_type": "histogram", "values": [181, 10, 3, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3026.088430404663, "_timestamp": 1581455327.490287, "_step": 177}
{"train-loss": 1.0000030994415283, "train-mrr": {"_type": "histogram", "values": [187, 5, 3, 0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3035.5466322898865, "_timestamp": 1581455336.948489, "_step": 178}
{"train-loss": 1.0000123977661133, "train-mrr": {"_type": "histogram", "values": [178, 12, 1, 4, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3045.005800485611, "_timestamp": 1581455346.4076571, "_step": 179}
{"train-loss": 1.0000042915344238, "train-mrr": {"_type": "histogram", "values": [180, 7, 4, 2, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 3054.438356399536, "_timestamp": 1581455355.840213, "_step": 180}
{"train-loss": 1.0000075101852417, "train-mrr": {"_type": "histogram", "values": [179, 11, 4, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3063.8678822517395, "_timestamp": 1581455365.269739, "_step": 181}
{"train-loss": 1.0000028610229492, "train-mrr": {"_type": "histogram", "values": [158, 25, 7, 3, 0, 0, 1, 0, 3, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.02049309015274048, 0.035961054265499115, 0.05142901837825775, 0.06689698249101639, 0.08236494660377502, 0.09783291816711426, 0.1133008822798729, 0.12876884639263153, 0.14423680305480957, 0.1597047746181488, 0.17517273128032684, 0.19064070284366608, 0.2061086744070053, 0.22157663106918335, 0.23704460263252258, 0.2525125741958618, 0.26798051595687866, 0.2834484875202179, 0.29891645908355713, 0.31438443064689636, 0.3298523724079132, 0.34532034397125244, 0.3607883155345917, 0.3762562870979309, 0.39172425866127014, 0.407192200422287, 0.4226601719856262, 0.43812814354896545, 0.4535961151123047, 0.46906405687332153, 0.48453202843666077, 0.5]}, "_runtime": 3073.3342287540436, "_timestamp": 1581455374.7360854, "_step": 182}
{"train-loss": 1.0003104209899902, "train-mrr": {"_type": "histogram", "values": [182, 10, 0, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3082.764424800873, "_timestamp": 1581455384.1662815, "_step": 183}
{"train-loss": 0.9981095194816589, "train-mrr": {"_type": "histogram", "values": [184, 9, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3092.1864461898804, "_timestamp": 1581455393.5883029, "_step": 184}
{"train-loss": 0.9998234510421753, "train-mrr": {"_type": "histogram", "values": [187, 3, 2, 2, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3101.6338922977448, "_timestamp": 1581455403.035749, "_step": 185}
{"train-loss": 1.0000022649765015, "train-mrr": {"_type": "histogram", "values": [187, 1, 5, 3, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3111.109127998352, "_timestamp": 1581455412.5109847, "_step": 186}
{"train-loss": 1.0000791549682617, "train-mrr": {"_type": "histogram", "values": [164, 17, 5, 4, 1, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3120.549889564514, "_timestamp": 1581455421.9517462, "_step": 187}
{"train-loss": 0.9993967413902283, "train-mrr": {"_type": "histogram", "values": [181, 14, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 3129.9781720638275, "_timestamp": 1581455431.3800287, "_step": 188}
{"train-loss": 1.0000052452087402, "train-mrr": {"_type": "histogram", "values": [150, 24, 13, 6, 0, 1, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.02049309015274048, 0.035961054265499115, 0.05142901837825775, 0.06689698249101639, 0.08236494660377502, 0.09783291816711426, 0.1133008822798729, 0.12876884639263153, 0.14423680305480957, 0.1597047746181488, 0.17517273128032684, 0.19064070284366608, 0.2061086744070053, 0.22157663106918335, 0.23704460263252258, 0.2525125741958618, 0.26798051595687866, 0.2834484875202179, 0.29891645908355713, 0.31438443064689636, 0.3298523724079132, 0.34532034397125244, 0.3607883155345917, 0.3762562870979309, 0.39172425866127014, 0.407192200422287, 0.4226601719856262, 0.43812814354896545, 0.4535961151123047, 0.46906405687332153, 0.48453202843666077, 0.5]}, "_runtime": 3139.461285829544, "_timestamp": 1581455440.8631425, "_step": 189}
{"train-loss": 0.9965988993644714, "train-mrr": {"_type": "histogram", "values": [174, 15, 5, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3148.9016625881195, "_timestamp": 1581455450.3035192, "_step": 190}
{"epoch": 7, "train-loss": 0.9996210581714838, "train-mrr": 0.02760101537889158, "train-time-sec": 214.89360642433167, "val-loss": 1.0002021052335437, "val-mrr": 0.0222450306384187, "val-time-sec": 3.4486422538757324, "_runtime": 3159.0605182647705, "_timestamp": 1581455460.462375, "_step": 191}
{"train-loss": 1.0011330842971802, "train-mrr": {"_type": "histogram", "values": [175, 11, 2, 4, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3159.2289941310883, "_timestamp": 1581455460.6308508, "_step": 192}
{"train-loss": 1.0010091066360474, "train-mrr": {"_type": "histogram", "values": [148, 24, 7, 8, 1, 3, 0, 2, 2, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3168.708987236023, "_timestamp": 1581455470.110844, "_step": 193}
{"train-loss": 1.0000311136245728, "train-mrr": {"_type": "histogram", "values": [142, 28, 16, 3, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 3178.178586959839, "_timestamp": 1581455479.5804436, "_step": 194}
{"train-loss": 0.9978017210960388, "train-mrr": {"_type": "histogram", "values": [189, 2, 0, 2, 2, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 3187.665791749954, "_timestamp": 1581455489.0676484, "_step": 195}
{"train-loss": 1.0000032186508179, "train-mrr": {"_type": "histogram", "values": [186, 3, 2, 4, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3197.1278128623962, "_timestamp": 1581455498.5296695, "_step": 196}
{"train-loss": 1.0012317895889282, "train-mrr": {"_type": "histogram", "values": [168, 16, 4, 2, 2, 3, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3206.6237664222717, "_timestamp": 1581455508.025623, "_step": 197}
{"train-loss": 1.0000028610229492, "train-mrr": {"_type": "histogram", "values": [183, 5, 1, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3216.1237156391144, "_timestamp": 1581455517.5255723, "_step": 198}
{"train-loss": 1.0003292560577393, "train-mrr": {"_type": "histogram", "values": [133, 45, 7, 1, 0, 2, 0, 0, 0, 0, 1, 1, 1, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.012656250037252903, 0.02031249925494194, 0.027968749403953552, 0.035624999552965164, 0.043281249701976776, 0.05093749985098839, 0.05859375, 0.06624999642372131, 0.07390625029802322, 0.08156249672174454, 0.08921875059604645, 0.09687499701976776, 0.10453125089406967, 0.11218749731779099, 0.1198437511920929, 0.1274999976158142, 0.13515624403953552, 0.14281250536441803, 0.15046875178813934, 0.15812499821186066, 0.16578124463558197, 0.17343750596046448, 0.1810937523841858, 0.1887499988079071, 0.19640624523162842, 0.20406250655651093, 0.21171875298023224, 0.21937499940395355, 0.22703124582767487, 0.23468750715255737, 0.2423437535762787, 0.25]}, "_runtime": 3225.619631052017, "_timestamp": 1581455527.0214877, "_step": 199}
{"train-loss": 0.9964081645011902, "train-mrr": {"_type": "histogram", "values": [185, 5, 3, 2, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3235.1066703796387, "_timestamp": 1581455536.508527, "_step": 200}
{"train-loss": 1.0000019073486328, "train-mrr": {"_type": "histogram", "values": [149, 29, 3, 4, 3, 3, 3, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 3244.580171585083, "_timestamp": 1581455545.9820282, "_step": 201}
{"train-loss": 1.0000027418136597, "train-mrr": {"_type": "histogram", "values": [175, 16, 3, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3254.0834288597107, "_timestamp": 1581455555.4852855, "_step": 202}
{"train-loss": 1.0000827312469482, "train-mrr": {"_type": "histogram", "values": [121, 27, 19, 4, 8, 4, 1, 4, 0, 1, 2, 1, 0, 1, 0, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.012656250037252903, 0.02031249925494194, 0.027968749403953552, 0.035624999552965164, 0.043281249701976776, 0.05093749985098839, 0.05859375, 0.06624999642372131, 0.07390625029802322, 0.08156249672174454, 0.08921875059604645, 0.09687499701976776, 0.10453125089406967, 0.11218749731779099, 0.1198437511920929, 0.1274999976158142, 0.13515624403953552, 0.14281250536441803, 0.15046875178813934, 0.15812499821186066, 0.16578124463558197, 0.17343750596046448, 0.1810937523841858, 0.1887499988079071, 0.19640624523162842, 0.20406250655651093, 0.21171875298023224, 0.21937499940395355, 0.22703124582767487, 0.23468750715255737, 0.2423437535762787, 0.25]}, "_runtime": 3263.56991314888, "_timestamp": 1581455564.9717698, "_step": 203}
{"train-loss": 0.9999951720237732, "train-mrr": {"_type": "histogram", "values": [177, 12, 3, 2, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3273.00532245636, "_timestamp": 1581455574.407179, "_step": 204}
{"train-loss": 1.0001630783081055, "train-mrr": {"_type": "histogram", "values": [157, 23, 8, 4, 0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3282.424120426178, "_timestamp": 1581455583.825977, "_step": 205}
{"train-loss": 1.000002384185791, "train-mrr": {"_type": "histogram", "values": [144, 22, 9, 12, 6, 1, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 3291.8409128189087, "_timestamp": 1581455593.2427695, "_step": 206}
{"train-loss": 0.9993484020233154, "train-mrr": {"_type": "histogram", "values": [181, 8, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3301.3326828479767, "_timestamp": 1581455602.7345395, "_step": 207}
{"train-loss": 1.0000039339065552, "train-mrr": {"_type": "histogram", "values": [171, 18, 4, 2, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3310.772986650467, "_timestamp": 1581455612.1748433, "_step": 208}
{"train-loss": 0.9999973773956299, "train-mrr": {"_type": "histogram", "values": [173, 16, 2, 2, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3320.281720638275, "_timestamp": 1581455621.6835773, "_step": 209}
{"train-loss": 1.0000020265579224, "train-mrr": {"_type": "histogram", "values": [173, 12, 2, 5, 1, 2, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3329.746286869049, "_timestamp": 1581455631.1481435, "_step": 210}
{"train-loss": 1.0000028610229492, "train-mrr": {"_type": "histogram", "values": [136, 29, 15, 7, 3, 0, 2, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 3339.2335646152496, "_timestamp": 1581455640.6354213, "_step": 211}
{"train-loss": 1.0000001192092896, "train-mrr": {"_type": "histogram", "values": [177, 9, 3, 1, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3348.6974680423737, "_timestamp": 1581455650.0993247, "_step": 212}
{"train-loss": 1.000002384185791, "train-mrr": {"_type": "histogram", "values": [162, 23, 6, 3, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3358.143805742264, "_timestamp": 1581455659.5456624, "_step": 213}
{"train-loss": 1.000211477279663, "train-mrr": {"_type": "histogram", "values": [157, 22, 2, 8, 2, 2, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3367.6316533088684, "_timestamp": 1581455669.03351, "_step": 214}
{"epoch": 8, "train-loss": 0.9996587155308102, "train-mrr": 0.02758789329723993, "train-time-sec": 215.2423448562622, "val-loss": 1.0001041528425718, "val-mrr": 0.023711270689964294, "val-time-sec": 3.4339005947113037, "_runtime": 3377.800219774246, "_timestamp": 1581455679.2020764, "_step": 215}
{"train-loss": 0.9996127486228943, "train-mrr": {"_type": "histogram", "values": [179, 11, 4, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3377.9430618286133, "_timestamp": 1581455679.3449185, "_step": 216}
{"train-loss": 1.0000077486038208, "train-mrr": {"_type": "histogram", "values": [158, 21, 11, 2, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3387.4032468795776, "_timestamp": 1581455688.8051035, "_step": 217}
{"train-loss": 1.0000081062316895, "train-mrr": {"_type": "histogram", "values": [184, 11, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3396.891927719116, "_timestamp": 1581455698.2937844, "_step": 218}
{"train-loss": 0.9963580965995789, "train-mrr": {"_type": "histogram", "values": [180, 11, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3406.3849239349365, "_timestamp": 1581455707.7867806, "_step": 219}
{"train-loss": 1.000006079673767, "train-mrr": {"_type": "histogram", "values": [178, 10, 4, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3415.9216873645782, "_timestamp": 1581455717.323544, "_step": 220}
{"train-loss": 0.9980899691581726, "train-mrr": {"_type": "histogram", "values": [184, 11, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3425.4300286769867, "_timestamp": 1581455726.8318853, "_step": 221}
{"train-loss": 1.0000344514846802, "train-mrr": {"_type": "histogram", "values": [181, 9, 1, 2, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3434.915530204773, "_timestamp": 1581455736.3173869, "_step": 222}
{"train-loss": 1.0000027418136597, "train-mrr": {"_type": "histogram", "values": [162, 11, 13, 4, 2, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3444.373797893524, "_timestamp": 1581455745.7756546, "_step": 223}
{"train-loss": 1.0000478029251099, "train-mrr": {"_type": "histogram", "values": [179, 14, 2, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3453.8604650497437, "_timestamp": 1581455755.2623217, "_step": 224}
{"train-loss": 0.9966948628425598, "train-mrr": {"_type": "histogram", "values": [171, 14, 5, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3463.3517150878906, "_timestamp": 1581455764.7535717, "_step": 225}
{"train-loss": 0.999986469745636, "train-mrr": {"_type": "histogram", "values": [169, 17, 7, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005076142027974129, 0.03616751357913017, 0.06725887954235077, 0.09835025668144226, 0.12944161891937256, 0.16053299605846405, 0.19162435829639435, 0.22271573543548584, 0.25380709767341614, 0.2848984897136688, 0.3159898519515991, 0.3470812141895294, 0.3781725764274597, 0.4092639684677124, 0.4403553307056427, 0.471446692943573, 0.5025380849838257, 0.5336294174194336, 0.5647208094596863, 0.595812201499939, 0.6269035339355469, 0.6579949259757996, 0.6890863180160522, 0.7201776504516602, 0.7512690424919128, 0.7823604345321655, 0.8134517669677734, 0.8445431590080261, 0.875634491443634, 0.9067258834838867, 0.9378172755241394, 0.9689086079597473, 1.0]}, "_runtime": 3472.8369641304016, "_timestamp": 1581455774.2388208, "_step": 226}
{"train-loss": 1.00001060962677, "train-mrr": {"_type": "histogram", "values": [178, 12, 5, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3482.337014198303, "_timestamp": 1581455783.7388709, "_step": 227}
{"train-loss": 0.9966138601303101, "train-mrr": {"_type": "histogram", "values": [180, 12, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3491.8330726623535, "_timestamp": 1581455793.2349293, "_step": 228}
{"train-loss": 1.0000118017196655, "train-mrr": {"_type": "histogram", "values": [172, 10, 5, 2, 2, 0, 2, 2, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3501.34166932106, "_timestamp": 1581455802.743526, "_step": 229}
{"train-loss": 1.000002384185791, "train-mrr": {"_type": "histogram", "values": [171, 18, 3, 3, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3510.800705909729, "_timestamp": 1581455812.2025626, "_step": 230}
{"train-loss": 1.0000042915344238, "train-mrr": {"_type": "histogram", "values": [168, 22, 3, 0, 1, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3520.3156230449677, "_timestamp": 1581455821.7174797, "_step": 231}
{"train-loss": 1.000003695487976, "train-mrr": {"_type": "histogram", "values": [176, 11, 5, 4, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3529.792427778244, "_timestamp": 1581455831.1942844, "_step": 232}
{"train-loss": 1.0000081062316895, "train-mrr": {"_type": "histogram", "values": [121, 26, 17, 8, 6, 6, 1, 2, 1, 0, 1, 1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.012656250037252903, 0.02031249925494194, 0.027968749403953552, 0.035624999552965164, 0.043281249701976776, 0.05093749985098839, 0.05859375, 0.06624999642372131, 0.07390625029802322, 0.08156249672174454, 0.08921875059604645, 0.09687499701976776, 0.10453125089406967, 0.11218749731779099, 0.1198437511920929, 0.1274999976158142, 0.13515624403953552, 0.14281250536441803, 0.15046875178813934, 0.15812499821186066, 0.16578124463558197, 0.17343750596046448, 0.1810937523841858, 0.1887499988079071, 0.19640624523162842, 0.20406250655651093, 0.21171875298023224, 0.21937499940395355, 0.22703124582767487, 0.23468750715255737, 0.2423437535762787, 0.25]}, "_runtime": 3539.2785098552704, "_timestamp": 1581455840.6803665, "_step": 233}
{"train-loss": 1.0000026226043701, "train-mrr": {"_type": "histogram", "values": [180, 12, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3548.73264837265, "_timestamp": 1581455850.134505, "_step": 234}
{"train-loss": 0.9995713233947754, "train-mrr": {"_type": "histogram", "values": [182, 11, 0, 2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3558.2080998420715, "_timestamp": 1581455859.6099565, "_step": 235}
{"train-loss": 1.0001137256622314, "train-mrr": {"_type": "histogram", "values": [157, 22, 12, 3, 0, 2, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3567.652088403702, "_timestamp": 1581455869.053945, "_step": 236}
{"train-loss": 1.0000026226043701, "train-mrr": {"_type": "histogram", "values": [158, 33, 2, 2, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3577.1293902397156, "_timestamp": 1581455878.531247, "_step": 237}
{"train-loss": 1.000007152557373, "train-mrr": {"_type": "histogram", "values": [173, 15, 5, 2, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3586.578911304474, "_timestamp": 1581455887.980768, "_step": 238}
{"epoch": 9, "train-loss": 0.999635427875418, "train-mrr": 0.02762644938442489, "train-time-sec": 215.4636766910553, "val-loss": 1.0001355127284401, "val-mrr": 0.022784298172122554, "val-time-sec": 3.4165024757385254, "_runtime": 3596.7187061309814, "_timestamp": 1581455898.1205628, "_step": 239}
{"train-loss": 1.0000189542770386, "train-mrr": {"_type": "histogram", "values": [150, 23, 10, 9, 1, 0, 0, 1, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3596.8646149635315, "_timestamp": 1581455898.2664716, "_step": 240}
{"train-loss": 1.0000118017196655, "train-mrr": {"_type": "histogram", "values": [178, 14, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3606.32248210907, "_timestamp": 1581455907.7243388, "_step": 241}
{"train-loss": 1.0000636577606201, "train-mrr": {"_type": "histogram", "values": [180, 12, 0, 1, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3615.877989292145, "_timestamp": 1581455917.279846, "_step": 242}
{"train-loss": 1.000535249710083, "train-mrr": {"_type": "histogram", "values": [152, 21, 12, 4, 2, 0, 3, 0, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3625.3961975574493, "_timestamp": 1581455926.7980542, "_step": 243}
{"train-loss": 1.0001028776168823, "train-mrr": {"_type": "histogram", "values": [177, 13, 0, 2, 0, 1, 1, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3634.8710424900055, "_timestamp": 1581455936.2728992, "_step": 244}
{"train-loss": 1.0000131130218506, "train-mrr": {"_type": "histogram", "values": [179, 15, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3644.37695145607, "_timestamp": 1581455945.778808, "_step": 245}
{"train-loss": 0.9999728202819824, "train-mrr": {"_type": "histogram", "values": [178, 15, 4, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3653.877012014389, "_timestamp": 1581455955.2788687, "_step": 246}
{"train-loss": 0.9998800754547119, "train-mrr": {"_type": "histogram", "values": [176, 13, 3, 0, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.005050505045801401, 0.03614267706871033, 0.06723485141992569, 0.09832701832056046, 0.12941919267177582, 0.16051135957241058, 0.19160354137420654, 0.2226957082748413, 0.2537878751754761, 0.28488004207611084, 0.3159722089767456, 0.34706440567970276, 0.3781565725803375, 0.4092487394809723, 0.44034090638160706, 0.4714330732822418, 0.502525269985199, 0.5336174368858337, 0.5647096037864685, 0.5958017706871033, 0.626893937587738, 0.6579861044883728, 0.6890782713890076, 0.7201704382896423, 0.7512626051902771, 0.7823547720909119, 0.8134469985961914, 0.8445391654968262, 0.8756313323974609, 0.9067234992980957, 0.9378156661987305, 0.9689078330993652, 1.0]}, "_runtime": 3663.3438131809235, "_timestamp": 1581455964.7456698, "_step": 247}
{"train-loss": 0.9978131651878357, "train-mrr": {"_type": "histogram", "values": [189, 3, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3672.837856531143, "_timestamp": 1581455974.2397132, "_step": 248}
{"train-loss": 1.0000182390213013, "train-mrr": {"_type": "histogram", "values": [177, 11, 3, 0, 2, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3682.335466861725, "_timestamp": 1581455983.7373235, "_step": 249}
{"train-loss": 1.0000108480453491, "train-mrr": {"_type": "histogram", "values": [141, 31, 15, 6, 1, 0, 0, 1, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 3691.8293328285217, "_timestamp": 1581455993.2311895, "_step": 250}
{"train-loss": 1.000002384185791, "train-mrr": {"_type": "histogram", "values": [178, 6, 2, 5, 1, 2, 1, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3701.290701150894, "_timestamp": 1581456002.6925578, "_step": 251}
{"train-loss": 1.0000584125518799, "train-mrr": {"_type": "histogram", "values": [177, 13, 4, 0, 0, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3710.764125108719, "_timestamp": 1581456012.1659818, "_step": 252}
{"train-loss": 0.9963815212249756, "train-mrr": {"_type": "histogram", "values": [173, 14, 3, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3720.2093467712402, "_timestamp": 1581456021.6112034, "_step": 253}
{"train-loss": 1.0000044107437134, "train-mrr": {"_type": "histogram", "values": [178, 13, 2, 2, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3729.744422674179, "_timestamp": 1581456031.1462793, "_step": 254}
{"train-loss": 1.0000091791152954, "train-mrr": {"_type": "histogram", "values": [183, 9, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3739.213247537613, "_timestamp": 1581456040.6151042, "_step": 255}
{"train-loss": 1.0000278949737549, "train-mrr": {"_type": "histogram", "values": [177, 11, 2, 0, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3748.6830434799194, "_timestamp": 1581456050.0849001, "_step": 256}
{"train-loss": 1.0000039339065552, "train-mrr": {"_type": "histogram", "values": [153, 25, 11, 4, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.02049309015274048, 0.035961054265499115, 0.05142901837825775, 0.06689698249101639, 0.08236494660377502, 0.09783291816711426, 0.1133008822798729, 0.12876884639263153, 0.14423680305480957, 0.1597047746181488, 0.17517273128032684, 0.19064070284366608, 0.2061086744070053, 0.22157663106918335, 0.23704460263252258, 0.2525125741958618, 0.26798051595687866, 0.2834484875202179, 0.29891645908355713, 0.31438443064689636, 0.3298523724079132, 0.34532034397125244, 0.3607883155345917, 0.3762562870979309, 0.39172425866127014, 0.407192200422287, 0.4226601719856262, 0.43812814354896545, 0.4535961151123047, 0.46906405687332153, 0.48453202843666077, 0.5]}, "_runtime": 3758.159697532654, "_timestamp": 1581456059.5615542, "_step": 257}
{"train-loss": 1.000616431236267, "train-mrr": {"_type": "histogram", "values": [145, 28, 12, 2, 0, 1, 1, 2, 0, 1, 0, 5, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 3767.624918460846, "_timestamp": 1581456069.0267751, "_step": 258}
{"train-loss": 1.0000033378601074, "train-mrr": {"_type": "histogram", "values": [188, 5, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3777.0477590560913, "_timestamp": 1581456078.4496157, "_step": 259}
{"train-loss": 1.000006914138794, "train-mrr": {"_type": "histogram", "values": [183, 8, 2, 1, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3786.475400209427, "_timestamp": 1581456087.8772569, "_step": 260}
{"train-loss": 1.0000020265579224, "train-mrr": {"_type": "histogram", "values": [186, 4, 0, 2, 0, 1, 1, 4, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3795.9030249118805, "_timestamp": 1581456097.3048816, "_step": 261}
{"train-loss": 1.0000141859054565, "train-mrr": {"_type": "histogram", "values": [139, 46, 4, 1, 0, 1, 1, 1, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 3805.4057211875916, "_timestamp": 1581456106.8075778, "_step": 262}
{"epoch": 10, "train-loss": 0.9996904974252405, "train-mrr": 0.02727932540831012, "train-time-sec": 215.37906503677368, "val-loss": 1.0001978231103796, "val-mrr": 0.022248190406121707, "val-time-sec": 3.4154436588287354, "_runtime": 3815.5541026592255, "_timestamp": 1581456116.9559593, "_step": 263}
{"train-loss": 0.9970270395278931, "train-mrr": {"_type": "histogram", "values": [187, 2, 0, 1, 2, 3, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3815.6970653533936, "_timestamp": 1581456117.098922, "_step": 264}
{"train-loss": 1.0000029802322388, "train-mrr": {"_type": "histogram", "values": [184, 9, 1, 0, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3825.2174949645996, "_timestamp": 1581456126.6193516, "_step": 265}
{"train-loss": 1.000006079673767, "train-mrr": {"_type": "histogram", "values": [185, 6, 3, 0, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3834.704613685608, "_timestamp": 1581456136.1064703, "_step": 266}
{"train-loss": 1.0000159740447998, "train-mrr": {"_type": "histogram", "values": [184, 6, 1, 2, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3844.143526315689, "_timestamp": 1581456145.545383, "_step": 267}
{"train-loss": 1.0000019073486328, "train-mrr": {"_type": "histogram", "values": [179, 5, 5, 2, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 3853.6275560855865, "_timestamp": 1581456155.0294127, "_step": 268}
{"train-loss": 1.0000132322311401, "train-mrr": {"_type": "histogram", "values": [137, 24, 12, 6, 7, 3, 1, 2, 0, 1, 1, 0, 0, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 3863.1279621124268, "_timestamp": 1581456164.5298188, "_step": 269}
{"train-loss": 1.0000042915344238, "train-mrr": {"_type": "histogram", "values": [154, 26, 8, 3, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3872.576570749283, "_timestamp": 1581456173.9784274, "_step": 270}
{"train-loss": 1.0000051259994507, "train-mrr": {"_type": "histogram", "values": [122, 31, 18, 11, 7, 5, 0, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.012680590152740479, 0.020336056128144264, 0.0279915202409029, 0.035646986216306686, 0.04330245032906532, 0.05095791444182396, 0.058613378554582596, 0.06626884639263153, 0.07392431050539017, 0.0815797746181488, 0.08923523873090744, 0.09689070284366608, 0.10454616695642471, 0.11220163106918335, 0.11985709518194199, 0.12751255929470062, 0.13516803085803986, 0.1428234875202179, 0.15047895908355713, 0.15813441574573517, 0.1657898873090744, 0.17344535887241364, 0.18110081553459167, 0.1887562870979309, 0.19641174376010895, 0.20406721532344818, 0.21172267198562622, 0.21937814354896545, 0.2270336002111435, 0.23468907177448273, 0.24234452843666077, 0.25]}, "_runtime": 3882.067158460617, "_timestamp": 1581456183.4690151, "_step": 271}
{"train-loss": 1.000004768371582, "train-mrr": {"_type": "histogram", "values": [161, 20, 9, 2, 1, 2, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3891.5142211914062, "_timestamp": 1581456192.9160779, "_step": 272}
{"train-loss": 1.0000255107879639, "train-mrr": {"_type": "histogram", "values": [130, 37, 6, 5, 5, 3, 2, 2, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 3900.955315589905, "_timestamp": 1581456202.3571723, "_step": 273}
{"train-loss": 1.0000028610229492, "train-mrr": {"_type": "histogram", "values": [183, 6, 0, 3, 0, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3910.459404706955, "_timestamp": 1581456211.8612614, "_step": 274}
{"train-loss": 1.0000249147415161, "train-mrr": {"_type": "histogram", "values": [152, 20, 9, 2, 3, 1, 4, 1, 1, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 3919.8931069374084, "_timestamp": 1581456221.2949636, "_step": 275}
{"train-loss": 1.0000061988830566, "train-mrr": {"_type": "histogram", "values": [175, 17, 2, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3929.392425775528, "_timestamp": 1581456230.7942824, "_step": 276}
{"train-loss": 1.0000152587890625, "train-mrr": {"_type": "histogram", "values": [118, 34, 14, 5, 5, 6, 4, 0, 1, 1, 0, 3, 2, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.012656250037252903, 0.02031249925494194, 0.027968749403953552, 0.035624999552965164, 0.043281249701976776, 0.05093749985098839, 0.05859375, 0.06624999642372131, 0.07390625029802322, 0.08156249672174454, 0.08921875059604645, 0.09687499701976776, 0.10453125089406967, 0.11218749731779099, 0.1198437511920929, 0.1274999976158142, 0.13515624403953552, 0.14281250536441803, 0.15046875178813934, 0.15812499821186066, 0.16578124463558197, 0.17343750596046448, 0.1810937523841858, 0.1887499988079071, 0.19640624523162842, 0.20406250655651093, 0.21171875298023224, 0.21937499940395355, 0.22703124582767487, 0.23468750715255737, 0.2423437535762787, 0.25]}, "_runtime": 3938.8640303611755, "_timestamp": 1581456240.265887, "_step": 277}
{"train-loss": 1.000003695487976, "train-mrr": {"_type": "histogram", "values": [176, 8, 7, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3948.317464351654, "_timestamp": 1581456249.719321, "_step": 278}
{"train-loss": 1.0000032186508179, "train-mrr": {"_type": "histogram", "values": [179, 12, 2, 1, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3957.6972789764404, "_timestamp": 1581456259.0991356, "_step": 279}
{"train-loss": 1.0001327991485596, "train-mrr": {"_type": "histogram", "values": [175, 13, 0, 1, 2, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3967.161555290222, "_timestamp": 1581456268.563412, "_step": 280}
{"train-loss": 1.000037670135498, "train-mrr": {"_type": "histogram", "values": [182, 7, 2, 2, 2, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3976.566839694977, "_timestamp": 1581456277.9686964, "_step": 281}
{"train-loss": 1.0000559091567993, "train-mrr": {"_type": "histogram", "values": [179, 11, 2, 0, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3986.00883102417, "_timestamp": 1581456287.4106877, "_step": 282}
{"train-loss": 1.0000090599060059, "train-mrr": {"_type": "histogram", "values": [179, 4, 3, 2, 0, 1, 3, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 3995.4510958194733, "_timestamp": 1581456296.8529525, "_step": 283}
{"train-loss": 1.0004527568817139, "train-mrr": {"_type": "histogram", "values": [178, 11, 3, 1, 1, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4004.985132455826, "_timestamp": 1581456306.386989, "_step": 284}
{"train-loss": 1.0000097751617432, "train-mrr": {"_type": "histogram", "values": [182, 8, 1, 1, 1, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4014.4038803577423, "_timestamp": 1581456315.805737, "_step": 285}
{"train-loss": 1.0000022649765015, "train-mrr": {"_type": "histogram", "values": [163, 22, 5, 3, 0, 0, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4023.80491566658, "_timestamp": 1581456325.2067723, "_step": 286}
{"epoch": 11, "train-loss": 0.9996171002079484, "train-mrr": 0.028100786876510568, "train-time-sec": 214.924382686615, "val-loss": 1.0001737177371979, "val-mrr": 0.02653760331241708, "val-time-sec": 3.413015365600586, "_runtime": 4033.930220603943, "_timestamp": 1581456335.3320773, "_step": 287}
{"train-loss": 1.0000051259994507, "train-mrr": {"_type": "histogram", "values": [134, 40, 7, 8, 2, 1, 2, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 4034.0800817012787, "_timestamp": 1581456335.4819384, "_step": 288}
{"train-loss": 1.0000039339065552, "train-mrr": {"_type": "histogram", "values": [154, 16, 12, 3, 1, 2, 2, 0, 1, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4043.5855927467346, "_timestamp": 1581456344.9874494, "_step": 289}
{"train-loss": 0.995978832244873, "train-mrr": {"_type": "histogram", "values": [183, 4, 1, 0, 1, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 4053.078948736191, "_timestamp": 1581456354.4808054, "_step": 290}
{"train-loss": 0.9997336864471436, "train-mrr": {"_type": "histogram", "values": [190, 3, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4062.600135564804, "_timestamp": 1581456364.0019922, "_step": 291}
{"train-loss": 1.0000053644180298, "train-mrr": {"_type": "histogram", "values": [180, 11, 2, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4072.059317588806, "_timestamp": 1581456373.4611742, "_step": 292}
{"train-loss": 1.0000251531600952, "train-mrr": {"_type": "histogram", "values": [184, 5, 1, 2, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4081.5343878269196, "_timestamp": 1581456382.9362445, "_step": 293}
{"train-loss": 1.0000149011611938, "train-mrr": {"_type": "histogram", "values": [180, 10, 2, 2, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4091.041611433029, "_timestamp": 1581456392.443468, "_step": 294}
{"train-loss": 1.0000194311141968, "train-mrr": {"_type": "histogram", "values": [184, 6, 4, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4100.449067831039, "_timestamp": 1581456401.8509245, "_step": 295}
{"train-loss": 1.0000014305114746, "train-mrr": {"_type": "histogram", "values": [181, 5, 3, 4, 2, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4109.927088260651, "_timestamp": 1581456411.328945, "_step": 296}
{"train-loss": 1.000014066696167, "train-mrr": {"_type": "histogram", "values": [184, 7, 3, 2, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4119.375558614731, "_timestamp": 1581456420.7774153, "_step": 297}
{"train-loss": 1.0000025033950806, "train-mrr": {"_type": "histogram", "values": [182, 7, 1, 1, 1, 4, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4128.846645355225, "_timestamp": 1581456430.248502, "_step": 298}
{"train-loss": 1.0000089406967163, "train-mrr": {"_type": "histogram", "values": [157, 26, 6, 4, 2, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4138.361139535904, "_timestamp": 1581456439.7629962, "_step": 299}
{"train-loss": 1.0000213384628296, "train-mrr": {"_type": "histogram", "values": [185, 5, 1, 3, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4147.8125965595245, "_timestamp": 1581456449.2144532, "_step": 300}
{"train-loss": 1.0000197887420654, "train-mrr": {"_type": "histogram", "values": [152, 35, 4, 5, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4157.315363645554, "_timestamp": 1581456458.7172203, "_step": 301}
{"train-loss": 1.0000050067901611, "train-mrr": {"_type": "histogram", "values": [153, 24, 10, 7, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4166.787191152573, "_timestamp": 1581456468.1890478, "_step": 302}
{"train-loss": 0.9999954700469971, "train-mrr": {"_type": "histogram", "values": [184, 5, 3, 1, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4176.280522108078, "_timestamp": 1581456477.6823788, "_step": 303}
{"train-loss": 1.0000032186508179, "train-mrr": {"_type": "histogram", "values": [180, 12, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4185.736198186874, "_timestamp": 1581456487.1380548, "_step": 304}
{"train-loss": 1.0000081062316895, "train-mrr": {"_type": "histogram", "values": [178, 12, 1, 2, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4195.218278169632, "_timestamp": 1581456496.6201348, "_step": 305}
{"train-loss": 0.9959853291511536, "train-mrr": {"_type": "histogram", "values": [176, 14, 4, 2, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 4204.693975925446, "_timestamp": 1581456506.0958326, "_step": 306}
{"train-loss": 1.0000042915344238, "train-mrr": {"_type": "histogram", "values": [182, 3, 4, 3, 1, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4214.231199026108, "_timestamp": 1581456515.6330557, "_step": 307}
{"train-loss": 1.0000182390213013, "train-mrr": {"_type": "histogram", "values": [171, 15, 4, 2, 1, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4223.68140745163, "_timestamp": 1581456525.083264, "_step": 308}
{"train-loss": 1.0000030994415283, "train-mrr": {"_type": "histogram", "values": [183, 7, 0, 1, 1, 0, 5, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4233.178680181503, "_timestamp": 1581456534.5805368, "_step": 309}
{"train-loss": 0.9998971819877625, "train-mrr": {"_type": "histogram", "values": [171, 19, 3, 1, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4242.668015241623, "_timestamp": 1581456544.069872, "_step": 310}
{"epoch": 12, "train-loss": 0.9997289560105599, "train-mrr": 0.02893888776623447, "train-time-sec": 215.43263483047485, "val-loss": 1.0004922841724597, "val-mrr": 0.024146488026568765, "val-time-sec": 3.4331018924713135, "_runtime": 4252.840972185135, "_timestamp": 1581456554.2428288, "_step": 311}
{"train-loss": 1.0000051259994507, "train-mrr": {"_type": "histogram", "values": [156, 27, 8, 0, 0, 1, 3, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4252.973989725113, "_timestamp": 1581456554.3758464, "_step": 312}
{"train-loss": 1.0000137090682983, "train-mrr": {"_type": "histogram", "values": [184, 8, 1, 0, 1, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 4262.444440126419, "_timestamp": 1581456563.8462968, "_step": 313}
{"train-loss": 0.9981564283370972, "train-mrr": {"_type": "histogram", "values": [180, 10, 0, 1, 1, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4271.925045013428, "_timestamp": 1581456573.3269017, "_step": 314}
{"train-loss": 1.0000157356262207, "train-mrr": {"_type": "histogram", "values": [183, 10, 0, 2, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4281.392717123032, "_timestamp": 1581456582.7945738, "_step": 315}
{"train-loss": 0.9997245669364929, "train-mrr": {"_type": "histogram", "values": [185, 5, 0, 3, 0, 0, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4290.852787971497, "_timestamp": 1581456592.2546446, "_step": 316}
{"train-loss": 1.000014066696167, "train-mrr": {"_type": "histogram", "values": [177, 11, 2, 3, 0, 1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4300.2898943424225, "_timestamp": 1581456601.691751, "_step": 317}
{"train-loss": 1.000002384185791, "train-mrr": {"_type": "histogram", "values": [188, 3, 2, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4309.737065315247, "_timestamp": 1581456611.138922, "_step": 318}
{"train-loss": 1.0000057220458984, "train-mrr": {"_type": "histogram", "values": [173, 13, 3, 3, 1, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4319.223245859146, "_timestamp": 1581456620.6251025, "_step": 319}
{"train-loss": 1.0007693767547607, "train-mrr": {"_type": "histogram", "values": [188, 2, 1, 1, 0, 0, 1, 2, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4328.710149526596, "_timestamp": 1581456630.1120062, "_step": 320}
{"train-loss": 0.9997698068618774, "train-mrr": {"_type": "histogram", "values": [179, 9, 3, 3, 1, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4338.191312551498, "_timestamp": 1581456639.5931692, "_step": 321}
{"train-loss": 1.000971794128418, "train-mrr": {"_type": "histogram", "values": [183, 5, 3, 2, 0, 1, 1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4347.678936719894, "_timestamp": 1581456649.0807934, "_step": 322}
{"train-loss": 1.0000052452087402, "train-mrr": {"_type": "histogram", "values": [177, 8, 2, 2, 0, 3, 0, 1, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4357.17652463913, "_timestamp": 1581456658.5783813, "_step": 323}
{"train-loss": 1.000010371208191, "train-mrr": {"_type": "histogram", "values": [192, 1, 1, 1, 0, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4366.637377977371, "_timestamp": 1581456668.0392346, "_step": 324}
{"train-loss": 1.0000094175338745, "train-mrr": {"_type": "histogram", "values": [177, 12, 4, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4376.143419504166, "_timestamp": 1581456677.5452762, "_step": 325}
{"train-loss": 1.0000035762786865, "train-mrr": {"_type": "histogram", "values": [177, 13, 3, 1, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4385.570543766022, "_timestamp": 1581456686.9724004, "_step": 326}
{"train-loss": 1.0000022649765015, "train-mrr": {"_type": "histogram", "values": [187, 6, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4395.095205545425, "_timestamp": 1581456696.4970622, "_step": 327}
{"train-loss": 1.0010489225387573, "train-mrr": {"_type": "histogram", "values": [180, 11, 1, 2, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4404.555991888046, "_timestamp": 1581456705.9578485, "_step": 328}
{"train-loss": 1.0000083446502686, "train-mrr": {"_type": "histogram", "values": [134, 29, 15, 7, 2, 1, 1, 3, 0, 1, 0, 3, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 4414.022938013077, "_timestamp": 1581456715.4247947, "_step": 329}
{"train-loss": 0.9997768998146057, "train-mrr": {"_type": "histogram", "values": [186, 6, 0, 2, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4423.447360277176, "_timestamp": 1581456724.849217, "_step": 330}
{"train-loss": 0.9999496340751648, "train-mrr": {"_type": "histogram", "values": [181, 9, 1, 1, 0, 2, 1, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4432.958881139755, "_timestamp": 1581456734.3607378, "_step": 331}
{"train-loss": 1.0000054836273193, "train-mrr": {"_type": "histogram", "values": [136, 28, 16, 7, 4, 0, 1, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 4442.403898239136, "_timestamp": 1581456743.805755, "_step": 332}
{"train-loss": 0.9963363409042358, "train-mrr": {"_type": "histogram", "values": [175, 17, 2, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 4451.88699889183, "_timestamp": 1581456753.2888556, "_step": 333}
{"train-loss": 1.0000165700912476, "train-mrr": {"_type": "histogram", "values": [172, 15, 4, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4461.367302656174, "_timestamp": 1581456762.7691593, "_step": 334}
{"epoch": 13, "train-loss": 0.9996664794817777, "train-mrr": 0.02815765159965401, "train-time-sec": 215.2146270275116, "val-loss": 1.0004165956848545, "val-mrr": 0.023587319223504318, "val-time-sec": 3.4035887718200684, "_runtime": 4471.486485242844, "_timestamp": 1581456772.888342, "_step": 335}
{"train-loss": 1.0000051259994507, "train-mrr": {"_type": "histogram", "values": [175, 12, 3, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4471.628346681595, "_timestamp": 1581456773.0302033, "_step": 336}
{"train-loss": 1.0000137090682983, "train-mrr": {"_type": "histogram", "values": [178, 14, 2, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4481.090712070465, "_timestamp": 1581456782.4925687, "_step": 337}
{"train-loss": 1.0000308752059937, "train-mrr": {"_type": "histogram", "values": [179, 10, 3, 1, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4490.528375864029, "_timestamp": 1581456791.9302325, "_step": 338}
{"train-loss": 1.0000039339065552, "train-mrr": {"_type": "histogram", "values": [178, 14, 0, 2, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4500.044904708862, "_timestamp": 1581456801.4467614, "_step": 339}
{"train-loss": 1.0000075101852417, "train-mrr": {"_type": "histogram", "values": [179, 9, 0, 2, 2, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4509.542959690094, "_timestamp": 1581456810.9448164, "_step": 340}
{"train-loss": 1.0000053644180298, "train-mrr": {"_type": "histogram", "values": [186, 8, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4518.998767375946, "_timestamp": 1581456820.400624, "_step": 341}
{"train-loss": 1.0000028610229492, "train-mrr": {"_type": "histogram", "values": [154, 26, 12, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4528.454415559769, "_timestamp": 1581456829.8562722, "_step": 342}
{"train-loss": 1.0010159015655518, "train-mrr": {"_type": "histogram", "values": [176, 15, 1, 2, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4537.913238525391, "_timestamp": 1581456839.3150952, "_step": 343}
{"train-loss": 1.0000110864639282, "train-mrr": {"_type": "histogram", "values": [178, 8, 2, 1, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4547.404016494751, "_timestamp": 1581456848.8058732, "_step": 344}
{"train-loss": 0.9958605170249939, "train-mrr": {"_type": "histogram", "values": [173, 16, 1, 2, 3, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4556.898978948593, "_timestamp": 1581456858.3008356, "_step": 345}
{"train-loss": 1.0009675025939941, "train-mrr": {"_type": "histogram", "values": [174, 15, 5, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4566.377988100052, "_timestamp": 1581456867.7798448, "_step": 346}
{"train-loss": 1.0000041723251343, "train-mrr": {"_type": "histogram", "values": [181, 12, 0, 3, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4575.862455844879, "_timestamp": 1581456877.2643125, "_step": 347}
{"train-loss": 1.0000053644180298, "train-mrr": {"_type": "histogram", "values": [171, 16, 2, 3, 2, 2, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4585.347598552704, "_timestamp": 1581456886.7494552, "_step": 348}
{"train-loss": 1.0000017881393433, "train-mrr": {"_type": "histogram", "values": [182, 4, 2, 3, 1, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4594.760241270065, "_timestamp": 1581456896.162098, "_step": 349}
{"train-loss": 1.000006079673767, "train-mrr": {"_type": "histogram", "values": [182, 2, 4, 2, 3, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4604.236712694168, "_timestamp": 1581456905.6385694, "_step": 350}
{"train-loss": 1.0000030994415283, "train-mrr": {"_type": "histogram", "values": [181, 6, 2, 0, 2, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4613.69473695755, "_timestamp": 1581456915.0965936, "_step": 351}
{"train-loss": 1.0011721849441528, "train-mrr": {"_type": "histogram", "values": [189, 3, 0, 3, 1, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4623.145079374313, "_timestamp": 1581456924.546936, "_step": 352}
{"train-loss": 1.0000406503677368, "train-mrr": {"_type": "histogram", "values": [132, 27, 12, 10, 3, 4, 1, 2, 0, 0, 0, 1, 0, 3, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 4632.653301239014, "_timestamp": 1581456934.055158, "_step": 353}
{"train-loss": 1.0000919103622437, "train-mrr": {"_type": "histogram", "values": [167, 17, 3, 3, 2, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4642.130403280258, "_timestamp": 1581456943.53226, "_step": 354}
{"train-loss": 1.001297950744629, "train-mrr": {"_type": "histogram", "values": [184, 10, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4651.640265464783, "_timestamp": 1581456953.0421221, "_step": 355}
{"train-loss": 1.0000040531158447, "train-mrr": {"_type": "histogram", "values": [158, 23, 6, 2, 4, 2, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4661.113602876663, "_timestamp": 1581456962.5154595, "_step": 356}
{"train-loss": 1.0000288486480713, "train-mrr": {"_type": "histogram", "values": [184, 8, 2, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4670.604221343994, "_timestamp": 1581456972.006078, "_step": 357}
{"train-loss": 0.9995117783546448, "train-mrr": {"_type": "histogram", "values": [185, 1, 5, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4680.058022737503, "_timestamp": 1581456981.4598794, "_step": 358}
{"epoch": 14, "train-loss": 0.9997752066701651, "train-mrr": 0.026807558072704664, "train-time-sec": 215.2510941028595, "val-loss": 1.0004070589416905, "val-mrr": 0.022033209659551318, "val-time-sec": 3.43587064743042, "_runtime": 4690.210168838501, "_timestamp": 1581456991.6120255, "_step": 359}
{"train-loss": 1.0000983476638794, "train-mrr": {"_type": "histogram", "values": [185, 7, 1, 3, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4690.374542713165, "_timestamp": 1581456991.7763994, "_step": 360}
{"train-loss": 1.0000325441360474, "train-mrr": {"_type": "histogram", "values": [183, 10, 0, 2, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4699.85514998436, "_timestamp": 1581457001.2570066, "_step": 361}
{"train-loss": 1.0000118017196655, "train-mrr": {"_type": "histogram", "values": [160, 23, 5, 4, 1, 0, 1, 2, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4709.367764234543, "_timestamp": 1581457010.769621, "_step": 362}
{"train-loss": 1.000003695487976, "train-mrr": {"_type": "histogram", "values": [157, 19, 13, 3, 0, 2, 2, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4718.830487251282, "_timestamp": 1581457020.232344, "_step": 363}
{"train-loss": 0.9980016350746155, "train-mrr": {"_type": "histogram", "values": [184, 11, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4728.281612157822, "_timestamp": 1581457029.6834688, "_step": 364}
{"train-loss": 1.0000056028366089, "train-mrr": {"_type": "histogram", "values": [115, 35, 15, 11, 6, 8, 2, 2, 1, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.012656250037252903, 0.02031249925494194, 0.027968749403953552, 0.035624999552965164, 0.043281249701976776, 0.05093749985098839, 0.05859375, 0.06624999642372131, 0.07390625029802322, 0.08156249672174454, 0.08921875059604645, 0.09687499701976776, 0.10453125089406967, 0.11218749731779099, 0.1198437511920929, 0.1274999976158142, 0.13515624403953552, 0.14281250536441803, 0.15046875178813934, 0.15812499821186066, 0.16578124463558197, 0.17343750596046448, 0.1810937523841858, 0.1887499988079071, 0.19640624523162842, 0.20406250655651093, 0.21171875298023224, 0.21937499940395355, 0.22703124582767487, 0.23468750715255737, 0.2423437535762787, 0.25]}, "_runtime": 4737.75963973999, "_timestamp": 1581457039.1614964, "_step": 365}
{"train-loss": 1.0001001358032227, "train-mrr": {"_type": "histogram", "values": [182, 8, 0, 3, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4747.228837966919, "_timestamp": 1581457048.6306946, "_step": 366}
{"train-loss": 1.0000050067901611, "train-mrr": {"_type": "histogram", "values": [187, 8, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4756.693204641342, "_timestamp": 1581457058.0950613, "_step": 367}
{"train-loss": 0.9980860352516174, "train-mrr": {"_type": "histogram", "values": [182, 6, 2, 4, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 4766.127556800842, "_timestamp": 1581457067.5294135, "_step": 368}
{"train-loss": 1.000017762184143, "train-mrr": {"_type": "histogram", "values": [138, 27, 17, 7, 2, 2, 3, 0, 1, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 4775.617973327637, "_timestamp": 1581457077.01983, "_step": 369}
{"train-loss": 1.0000150203704834, "train-mrr": {"_type": "histogram", "values": [170, 15, 3, 6, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4785.119275569916, "_timestamp": 1581457086.5211322, "_step": 370}
{"train-loss": 1.0000072717666626, "train-mrr": {"_type": "histogram", "values": [182, 9, 1, 0, 2, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4794.5887269973755, "_timestamp": 1581457095.9905837, "_step": 371}
{"train-loss": 1.000006914138794, "train-mrr": {"_type": "histogram", "values": [181, 12, 2, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4804.086643218994, "_timestamp": 1581457105.4884999, "_step": 372}
{"train-loss": 0.9980677962303162, "train-mrr": {"_type": "histogram", "values": [182, 10, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.005025125574320555, 0.03611809015274048, 0.06721105426549911, 0.09830401837825775, 0.12939698994159698, 0.16048994660377502, 0.19158291816711426, 0.2226758748292923, 0.25376883149147034, 0.28486180305480957, 0.3159547746181488, 0.34704774618148804, 0.37814071774482727, 0.4092336595058441, 0.44032663106918335, 0.4714196026325226, 0.5025125741958618, 0.5336055159568787, 0.5646985173225403, 0.5957914590835571, 0.626884400844574, 0.6579774022102356, 0.6890703439712524, 0.7201633453369141, 0.7512562870979309, 0.7823492288589478, 0.8134422302246094, 0.8445351719856262, 0.8756281137466431, 0.9067211151123047, 0.9378140568733215, 0.9689070582389832, 1.0]}, "_runtime": 4813.553440093994, "_timestamp": 1581457114.9552968, "_step": 373}
{"train-loss": 1.0000195503234863, "train-mrr": {"_type": "histogram", "values": [174, 14, 2, 1, 2, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4823.076380968094, "_timestamp": 1581457124.4782376, "_step": 374}
{"train-loss": 0.9959042072296143, "train-mrr": {"_type": "histogram", "values": [180, 7, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4832.564346313477, "_timestamp": 1581457133.966203, "_step": 375}
{"train-loss": 1.00001859664917, "train-mrr": {"_type": "histogram", "values": [188, 2, 3, 3, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4842.013785362244, "_timestamp": 1581457143.415642, "_step": 376}
{"train-loss": 1.0000033378601074, "train-mrr": {"_type": "histogram", "values": [186, 4, 1, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4851.531238794327, "_timestamp": 1581457152.9330955, "_step": 377}
{"train-loss": 1.0000249147415161, "train-mrr": {"_type": "histogram", "values": [181, 13, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4860.966947793961, "_timestamp": 1581457162.3688045, "_step": 378}
{"train-loss": 1.000106692314148, "train-mrr": {"_type": "histogram", "values": [142, 31, 15, 1, 3, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 4870.48282790184, "_timestamp": 1581457171.8846846, "_step": 379}
{"train-loss": 1.000003695487976, "train-mrr": {"_type": "histogram", "values": [184, 6, 3, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4879.9055519104, "_timestamp": 1581457181.3074086, "_step": 380}
{"train-loss": 1.0002363920211792, "train-mrr": {"_type": "histogram", "values": [146, 32, 7, 4, 0, 2, 1, 1, 0, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 4889.348038673401, "_timestamp": 1581457190.7498953, "_step": 381}
{"train-loss": 1.0000079870224, "train-mrr": {"_type": "histogram", "values": [182, 5, 2, 0, 2, 1, 2, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4898.865909337997, "_timestamp": 1581457200.267766, "_step": 382}
{"epoch": 15, "train-loss": 0.9995380265664466, "train-mrr": 0.028369203492159576, "train-time-sec": 215.3514006137848, "val-loss": 1.0003587634939897, "val-mrr": 0.023325567747417248, "val-time-sec": 3.450597047805786, "_runtime": 4909.065041542053, "_timestamp": 1581457210.4668982, "_step": 383}
{"train-loss": 0.9978289008140564, "train-mrr": {"_type": "histogram", "values": [178, 14, 0, 2, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4909.203956604004, "_timestamp": 1581457210.6058133, "_step": 384}
{"train-loss": 1.0009007453918457, "train-mrr": {"_type": "histogram", "values": [184, 9, 1, 1, 0, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4918.690444946289, "_timestamp": 1581457220.0923016, "_step": 385}
{"train-loss": 0.9956275224685669, "train-mrr": {"_type": "histogram", "values": [172, 17, 1, 4, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4928.1438937187195, "_timestamp": 1581457229.5457504, "_step": 386}
{"train-loss": 1.0008577108383179, "train-mrr": {"_type": "histogram", "values": [177, 12, 2, 0, 1, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4937.581169843674, "_timestamp": 1581457238.9830265, "_step": 387}
{"train-loss": 1.0001091957092285, "train-mrr": {"_type": "histogram", "values": [177, 13, 4, 2, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4947.074676036835, "_timestamp": 1581457248.4765327, "_step": 388}
{"train-loss": 1.0000134706497192, "train-mrr": {"_type": "histogram", "values": [125, 33, 12, 14, 6, 2, 0, 1, 0, 0, 1, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.012656250037252903, 0.02031249925494194, 0.027968749403953552, 0.035624999552965164, 0.043281249701976776, 0.05093749985098839, 0.05859375, 0.06624999642372131, 0.07390625029802322, 0.08156249672174454, 0.08921875059604645, 0.09687499701976776, 0.10453125089406967, 0.11218749731779099, 0.1198437511920929, 0.1274999976158142, 0.13515624403953552, 0.14281250536441803, 0.15046875178813934, 0.15812499821186066, 0.16578124463558197, 0.17343750596046448, 0.1810937523841858, 0.1887499988079071, 0.19640624523162842, 0.20406250655651093, 0.21171875298023224, 0.21937499940395355, 0.22703124582767487, 0.23468750715255737, 0.2423437535762787, 0.25]}, "_runtime": 4956.588708162308, "_timestamp": 1581457257.9905648, "_step": 389}
{"train-loss": 1.0000258684158325, "train-mrr": {"_type": "histogram", "values": [175, 18, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4966.024000167847, "_timestamp": 1581457267.4258568, "_step": 390}
{"train-loss": 1.0000144243240356, "train-mrr": {"_type": "histogram", "values": [185, 5, 1, 2, 0, 1, 0, 1, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4975.454495429993, "_timestamp": 1581457276.856352, "_step": 391}
{"train-loss": 0.9980367422103882, "train-mrr": {"_type": "histogram", "values": [174, 17, 5, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4984.907697916031, "_timestamp": 1581457286.3095546, "_step": 392}
{"train-loss": 1.0000171661376953, "train-mrr": {"_type": "histogram", "values": [177, 15, 2, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 4994.352667331696, "_timestamp": 1581457295.754524, "_step": 393}
{"train-loss": 1.0000048875808716, "train-mrr": {"_type": "histogram", "values": [177, 15, 0, 1, 0, 0, 1, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5003.8947167396545, "_timestamp": 1581457305.2965734, "_step": 394}
{"train-loss": 1.0000044107437134, "train-mrr": {"_type": "histogram", "values": [149, 28, 8, 5, 2, 3, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5013.396487951279, "_timestamp": 1581457314.7983446, "_step": 395}
{"train-loss": 1.0003721714019775, "train-mrr": {"_type": "histogram", "values": [175, 16, 5, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5022.891174554825, "_timestamp": 1581457324.2930312, "_step": 396}
{"train-loss": 1.0000741481781006, "train-mrr": {"_type": "histogram", "values": [157, 22, 4, 3, 1, 1, 3, 2, 1, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5032.386478185654, "_timestamp": 1581457333.7883348, "_step": 397}
{"train-loss": 0.9980858564376831, "train-mrr": {"_type": "histogram", "values": [189, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5041.8867790699005, "_timestamp": 1581457343.2886357, "_step": 398}
{"train-loss": 1.0000094175338745, "train-mrr": {"_type": "histogram", "values": [182, 8, 2, 1, 1, 2, 0, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5051.361723423004, "_timestamp": 1581457352.76358, "_step": 399}
{"train-loss": 1.0000101327896118, "train-mrr": {"_type": "histogram", "values": [188, 2, 2, 1, 0, 1, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5060.807673692703, "_timestamp": 1581457362.2095304, "_step": 400}
{"train-loss": 1.0000134706497192, "train-mrr": {"_type": "histogram", "values": [178, 13, 3, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5070.323351621628, "_timestamp": 1581457371.7252083, "_step": 401}
{"train-loss": 1.0000030994415283, "train-mrr": {"_type": "histogram", "values": [179, 10, 2, 1, 0, 0, 1, 3, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5079.876143693924, "_timestamp": 1581457381.2780004, "_step": 402}
{"train-loss": 0.9956675171852112, "train-mrr": {"_type": "histogram", "values": [170, 18, 1, 3, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5089.366260051727, "_timestamp": 1581457390.7681167, "_step": 403}
{"train-loss": 0.9997027516365051, "train-mrr": {"_type": "histogram", "values": [187, 5, 0, 2, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5098.880822896957, "_timestamp": 1581457400.2826796, "_step": 404}
{"train-loss": 1.0000052452087402, "train-mrr": {"_type": "histogram", "values": [188, 4, 0, 1, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5108.355004787445, "_timestamp": 1581457409.7568614, "_step": 405}
{"train-loss": 1.0000194311141968, "train-mrr": {"_type": "histogram", "values": [113, 27, 21, 8, 10, 9, 3, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.011093749664723873, 0.01718750037252903, 0.023281250149011612, 0.029374999925494194, 0.035468749701976776, 0.04156250134110451, 0.04765624925494194, 0.05375000089406967, 0.0598437525331974, 0.06593750417232513, 0.07203125208616257, 0.078125, 0.08421874791383743, 0.09031250327825546, 0.0964062511920929, 0.10249999910593033, 0.10859375447034836, 0.11468750238418579, 0.12078125029802322, 0.12687499821186066, 0.1329687535762787, 0.13906250894069672, 0.14515624940395355, 0.15125000476837158, 0.15734374523162842, 0.16343750059604645, 0.16953125596046448, 0.1756249964237213, 0.18171875178813934, 0.18781250715255737, 0.1939062476158142, 0.20000000298023224]}, "_runtime": 5117.866721391678, "_timestamp": 1581457419.268578, "_step": 406}
{"epoch": 16, "train-loss": 0.9994877943323112, "train-mrr": 0.0281978418363232, "train-time-sec": 215.53939580917358, "val-loss": 1.0003228234617334, "val-mrr": 0.02468540480262355, "val-time-sec": 3.4204556941986084, "_runtime": 5128.060645580292, "_timestamp": 1581457429.4625022, "_step": 407}
{"train-loss": 1.0001338720321655, "train-mrr": {"_type": "histogram", "values": [184, 1, 3, 2, 1, 0, 2, 1, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5128.205704212189, "_timestamp": 1581457429.6075609, "_step": 408}
{"train-loss": 1.0000193119049072, "train-mrr": {"_type": "histogram", "values": [186, 6, 0, 1, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5137.688176393509, "_timestamp": 1581457439.090033, "_step": 409}
{"train-loss": 1.0000030994415283, "train-mrr": {"_type": "histogram", "values": [187, 2, 1, 3, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5147.217267036438, "_timestamp": 1581457448.6191237, "_step": 410}
{"train-loss": 0.9994454383850098, "train-mrr": {"_type": "histogram", "values": [188, 3, 0, 1, 0, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5156.641398429871, "_timestamp": 1581457458.043255, "_step": 411}
{"train-loss": 1.0000107288360596, "train-mrr": {"_type": "histogram", "values": [180, 6, 2, 3, 3, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5166.155782222748, "_timestamp": 1581457467.557639, "_step": 412}
{"train-loss": 1.0000174045562744, "train-mrr": {"_type": "histogram", "values": [184, 2, 5, 0, 0, 0, 1, 1, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5175.657759189606, "_timestamp": 1581457477.0596159, "_step": 413}
{"train-loss": 1.0000168085098267, "train-mrr": {"_type": "histogram", "values": [184, 4, 0, 2, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5185.113103151321, "_timestamp": 1581457486.5149598, "_step": 414}
{"train-loss": 0.9956830739974976, "train-mrr": {"_type": "histogram", "values": [182, 4, 1, 2, 3, 1, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5194.596715927124, "_timestamp": 1581457495.9985726, "_step": 415}
{"train-loss": 1.0000731945037842, "train-mrr": {"_type": "histogram", "values": [152, 23, 11, 3, 1, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5204.145232915878, "_timestamp": 1581457505.5470896, "_step": 416}
{"train-loss": 0.9977163672447205, "train-mrr": {"_type": "histogram", "values": [183, 5, 2, 1, 3, 0, 0, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5213.6631731987, "_timestamp": 1581457515.0650299, "_step": 417}
{"train-loss": 1.0000333786010742, "train-mrr": {"_type": "histogram", "values": [152, 36, 6, 0, 1, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5223.095271587372, "_timestamp": 1581457524.4971282, "_step": 418}
{"train-loss": 1.0000214576721191, "train-mrr": {"_type": "histogram", "values": [174, 13, 2, 1, 0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5232.573050260544, "_timestamp": 1581457533.974907, "_step": 419}
{"train-loss": 1.0008641481399536, "train-mrr": {"_type": "histogram", "values": [184, 5, 0, 1, 1, 1, 2, 1, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5242.031275987625, "_timestamp": 1581457543.4331326, "_step": 420}
{"train-loss": 1.0000020265579224, "train-mrr": {"_type": "histogram", "values": [157, 23, 2, 3, 3, 5, 1, 0, 1, 0, 0, 0, 2, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5251.46906876564, "_timestamp": 1581457552.8709254, "_step": 421}
{"train-loss": 0.9968916177749634, "train-mrr": {"_type": "histogram", "values": [186, 5, 2, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5260.95409822464, "_timestamp": 1581457562.355955, "_step": 422}
{"train-loss": 1.0000200271606445, "train-mrr": {"_type": "histogram", "values": [187, 3, 4, 1, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5270.4236216545105, "_timestamp": 1581457571.8254783, "_step": 423}
{"train-loss": 1.0000028610229492, "train-mrr": {"_type": "histogram", "values": [139, 34, 14, 2, 3, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 5279.867458105087, "_timestamp": 1581457581.2693148, "_step": 424}
{"train-loss": 1.0000044107437134, "train-mrr": {"_type": "histogram", "values": [159, 18, 12, 3, 2, 0, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5289.331991910934, "_timestamp": 1581457590.7338486, "_step": 425}
{"train-loss": 1.0000026226043701, "train-mrr": {"_type": "histogram", "values": [135, 26, 9, 8, 4, 7, 1, 2, 1, 3, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 5298.825214385986, "_timestamp": 1581457600.227071, "_step": 426}
{"train-loss": 1.0000557899475098, "train-mrr": {"_type": "histogram", "values": [149, 27, 10, 4, 0, 2, 1, 0, 1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5308.269433498383, "_timestamp": 1581457609.6712902, "_step": 427}
{"train-loss": 0.9999961853027344, "train-mrr": {"_type": "histogram", "values": [178, 8, 3, 3, 1, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5317.701530456543, "_timestamp": 1581457619.103387, "_step": 428}
{"train-loss": 1.000118613243103, "train-mrr": {"_type": "histogram", "values": [190, 3, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5327.16535615921, "_timestamp": 1581457628.5672128, "_step": 429}
{"train-loss": 1.0000327825546265, "train-mrr": {"_type": "histogram", "values": [184, 4, 2, 5, 0, 1, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5336.613012075424, "_timestamp": 1581457638.0148687, "_step": 430}
{"epoch": 17, "train-loss": 0.9994838006112358, "train-mrr": 0.028483455781365786, "train-time-sec": 215.2563033103943, "val-loss": 1.0002343403665643, "val-mrr": 0.024321305547889912, "val-time-sec": 3.443479299545288, "_runtime": 5346.801894903183, "_timestamp": 1581457648.2037516, "_step": 431}
{"train-loss": 1.000001311302185, "train-mrr": {"_type": "histogram", "values": [190, 3, 0, 0, 0, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5346.950126171112, "_timestamp": 1581457648.3519828, "_step": 432}
{"train-loss": 0.9959193468093872, "train-mrr": {"_type": "histogram", "values": [182, 2, 0, 5, 2, 0, 2, 0, 0, 0, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5356.453191280365, "_timestamp": 1581457657.855048, "_step": 433}
{"train-loss": 1.0001221895217896, "train-mrr": {"_type": "histogram", "values": [180, 5, 4, 2, 0, 3, 0, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5365.97261428833, "_timestamp": 1581457667.374471, "_step": 434}
{"train-loss": 1.0000113248825073, "train-mrr": {"_type": "histogram", "values": [161, 25, 3, 2, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5375.443870544434, "_timestamp": 1581457676.8457272, "_step": 435}
{"train-loss": 0.9975770711898804, "train-mrr": {"_type": "histogram", "values": [181, 5, 3, 5, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5384.902901172638, "_timestamp": 1581457686.3047578, "_step": 436}
{"train-loss": 1.0000109672546387, "train-mrr": {"_type": "histogram", "values": [176, 16, 0, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5394.377432584763, "_timestamp": 1581457695.7792892, "_step": 437}
{"train-loss": 1.0000020265579224, "train-mrr": {"_type": "histogram", "values": [187, 5, 2, 2, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5403.8743188381195, "_timestamp": 1581457705.2761755, "_step": 438}
{"train-loss": 1.0000061988830566, "train-mrr": {"_type": "histogram", "values": [183, 7, 4, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5413.340653657913, "_timestamp": 1581457714.7425103, "_step": 439}
{"train-loss": 1.000024437904358, "train-mrr": {"_type": "histogram", "values": [188, 5, 0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5422.81440615654, "_timestamp": 1581457724.2162628, "_step": 440}
{"train-loss": 1.000002384185791, "train-mrr": {"_type": "histogram", "values": [177, 8, 1, 4, 0, 2, 0, 1, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5432.311610221863, "_timestamp": 1581457733.713467, "_step": 441}
{"train-loss": 1.0003447532653809, "train-mrr": {"_type": "histogram", "values": [109, 40, 20, 8, 8, 3, 3, 2, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.011093749664723873, 0.01718750037252903, 0.023281250149011612, 0.029374999925494194, 0.035468749701976776, 0.04156250134110451, 0.04765624925494194, 0.05375000089406967, 0.0598437525331974, 0.06593750417232513, 0.07203125208616257, 0.078125, 0.08421874791383743, 0.09031250327825546, 0.0964062511920929, 0.10249999910593033, 0.10859375447034836, 0.11468750238418579, 0.12078125029802322, 0.12687499821186066, 0.1329687535762787, 0.13906250894069672, 0.14515624940395355, 0.15125000476837158, 0.15734374523162842, 0.16343750059604645, 0.16953125596046448, 0.1756249964237213, 0.18171875178813934, 0.18781250715255737, 0.1939062476158142, 0.20000000298023224]}, "_runtime": 5441.792613744736, "_timestamp": 1581457743.1944704, "_step": 442}
{"train-loss": 1.0000200271606445, "train-mrr": {"_type": "histogram", "values": [173, 17, 7, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5451.292022705078, "_timestamp": 1581457752.6938794, "_step": 443}
{"train-loss": 0.9936196208000183, "train-mrr": {"_type": "histogram", "values": [181, 4, 2, 2, 1, 1, 2, 0, 0, 0, 1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5460.763695478439, "_timestamp": 1581457762.1655521, "_step": 444}
{"train-loss": 1.0000094175338745, "train-mrr": {"_type": "histogram", "values": [118, 41, 20, 7, 3, 1, 2, 0, 0, 0, 0, 3, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.012656250037252903, 0.02031249925494194, 0.027968749403953552, 0.035624999552965164, 0.043281249701976776, 0.05093749985098839, 0.05859375, 0.06624999642372131, 0.07390625029802322, 0.08156249672174454, 0.08921875059604645, 0.09687499701976776, 0.10453125089406967, 0.11218749731779099, 0.1198437511920929, 0.1274999976158142, 0.13515624403953552, 0.14281250536441803, 0.15046875178813934, 0.15812499821186066, 0.16578124463558197, 0.17343750596046448, 0.1810937523841858, 0.1887499988079071, 0.19640624523162842, 0.20406250655651093, 0.21171875298023224, 0.21937499940395355, 0.22703124582767487, 0.23468750715255737, 0.2423437535762787, 0.25]}, "_runtime": 5470.215317726135, "_timestamp": 1581457771.6171744, "_step": 445}
{"train-loss": 1.0000015497207642, "train-mrr": {"_type": "histogram", "values": [180, 4, 2, 2, 0, 2, 4, 1, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5479.741628408432, "_timestamp": 1581457781.143485, "_step": 446}
{"train-loss": 1.0000029802322388, "train-mrr": {"_type": "histogram", "values": [181, 7, 4, 4, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5489.25136756897, "_timestamp": 1581457790.6532242, "_step": 447}
{"train-loss": 1.0000529289245605, "train-mrr": {"_type": "histogram", "values": [172, 16, 8, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5498.783025979996, "_timestamp": 1581457800.1848826, "_step": 448}
{"train-loss": 1.0000112056732178, "train-mrr": {"_type": "histogram", "values": [152, 23, 10, 7, 1, 2, 0, 0, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5508.220378637314, "_timestamp": 1581457809.6222353, "_step": 449}
{"train-loss": 1.0000545978546143, "train-mrr": {"_type": "histogram", "values": [172, 12, 6, 3, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5517.678242683411, "_timestamp": 1581457819.0800993, "_step": 450}
{"train-loss": 1.0000016689300537, "train-mrr": {"_type": "histogram", "values": [170, 15, 2, 1, 1, 1, 0, 1, 2, 0, 2, 2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 5527.157467842102, "_timestamp": 1581457828.5593245, "_step": 451}
{"train-loss": 1.0000011920928955, "train-mrr": {"_type": "histogram", "values": [187, 1, 2, 2, 2, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5536.62201666832, "_timestamp": 1581457838.0238733, "_step": 452}
{"train-loss": 1.0000020265579224, "train-mrr": {"_type": "histogram", "values": [183, 3, 4, 0, 0, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5546.129837274551, "_timestamp": 1581457847.531694, "_step": 453}
{"train-loss": 1.0000028610229492, "train-mrr": {"_type": "histogram", "values": [183, 4, 2, 3, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5555.627021074295, "_timestamp": 1581457857.0288777, "_step": 454}
{"epoch": 18, "train-loss": 0.9994290282976039, "train-mrr": 0.0275682263328156, "train-time-sec": 215.57177138328552, "val-loss": 1.0002197042891854, "val-mrr": 0.019765462389117795, "val-time-sec": 3.4449687004089355, "_runtime": 5565.8608820438385, "_timestamp": 1581457867.2627387, "_step": 455}
{"train-loss": 1.0000039339065552, "train-mrr": {"_type": "histogram", "values": [186, 0, 2, 1, 1, 2, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5565.998849153519, "_timestamp": 1581457867.4007058, "_step": 456}
{"train-loss": 1.0000038146972656, "train-mrr": {"_type": "histogram", "values": [189, 4, 0, 0, 0, 2, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5575.430112123489, "_timestamp": 1581457876.8319688, "_step": 457}
{"train-loss": 1.0000064373016357, "train-mrr": {"_type": "histogram", "values": [186, 0, 2, 1, 1, 0, 3, 1, 1, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5584.917515039444, "_timestamp": 1581457886.3193717, "_step": 458}
{"train-loss": 1.0000087022781372, "train-mrr": {"_type": "histogram", "values": [181, 2, 1, 4, 0, 4, 0, 4, 0, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5594.392523050308, "_timestamp": 1581457895.7943797, "_step": 459}
{"train-loss": 1.0000802278518677, "train-mrr": {"_type": "histogram", "values": [183, 4, 3, 3, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5603.924350500107, "_timestamp": 1581457905.3262072, "_step": 460}
{"train-loss": 1.0003305673599243, "train-mrr": {"_type": "histogram", "values": [176, 12, 6, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5613.420160531998, "_timestamp": 1581457914.8220172, "_step": 461}
{"train-loss": 1.000014066696167, "train-mrr": {"_type": "histogram", "values": [182, 11, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5622.911488056183, "_timestamp": 1581457924.3133447, "_step": 462}
{"train-loss": 1.0000113248825073, "train-mrr": {"_type": "histogram", "values": [184, 10, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5632.4196627140045, "_timestamp": 1581457933.8215194, "_step": 463}
{"train-loss": 1.0000139474868774, "train-mrr": {"_type": "histogram", "values": [180, 12, 2, 0, 0, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5641.89169716835, "_timestamp": 1581457943.2935538, "_step": 464}
{"train-loss": 1.0000028610229492, "train-mrr": {"_type": "histogram", "values": [140, 34, 15, 5, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.015260417014360428, 0.02552083320915699, 0.03578124940395355, 0.046041667461395264, 0.056302085518836975, 0.06656250357627869, 0.0768229216337204, 0.08708333224058151, 0.09734375029802322, 0.10760416835546494, 0.11786458641290665, 0.12812499701976776, 0.13838541507720947, 0.14864583313465118, 0.1589062511920929, 0.1691666692495346, 0.17942708730697632, 0.18968750536441803, 0.19994792342185974, 0.21020834147930145, 0.22046875953674316, 0.23072917759418488, 0.2409895956516266, 0.2512499988079071, 0.26151043176651, 0.2717708349227905, 0.28203126788139343, 0.29229167103767395, 0.30255210399627686, 0.3128125071525574, 0.3230729401111603, 0.3333333432674408]}, "_runtime": 5651.296385526657, "_timestamp": 1581457952.6982422, "_step": 465}
{"train-loss": 1.0000213384628296, "train-mrr": {"_type": "histogram", "values": [181, 7, 2, 2, 1, 1, 1, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5660.733295679092, "_timestamp": 1581457962.1351523, "_step": 466}
{"train-loss": 1.0000026226043701, "train-mrr": {"_type": "histogram", "values": [182, 2, 5, 3, 0, 1, 1, 3, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5670.209991931915, "_timestamp": 1581457971.6118486, "_step": 467}
{"train-loss": 1.0000015497207642, "train-mrr": {"_type": "histogram", "values": [188, 7, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5679.668692827225, "_timestamp": 1581457981.0705495, "_step": 468}
{"train-loss": 1.0000590085983276, "train-mrr": {"_type": "histogram", "values": [189, 1, 0, 2, 1, 2, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5689.188565254211, "_timestamp": 1581457990.590422, "_step": 469}
{"train-loss": 0.995840847492218, "train-mrr": {"_type": "histogram", "values": [191, 1, 0, 2, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5698.6539578437805, "_timestamp": 1581458000.0558145, "_step": 470}
{"train-loss": 1.0000067949295044, "train-mrr": {"_type": "histogram", "values": [184, 3, 3, 5, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5708.098395347595, "_timestamp": 1581458009.500252, "_step": 471}
{"train-loss": 1.000003457069397, "train-mrr": {"_type": "histogram", "values": [191, 1, 1, 1, 0, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5717.5837495327, "_timestamp": 1581458018.9856062, "_step": 472}
{"train-loss": 1.000003457069397, "train-mrr": {"_type": "histogram", "values": [172, 14, 0, 3, 1, 0, 2, 1, 2, 0, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5727.044863700867, "_timestamp": 1581458028.4467204, "_step": 473}
{"train-loss": 1.000004768371582, "train-mrr": {"_type": "histogram", "values": [181, 5, 2, 6, 1, 0, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5736.474671363831, "_timestamp": 1581458037.876528, "_step": 474}
{"train-loss": 1.0000070333480835, "train-mrr": {"_type": "histogram", "values": [120, 55, 10, 1, 0, 1, 2, 1, 0, 0, 0, 1, 2, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.011093749664723873, 0.01718750037252903, 0.023281250149011612, 0.029374999925494194, 0.035468749701976776, 0.04156250134110451, 0.04765624925494194, 0.05375000089406967, 0.0598437525331974, 0.06593750417232513, 0.07203125208616257, 0.078125, 0.08421874791383743, 0.09031250327825546, 0.0964062511920929, 0.10249999910593033, 0.10859375447034836, 0.11468750238418579, 0.12078125029802322, 0.12687499821186066, 0.1329687535762787, 0.13906250894069672, 0.14515624940395355, 0.15125000476837158, 0.15734374523162842, 0.16343750059604645, 0.16953125596046448, 0.1756249964237213, 0.18171875178813934, 0.18781250715255737, 0.1939062476158142, 0.20000000298023224]}, "_runtime": 5745.922561407089, "_timestamp": 1581458047.324418, "_step": 475}
{"train-loss": 1.000004529953003, "train-mrr": {"_type": "histogram", "values": [184, 7, 2, 1, 0, 1, 0, 2, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5755.428004741669, "_timestamp": 1581458056.8298614, "_step": 476}
{"train-loss": 1.0000088214874268, "train-mrr": {"_type": "histogram", "values": [185, 1, 2, 4, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2], "bins": [0.004999999888241291, 0.02046874910593033, 0.03593749925494194, 0.05140624940395355, 0.06687500327825546, 0.08234374970197678, 0.09781250357627869, 0.11328125, 0.1287499964237213, 0.14421874284744263, 0.15968750417232513, 0.17515625059604645, 0.19062499701976776, 0.20609374344348907, 0.22156250476837158, 0.2370312511920929, 0.2524999976158142, 0.2679687440395355, 0.28343749046325684, 0.29890623688697815, 0.31437501311302185, 0.32984375953674316, 0.3453125059604645, 0.3607812523841858, 0.3762499988079071, 0.3917187452316284, 0.40718749165534973, 0.42265623807907104, 0.43812501430511475, 0.45359376072883606, 0.4690625071525574, 0.4845312535762787, 0.5]}, "_runtime": 5764.909708976746, "_timestamp": 1581458066.3115656, "_step": 477}
{"train-loss": 1.0000094175338745, "train-mrr": {"_type": "histogram", "values": [187, 3, 4, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1], "bins": [0.004999999888241291, 0.03609374910593033, 0.06718750298023224, 0.09828124940395355, 0.12937499582767487, 0.16046875715255737, 0.1915625035762787, 0.22265625, 0.2537499964237213, 0.2848437428474426, 0.31593748927116394, 0.34703123569488525, 0.37812501192092896, 0.40921875834465027, 0.4403125047683716, 0.4714062511920929, 0.5024999976158142, 0.5335937738418579, 0.5646874904632568, 0.5957812666893005, 0.6268749833106995, 0.6579687595367432, 0.6890624761581421, 0.7201562523841858, 0.7512500286102295, 0.7823437452316284, 0.8134375214576721, 0.844531238079071, 0.8756250143051147, 0.9067187309265137, 0.9378125071525574, 0.9689062237739563, 1.0]}, "_runtime": 5774.350721359253, "_timestamp": 1581458075.752578, "_step": 478}
{"epoch": 19, "train-loss": 0.9995272393325265, "train-mrr": 0.026295552907485358, "train-time-sec": 215.1491665840149, "val-loss": 1.0002381252615076, "val-mrr": 0.01986670716812736, "val-time-sec": 3.393352508544922, "_runtime": 5784.4395389556885, "_timestamp": 1581458085.8413956, "_step": 479}
{"Examples-Test": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[745, "java", "Is24XmlUtils.getContext", "```java\npublic synchronized static JAXBContext getContext() throws JAXBException {\n        if (JAXB == null) initContext(Thread.currentThread().getContextClassLoader());\n        return JAXB;\n    }\n```"], [480, "java", "LogServiceImpl.setLoggerLevel", "```java\npublic void setLoggerLevel(String loggerName, String level) throws ManagementConsoleException {\r\n\r\n    sleeConnection.getSleeManagementMBeanUtils().getLogManagementMBeanUtils().setLoggerLevel(loggerName, level);\r\n\r\n  }\n```"], [126, "java", "Observable.hide", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> hide() {\n        return RxJavaPlugins.onAssembly(new ObservableHide<T>(this));\n    }\n```"], [432, "java", "FileAppender.setFile", "```java\npublic void setFile(String file) {\n    if (file == null) {\n      fileName = null;\n    } else {\n      // Trim spaces from both ends. The users probably does not want\n      // trailing spaces in file names.\n      fileName = file.trim();\n    }\n  }\n```"], [549, "java", "Properties.inspectProperties", "```java\nprotected HashMap<String, PropertyDescriptor> inspectProperties() {\n\t\tboolean scanAccessible = classDescriptor.isScanAccessible();\n\t\tClass type = classDescriptor.getType();\n\n\t\tHashMap<String, PropertyDescriptor> map = new HashMap<>();\n\n\t\tMethod[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type);\n\n\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t// first find the getters, and then the setters!\n\t\t\tfor (Method method : methods) {\n\t\t\t\tif (Modifier.isStatic(method.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static methods\n\t\t\t\t}\n\n\t\t\t\tboolean add = false;\n\t\t\t\tboolean issetter = false;\n\n\t\t\t\tString propertyName;\n\n\t\t\t\tif (iteration == 0) {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertyGetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertySetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (add) {\n\t\t\t\t\tMethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true);\n\t\t\t\t\taddProperty(map, propertyName, methodDescriptor, issetter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classDescriptor.isIncludeFieldsAsProperties()) {\n\t\t\tFieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors();\n\t\t\tString[] prefix = classDescriptor.getPropertyFieldPrefix();\n\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldDescriptors) {\n\t\t\t\tField field = fieldDescriptor.getField();\n\n\t\t\t\tif (Modifier.isStatic(field.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static fields\n\t\t\t\t}\n\n\t\t\t\tString name = field.getName();\n\n\t\t\t\tif (prefix != null) {\n\t\t\t\t\tfor (String p : prefix) {\n\t\t\t\t\t\tif (!name.startsWith(p)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = name.substring(p.length());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!map.containsKey(name)) {\n\t\t\t\t\t// add missing field as a potential property\n\t\t\t\t\tmap.put(name, createPropertyDescriptor(name, fieldDescriptor));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn map;\n\t}\n```"], [59, "java", "ExceptionHelper.wrapOrThrow", "```java\npublic static RuntimeException wrapOrThrow(Throwable error) {\n        if (error instanceof Error) {\n            throw (Error)error;\n        }\n        if (error instanceof RuntimeException) {\n            return (RuntimeException)error;\n        }\n        return new RuntimeException(error);\n    }\n```"], [606, "java", "SegmentedByteArray.rangeEquals", "```java\npublic boolean rangeEquals(long rangeStart, SegmentedByteArray compareTo, long cmpStart, int length) {\n    \tfor(int i=0;i<length;i++)\n    \t\tif(get(rangeStart + i) != compareTo.get(cmpStart + i))\n    \t\t\treturn false;\n    \treturn true;\n    }\n```"], [18, "java", "Update.getVersion", "```java\npublic String getVersion() throws MalformedElementException {\n        Element version = getFirstChild(root, \"version\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingVersionElmt\"), version); //$NON-NLS-1$\n        String href = getChildText(version, \"href\", true); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingHrefElmt\"), href); //$NON-NLS-1$\n        return decodeHref(href);\n    }\n```"], [346, "java", "AbstractRequestMatcherRegistry.antMatchers", "```java\npublic C antMatchers(String... antPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure antMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.antMatchers(antPatterns));\n\t}\n```"], [439, "java", "AbstractRefreshMetricsListener.noFailRefreshEndMetricsReporting", "```java\nprivate final void noFailRefreshEndMetricsReporting(ConsumerRefreshMetrics refreshMetrics) {\n        try {\n            refreshEndMetricsReporting(refreshMetrics);\n        } catch (Exception e) {\n            // Metric reporting is not considered critical to consumer refresh. Log exceptions and continue.\n            log.log(Level.SEVERE, \"Encountered an exception in reporting consumer refresh metrics, ignoring exception and continuing with consumer refresh\", e);\n        }\n    }\n```"], [49, "java", "JtxTransaction.commitOrRollback", "```java\nprotected void commitOrRollback(boolean doCommit) {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (doCommit) {\n\t\t\t\tlog.debug(\"Commit JTX\");\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Rollback JTX\");\n\t\t\t}\n\t\t}\n\t\tboolean forcedRollback = false;\n\t\tif (!isNoTransaction()) {\n\t\t\tif (isRollbackOnly()) {\n\t\t\t\tif (doCommit) {\n\t\t\t\t\tdoCommit = false;\n\t\t\t\t\tforcedRollback = true;\n\t\t\t\t}\n\t\t\t} else if (!isActive()) {\n\t\t\t\tif (isCompleted()) {\n\t\t\t\t\tthrow new JtxException(\"TX is already completed, commit or rollback should be called once per TX\");\n\t\t\t\t}\n\t\t\t\tthrow new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\"));\n\t\t\t}\n\t\t}\n\t\tif (doCommit) {\n\t\t\tcommitAllResources();\n\t\t} else {\n\t\t\trollbackAllResources(forcedRollback);\n\t\t}\n\t}\n```"], [352, "java", "PrologParser.main", "```java\npublic static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }\n```"], [268, "java", "FileNameUtil.concat", "```java\npublic static String concat(final String basePath, final String fullFilenameToAdd) {\n\t\treturn doConcat(basePath, fullFilenameToAdd, SYSTEM_SEPARATOR);\n\t}\n```"], [387, "java", "UserClient.updateUser", "```java\npublic User updateUser(User userParam)\n    {\n        if(userParam != null && this.serviceTicket != null)\n        {\n            userParam.setServiceTicket(this.serviceTicket);\n        }\n\n        return new User(this.postJson(\n                userParam, WS.Path.User.Version1.userUpdate()));\n    }\n```"], [825, "java", "RollupService.setServerTime", "```java\npublic synchronized void setServerTime(long millis) {\n        log.info(\"Manually setting server time to {}  {}\", millis, new java.util.Date(millis));\n        context.setCurrentTimeMillis(millis);\n    }\n```"], [808, "java", "EmailFilter.or", "```java\nprotected void or(final SearchTerm searchTerm) {\n\t\tif (this.searchTerm == null) {\n\t\t\tthis.searchTerm = searchTerm;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchTerm = new OrTerm(this.searchTerm, searchTerm);\n\t}\n```"], [511, "java", "ReteGraph.addChild", "```java\npublic boolean addChild(BaseVertex vertex) {\n        if ( vertex != null && vertices.add( vertex ) ) {\n            firePropertyChange( PROP_CHILD_ADDED,\n                                null,\n                                vertex );\n            return true;\n        }\n        return false;\n    }\n```"], [156, "java", "JPANotificationRESTController.getNotifications", "```java\n@RequestMapping(method = RequestMethod.GET)\n    @ResponseBody\n    public List<EntryDTO> getNotifications(\n            @RequestParam(value = \"page\", required = false) Integer page,\n            @RequestParam(value = \"pageSize\", required = false) Integer pageSize) {\n\n        return restService.getNotifications(page, pageSize);\n    }\n```"], [301, "java", "Iterators.limit", "```java\npublic static <E> Iterator<E> limit(Iterator<? extends E> iterator,\n\t\tint limit)\n\t{\n\t\treturn new LimitIterator<E>(iterator, limit);\n\t}\n```"], [925, "java", "Base64.encodeToString", "```java\npublic static String encodeToString(String s) {\n        try {\n            return new String(encodeToChar(s.getBytes(ENCODING), false));\n        } catch (UnsupportedEncodingException ignore) {\n            return null;\n        }\n    }\n```"], [103, "java", "AreaGrid.calculateColumns", "```java\nprivate void calculateColumns()\n    {\n        //create the sorted list of points\n        GridPoint points[] = new GridPoint[areas.size() * 2];\n        int pi = 0;\n        for (Area area : areas)\n        {\n            points[pi] = new GridPoint(area.getX1(), area, true);\n            points[pi+1] = new GridPoint(area.getX2() + 1, area, false);\n            pi += 2;\n            //X2+1 ensures that the end of one box will be on the same point\n            //as the start of the following box\n        }\n        Arrays.sort(points);\n        \n        //calculate the number of columns\n        int cnt = 0;\n        int last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n            if (!theSame(points[i].value, last))\n            { \n                last = points[i].value;\n                cnt++;\n            }\n        if (!theSame(last, abspos.getX2()))\n        \tcnt++; //last column finishes the whole area\n        width = cnt;\n        \n        //calculate the column widths and the layout\n        maxindent = 0;\n        minindent = -1;\n        cols = new int[width];\n        cnt = 0;\n        last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n        {\n            if (!theSame(points[i].value, last)) \n            {\n                cols[cnt] = points[i].value - last;\n                last = points[i].value;\n                cnt++;\n            }\n            if (points[i].begin)\n            {\n                target.getPosition(points[i].area).setX1(cnt);\n                maxindent = cnt;\n                if (minindent == -1) minindent = maxindent;\n                //points[i].node.getArea().setX1(parent.getArea().getX1() + getColOfs(cnt));\n            }\n            else\n            {\n                Rectangular pos = target.getPosition(points[i].area); \n                pos.setX2(cnt-1);\n                if (pos.getX2() < pos.getX1())\n                    pos.setX2(pos.getX1());\n                //points[i].node.getArea().setX2(parent.getArea().getX1() + getColOfs(pos.getX2()+1));\n            }\n        }\n        if (!theSame(last, abspos.getX2()))\n        \tcols[cnt] = abspos.getX2() - last;\n        if (minindent == -1)\n            minindent = 0;\n    }\n```"], [570, "java", "JdbcHelper.initialize", "```java\nprivate static void initialize() {\n\t\tString driver = ConfigHelper.getProperty(\"jdbc.driver\");\n\t\tString url = ConfigHelper.getProperty(\"jdbc.url\");\n\t\tString username = ConfigHelper.getProperty(\"jdbc.username\");\n\t\tString password = ConfigHelper.getProperty(\"jdbc.password\");\n\t\tint maxActive = ConfigHelper.getNumerProperty(\"jdbc.max.active\");\n\t\tint maxIdle = ConfigHelper.getNumerProperty(\"jdbc.max.idle\");\n\t\tAssertHelper.notNull(driver);\n\t\tAssertHelper.notNull(url);\n\t\tAssertHelper.notNull(username);\n\t\tAssertHelper.notNull(password);\n\t\t//\u521d\u59cb\u5316DBCP\u6570\u636e\u6e90\n\t\tBasicDataSource ds = new BasicDataSource();\n\t\tds.setDriverClassName(driver);\n\t\tds.setUrl(url);\n\t\tds.setUsername(username);\n\t\tds.setPassword(password);\n        if(maxActive != 0) {\n\t\t    ds.setMaxActive(maxActive);\n        }\n        if(maxIdle != 0) {\n\t\t    ds.setMaxIdle(maxIdle);\n        }\n\t\tdataSource = ds;\n\t}\n```"], [993, "java", "PasswordLoginModule.abort", "```java\n@Override\n    // Check is broken [LOG.info()]: PMD reports issues although log stmt is guarded. @todo revisit when upgrading PMD.\n    @SuppressWarnings(\"PMD.GuardLogStatementJavaUtil\")\n    public final boolean abort()\n            throws LoginException {\n\n        if (pendingSubject == null) {\n            // the login method of this module has failed earlier, hence we do not need to clean up anything\n            // return 'false' to indicate that this module's login and/or commit method failed\n            // As the login method failed, the state of the module has already been cleared and we do not know\n            // the username / domain anymore. Hence no auditing / message queue notification, and not verbose logging.\n\n            LOG.debug(\"Aborting authentication, as the authentication has failed earlier (login method)\");\n\n            return false;\n        } else if (committedSubject == null) {\n            // the login method of this module succeeded, but the overall authentication failed\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Aborting authentication: '\" + username + \"@\" + domain + \"'\");\n            }\n\n            // cache the username and domain, for they will be purged by \"cleanState()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            cleanState();\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(tempUsername).\n                    append(\"@\").\n                    append(tempDomain).\n                    toString();\n            AuditHelper.auditEvent(audit, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        } else {\n            // overall authentication succeeded and commit succeeded, but someone else's commit failed\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(username).\n                    append(\"@\").\n                    append(domain).\n                    toString();\n            AuditHelper.auditEvent(audit, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // cache the username and domain, for they will be purged by \"logout()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            logout();\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        }\n    }\n```"], [123, "java", "Parser.parseOptionalBody", "```java\nprivate void parseOptionalBody( Node parent, String tag, String bodyType ) \n        throws JasperException \n    {\n\tif (reader.matches(\"/>\")) {\n\t    // EmptyBody\n\t    return;\n\t}\n\n\tif (!reader.matches(\">\")) {\n\t    err.jspError(reader.mark(), \"jsp.error.unterminated\",\n\t\t\t \"&lt;\" + tag );\n\t}\n        \n        if( reader.matchesETag( tag ) ) {\n            // EmptyBody\n            return;\n        }\n        \n        if( !parseJspAttributeAndBody( parent, tag, bodyType ) ) {\n            // Must be ( '>' # Body ETag )\n            parseBody(parent, tag, bodyType );\n        }\n    }\n```"], [132, "java", "Completable.doOnComplete", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable doOnComplete(Action onComplete) {\n        return doOnLifecycle(Functions.emptyConsumer(), Functions.emptyConsumer(),\n                onComplete, Functions.EMPTY_ACTION,\n                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);\n    }\n```"], [776, "java", "Strings.trimLeadingCharacter", "```java\npublic static String trimLeadingCharacter(String str, final char leadingCharacter)\n   {\n      return trimLeadingCharacter(str, new CharacterChecker()\n      {\n         public boolean isCharacterLegal(char character)\n         {\n            return character == leadingCharacter;\n         }\n      });\n   }\n```"], [412, "java", "ProxettaAsmUtil.resolveJavaVersion", "```java\npublic static int resolveJavaVersion(final int version) {\n\t\tfinal int javaVersionNumber = SystemUtil.info().getJavaVersionNumber();\n\t\tfinal int platformVersion = javaVersionNumber - 8 + 52;\n\n\t\treturn version > platformVersion ? version : platformVersion;\n\t}\n```"], [315, "java", "OpenRtbJsonUtils.startArray", "```java\npublic static void startArray(JsonParser par) throws IOException {\n    JsonToken token = par.getCurrentToken();\n    if (token == null || token == JsonToken.FIELD_NAME) {\n      token = par.nextToken();\n    }\n    if (token == JsonToken.START_ARRAY) {\n      par.nextToken();\n    } else {\n      throw new JsonParseException(par, \"Expected start of array\");\n    }\n  }\n```"], [267, "java", "Observable.take", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler) {\n        return takeUntil(timer(time, unit, scheduler));\n    }\n```"], [669, "java", "AbstractEndpoint.executeAndHandle", "```java\nprotected HttpResponse executeAndHandle(Request request)\n            throws IOException, IllegalArgumentException, IllegalAccessException, FileNotFoundException, IllegalStateException {\n        HttpResponse response = execute(request);\n        handleResponse(response, request);\n        return response;\n    }\n```"], [377, "java", "PipelineConfigurationUpgrader.upgradeIfNecessary", "```java\npublic PipelineConfiguration upgradeIfNecessary(\n      StageLibraryTask library,\n      PipelineConfiguration pipelineConf,\n      List<Issue> issues\n  ) {\n    Preconditions.checkArgument(issues.isEmpty(), \"Given list of issues must be empty.\");\n    boolean upgrade;\n\n    // Firstly upgrading schema if needed, then data\n    upgrade = needsSchemaUpgrade(pipelineConf, issues);\n    if(upgrade && issues.isEmpty()) {\n      pipelineConf = upgradeSchema(library, pipelineConf, issues);\n    }\n\n    // Something went wrong with the schema upgrade\n    if(!issues.isEmpty()) {\n      return null;\n    }\n\n    // Upgrading data if needed\n    upgrade = needsUpgrade(library, pipelineConf, issues);\n    if (upgrade && issues.isEmpty()) {\n      //we try to upgrade only if we have all defs for the pipelineConf\n      pipelineConf = upgrade(library, pipelineConf, issues);\n    }\n    return (issues.isEmpty()) ? pipelineConf : null;\n  }\n```"], [565, "java", "TimerServiceImpl.getWaitingOnTxCompletionTimers", "```java\nprivate Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }\n```"], [122, "java", "RequestHandler.mainRequestHandler", "```java\n@ServiceMethod\n    public void mainRequestHandler(DataStoreRequest dataStoreRequest) {\n\n\n        if (verbose || debug) {\n            logger.info(\"RequestHandler::mainRequestHandler\", dataStoreRequest);\n        }\n        switch (dataStoreRequest.action()) {\n            case GET:\n                masterDataStore.get((GetRequest) dataStoreRequest);\n                break;\n            case GET_LOCAL_DB:\n                handleGetLocalDbVerb(dataStoreRequest);\n                break;\n            case GET_MEM:\n                handleGetMemVerb(dataStoreRequest);\n                break;\n            case SET:\n                masterDataStore.set((SetRequest) dataStoreRequest);\n                break;\n            case SET_BROADCAST:\n                handleSetAndBroadCastVerb(dataStoreRequest);\n                break;\n            case SET_IF_NOT_EXIST:\n                handleSetIfNotExistsVerb(dataStoreRequest);\n                break;\n            case SET_BATCH:\n                handleSetBatch(dataStoreRequest);\n                break;\n            case SET_BATCH_IF_NOT_EXISTS:\n                handleSetBatchIfNotExists(dataStoreRequest);\n                break;\n            case SET_SOURCE:\n                handleSetSource(dataStoreRequest);\n                break;\n            case GET_SOURCE:\n                handleGetSource(dataStoreRequest);\n                break;\n\n            case BATCH_READ:\n                handleBatchRead(dataStoreRequest);\n                break;\n\n            case CLEAR_STATS:\n                handleClearStats(dataStoreRequest);\n                break;\n\n\n            case GET_STATS:\n                handleGetStats(dataStoreRequest);\n                break;\n\n\n            case REMOVE:\n                handleRemove(dataStoreRequest);\n                break;\n\n\n            case REMOVE_SOURCE:\n                handleRemoveSource(dataStoreRequest);\n                break;\n\n            case METHOD_CALL:\n                handleMethodCall((MethodCall) dataStoreRequest);\n                break;\n\n            case SEARCH:\n                handleSearchVerb(dataStoreRequest);\n                break;\n\n            default:\n                puts(dataStoreRequest);\n\n\n        }\n        trackCall(dataStoreRequest.action());\n    }\n```"], [255, "java", "AvroTypeUtil.getAvroSchemaFromHeader", "```java\npublic static String getAvroSchemaFromHeader(Record record, String headerName) throws DataGeneratorException {\n    String jsonSchema = record.getHeader().getAttribute(headerName);\n    if(jsonSchema == null || jsonSchema.isEmpty()) {\n      throw new DataGeneratorException(Errors.AVRO_GENERATOR_03, record.getHeader().getSourceId());\n    }\n    return jsonSchema;\n  }\n```"], [699, "java", "InterfaceRepository.addInterface", "```java\nprivate InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }\n```"], [800, "java", "StdRandom.uniform", "```java\npublic static int uniform(int a, int b)\n  {\n    if (b <= a)\n      throw new IllegalArgumentException(\"Invalid range\");\n    if ((long) b - a >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"Invalid range\");\n    return a + uniform(b - a);\n  }\n```"], [995, "java", "DapController.init", "```java\npublic void init()\n            throws ServletException\n    {\n        org.slf4j.Logger logServerStartup = org.slf4j.LoggerFactory.getLogger(\"serverStartup\");\n        logServerStartup.info(getClass().getName() + \" initialization start\");\n        try {\n            System.setProperty(\"file.encoding\", \"UTF-8\");\n            Field charset = Charset.class.getDeclaredField(\"defaultCharset\");\n            charset.setAccessible(true);\n            charset.set(null, null);\n            initialize();\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n```"], [267, "java", "OfflineClient.getIndex", "```java\n@Override\n    public @NonNull MirroredIndex getIndex(@NonNull String indexName) {\n        MirroredIndex index = null;\n        WeakReference<Object> existingIndex = indices.get(indexName);\n        if (existingIndex != null) {\n            index = (MirroredIndex)existingIndex.get();\n        }\n        if (index == null) {\n            index = new MirroredIndex(this, indexName);\n            indices.put(indexName, new WeakReference<Object>(index));\n        }\n        return index;\n    }\n```"], [127, "java", "TdsRequestedDataset.getGridDataset", "```java\npublic static GridDataset getGridDataset(HttpServletRequest request, HttpServletResponse response, String path) throws IOException {\n    TdsRequestedDataset trd = new TdsRequestedDataset(request, null);\n    if (path != null) trd.path = path;\n    return trd.openAsGridDataset(request, response);\n  }\n```"], [739, "java", "Types.isBuiltinType", "```java\npublic static boolean isBuiltinType(Type type) {\n\t\tClass<?> rawType = getRawType(type);\n\t\treturn (rawType == null) ? false : builtins.contains(rawType);\n\t}\n```"], [132, "java", "SimpleRuleStore.addRule", "```java\npublic void addRule(ElementSelector elementSelector, Action action) {\n    action.setContext(context);\n\n    List<Action> a4p = rules.get(elementSelector);\n\n    if (a4p == null) {\n      a4p = new ArrayList<Action>();\n      rules.put(elementSelector, a4p);\n    }\n\n    a4p.add(action);\n  }\n```"], [811, "java", "RpcResponseResolver.toResponseObject", "```java\nprivate static Object toResponseObject(ResponseCommand responseCommand) throws CodecException {\n        RpcResponseCommand response = (RpcResponseCommand) responseCommand;\n        response.deserialize();\n        return response.getResponseObject();\n    }\n```"], [247, "java", "OClosableLinkedContainer.checkOpenFilesLimit", "```java\nprivate void checkOpenFilesLimit() throws InterruptedException {\n    CountDownLatch ol = openLatch.get();\n    if (ol != null)\n      ol.await();\n\n    while (openFiles.get() > openLimit) {\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      //make other threads to wait till we evict entries and close evicted open files\n      if (openLatch.compareAndSet(null, latch)) {\n        while (openFiles.get() > openLimit) {\n          emptyBuffers();\n        }\n\n        latch.countDown();\n        openLatch.set(null);\n      } else {\n        ol = openLatch.get();\n\n        if (ol != null)\n          ol.await();\n      }\n    }\n  }\n```"], [540, "java", "GuiceApplicationBuilder.load", "```java\npublic GuiceApplicationBuilder load(GuiceableModule... modules) {\n    return newBuilder(delegate.load(Scala.varargs(modules)));\n  }\n```"], [877, "java", "ProfileEntityArrayAttributeValue.setByte", "```java\npublic void setByte(Byte attrValue) {\n\t\tif (attrValue != null) {\n\t\t\tsetString(attrValue.toString());\n\t\t}\n\t\telse {\n\t\t\tsetString(null);\n\t\t}\n\t}\n```"], [424, "java", "StreamUtil.outputStreamWriterOf", "```java\npublic static OutputStreamWriter outputStreamWriterOf(final OutputStream output, final String encoding) throws UnsupportedEncodingException {\n\t\treturn new OutputStreamWriter(output, encoding);\n\t}\n```"], [189, "java", "BufrTableBViewer.writeDiff", "```java\nprivate void writeDiff(TableB wmo, TableB t, Formatter out) {\r\n    out.format(\"#%n# BUFR diff written from %s against %s %n#%n\", t.getName(), wmo.getName());\r\n    out.format(\"Class,FXY,enElementName,BUFR_Unit,BUFR_Scale,BUFR_ReferenceValue,BUFR_DataWidth_Bits%n\");\r\n    List<TableB.Descriptor> listDesc = new ArrayList<>(t.getDescriptors());\r\n    Collections.sort(listDesc);\r\n    for (TableB.Descriptor d1 : listDesc) {\r\n      TableB.Descriptor d2 = wmo.getDescriptor(d1.getId());\r\n      if ((d2 == null) || (d1.getScale() != d2.getScale()) || (d1.getRefVal() != d2.getRefVal()) || (d1.getDataWidth() != d2.getDataWidth())) {\r\n        short fxy = d1.getId();\r\n//        int f = (fxy & 0xC000) >> 14;\r\n        int x  = (fxy & 0x3F00) >> 8;\r\n        int y  = fxy & 0xFF;\r\n        out.format(\"%d,%2d%03d,\\\"%s\\\",%s,%d,%d,%d%n\",x,x,y, d1.getName(), d1.getUnits(), d1.getScale(), d1.getRefVal(), d1.getDataWidth());\r\n      }\r\n    }\r\n    out.flush();\r\n  }\n```"], [654, "java", "OpenRtbUtils.bids", "```java\npublic static Iterable<Bid.Builder> bids(BidResponse.Builder response) {\n    return new ResponseBidsIterator(response, SEAT_ANY, null);\n  }\n```"], [92, "java", "Flowable.blockingSubscribe", "```java\n@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final void blockingSubscribe(Consumer<? super T> onNext) {\n        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);\n    }\n```"], [728, "java", "Completable.repeatUntil", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable repeatUntil(BooleanSupplier stop) {\n        return fromPublisher(toFlowable().repeatUntil(stop));\n    }\n```"]]}, "_runtime": 5895.141173362732, "_timestamp": 1581458196.54303, "_step": 480}
{"Examples-FuncNameTest": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[324, "java", "Is24XmlUtils.getContext", "```java\npublic synchronized static JAXBContext getContext() throws JAXBException {\n        if (JAXB == null) initContext(Thread.currentThread().getContextClassLoader());\n        return JAXB;\n    }\n```"], [480, "java", "LogServiceImpl.setLoggerLevel", "```java\npublic void setLoggerLevel(String loggerName, String level) throws ManagementConsoleException {\r\n\r\n    sleeConnection.getSleeManagementMBeanUtils().getLogManagementMBeanUtils().setLoggerLevel(loggerName, level);\r\n\r\n  }\n```"], [58, "java", "Observable.hide", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> hide() {\n        return RxJavaPlugins.onAssembly(new ObservableHide<T>(this));\n    }\n```"], [772, "java", "FileAppender.setFile", "```java\npublic void setFile(String file) {\n    if (file == null) {\n      fileName = null;\n    } else {\n      // Trim spaces from both ends. The users probably does not want\n      // trailing spaces in file names.\n      fileName = file.trim();\n    }\n  }\n```"], [492, "java", "Properties.inspectProperties", "```java\nprotected HashMap<String, PropertyDescriptor> inspectProperties() {\n\t\tboolean scanAccessible = classDescriptor.isScanAccessible();\n\t\tClass type = classDescriptor.getType();\n\n\t\tHashMap<String, PropertyDescriptor> map = new HashMap<>();\n\n\t\tMethod[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type);\n\n\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t// first find the getters, and then the setters!\n\t\t\tfor (Method method : methods) {\n\t\t\t\tif (Modifier.isStatic(method.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static methods\n\t\t\t\t}\n\n\t\t\t\tboolean add = false;\n\t\t\t\tboolean issetter = false;\n\n\t\t\t\tString propertyName;\n\n\t\t\t\tif (iteration == 0) {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertyGetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertySetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (add) {\n\t\t\t\t\tMethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true);\n\t\t\t\t\taddProperty(map, propertyName, methodDescriptor, issetter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classDescriptor.isIncludeFieldsAsProperties()) {\n\t\t\tFieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors();\n\t\t\tString[] prefix = classDescriptor.getPropertyFieldPrefix();\n\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldDescriptors) {\n\t\t\t\tField field = fieldDescriptor.getField();\n\n\t\t\t\tif (Modifier.isStatic(field.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static fields\n\t\t\t\t}\n\n\t\t\t\tString name = field.getName();\n\n\t\t\t\tif (prefix != null) {\n\t\t\t\t\tfor (String p : prefix) {\n\t\t\t\t\t\tif (!name.startsWith(p)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = name.substring(p.length());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!map.containsKey(name)) {\n\t\t\t\t\t// add missing field as a potential property\n\t\t\t\t\tmap.put(name, createPropertyDescriptor(name, fieldDescriptor));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn map;\n\t}\n```"], [826, "java", "ExceptionHelper.wrapOrThrow", "```java\npublic static RuntimeException wrapOrThrow(Throwable error) {\n        if (error instanceof Error) {\n            throw (Error)error;\n        }\n        if (error instanceof RuntimeException) {\n            return (RuntimeException)error;\n        }\n        return new RuntimeException(error);\n    }\n```"], [213, "java", "SegmentedByteArray.rangeEquals", "```java\npublic boolean rangeEquals(long rangeStart, SegmentedByteArray compareTo, long cmpStart, int length) {\n    \tfor(int i=0;i<length;i++)\n    \t\tif(get(rangeStart + i) != compareTo.get(cmpStart + i))\n    \t\t\treturn false;\n    \treturn true;\n    }\n```"], [226, "java", "Update.getVersion", "```java\npublic String getVersion() throws MalformedElementException {\n        Element version = getFirstChild(root, \"version\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingVersionElmt\"), version); //$NON-NLS-1$\n        String href = getChildText(version, \"href\", true); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingHrefElmt\"), href); //$NON-NLS-1$\n        return decodeHref(href);\n    }\n```"], [333, "java", "AbstractRequestMatcherRegistry.antMatchers", "```java\npublic C antMatchers(String... antPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure antMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.antMatchers(antPatterns));\n\t}\n```"], [636, "java", "AbstractRefreshMetricsListener.noFailRefreshEndMetricsReporting", "```java\nprivate final void noFailRefreshEndMetricsReporting(ConsumerRefreshMetrics refreshMetrics) {\n        try {\n            refreshEndMetricsReporting(refreshMetrics);\n        } catch (Exception e) {\n            // Metric reporting is not considered critical to consumer refresh. Log exceptions and continue.\n            log.log(Level.SEVERE, \"Encountered an exception in reporting consumer refresh metrics, ignoring exception and continuing with consumer refresh\", e);\n        }\n    }\n```"], [377, "java", "JtxTransaction.commitOrRollback", "```java\nprotected void commitOrRollback(boolean doCommit) {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (doCommit) {\n\t\t\t\tlog.debug(\"Commit JTX\");\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Rollback JTX\");\n\t\t\t}\n\t\t}\n\t\tboolean forcedRollback = false;\n\t\tif (!isNoTransaction()) {\n\t\t\tif (isRollbackOnly()) {\n\t\t\t\tif (doCommit) {\n\t\t\t\t\tdoCommit = false;\n\t\t\t\t\tforcedRollback = true;\n\t\t\t\t}\n\t\t\t} else if (!isActive()) {\n\t\t\t\tif (isCompleted()) {\n\t\t\t\t\tthrow new JtxException(\"TX is already completed, commit or rollback should be called once per TX\");\n\t\t\t\t}\n\t\t\t\tthrow new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\"));\n\t\t\t}\n\t\t}\n\t\tif (doCommit) {\n\t\t\tcommitAllResources();\n\t\t} else {\n\t\t\trollbackAllResources(forcedRollback);\n\t\t}\n\t}\n```"], [323, "java", "PrologParser.main", "```java\npublic static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }\n```"], [8, "java", "FileNameUtil.concat", "```java\npublic static String concat(final String basePath, final String fullFilenameToAdd) {\n\t\treturn doConcat(basePath, fullFilenameToAdd, SYSTEM_SEPARATOR);\n\t}\n```"], [295, "java", "UserClient.updateUser", "```java\npublic User updateUser(User userParam)\n    {\n        if(userParam != null && this.serviceTicket != null)\n        {\n            userParam.setServiceTicket(this.serviceTicket);\n        }\n\n        return new User(this.postJson(\n                userParam, WS.Path.User.Version1.userUpdate()));\n    }\n```"], [860, "java", "RollupService.setServerTime", "```java\npublic synchronized void setServerTime(long millis) {\n        log.info(\"Manually setting server time to {}  {}\", millis, new java.util.Date(millis));\n        context.setCurrentTimeMillis(millis);\n    }\n```"], [929, "java", "EmailFilter.or", "```java\nprotected void or(final SearchTerm searchTerm) {\n\t\tif (this.searchTerm == null) {\n\t\t\tthis.searchTerm = searchTerm;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchTerm = new OrTerm(this.searchTerm, searchTerm);\n\t}\n```"], [101, "java", "ReteGraph.addChild", "```java\npublic boolean addChild(BaseVertex vertex) {\n        if ( vertex != null && vertices.add( vertex ) ) {\n            firePropertyChange( PROP_CHILD_ADDED,\n                                null,\n                                vertex );\n            return true;\n        }\n        return false;\n    }\n```"], [152, "java", "JPANotificationRESTController.getNotifications", "```java\n@RequestMapping(method = RequestMethod.GET)\n    @ResponseBody\n    public List<EntryDTO> getNotifications(\n            @RequestParam(value = \"page\", required = false) Integer page,\n            @RequestParam(value = \"pageSize\", required = false) Integer pageSize) {\n\n        return restService.getNotifications(page, pageSize);\n    }\n```"], [718, "java", "Iterators.limit", "```java\npublic static <E> Iterator<E> limit(Iterator<? extends E> iterator,\n\t\tint limit)\n\t{\n\t\treturn new LimitIterator<E>(iterator, limit);\n\t}\n```"], [544, "java", "Base64.encodeToString", "```java\npublic static String encodeToString(String s) {\n        try {\n            return new String(encodeToChar(s.getBytes(ENCODING), false));\n        } catch (UnsupportedEncodingException ignore) {\n            return null;\n        }\n    }\n```"], [943, "java", "AreaGrid.calculateColumns", "```java\nprivate void calculateColumns()\n    {\n        //create the sorted list of points\n        GridPoint points[] = new GridPoint[areas.size() * 2];\n        int pi = 0;\n        for (Area area : areas)\n        {\n            points[pi] = new GridPoint(area.getX1(), area, true);\n            points[pi+1] = new GridPoint(area.getX2() + 1, area, false);\n            pi += 2;\n            //X2+1 ensures that the end of one box will be on the same point\n            //as the start of the following box\n        }\n        Arrays.sort(points);\n        \n        //calculate the number of columns\n        int cnt = 0;\n        int last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n            if (!theSame(points[i].value, last))\n            { \n                last = points[i].value;\n                cnt++;\n            }\n        if (!theSame(last, abspos.getX2()))\n        \tcnt++; //last column finishes the whole area\n        width = cnt;\n        \n        //calculate the column widths and the layout\n        maxindent = 0;\n        minindent = -1;\n        cols = new int[width];\n        cnt = 0;\n        last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n        {\n            if (!theSame(points[i].value, last)) \n            {\n                cols[cnt] = points[i].value - last;\n                last = points[i].value;\n                cnt++;\n            }\n            if (points[i].begin)\n            {\n                target.getPosition(points[i].area).setX1(cnt);\n                maxindent = cnt;\n                if (minindent == -1) minindent = maxindent;\n                //points[i].node.getArea().setX1(parent.getArea().getX1() + getColOfs(cnt));\n            }\n            else\n            {\n                Rectangular pos = target.getPosition(points[i].area); \n                pos.setX2(cnt-1);\n                if (pos.getX2() < pos.getX1())\n                    pos.setX2(pos.getX1());\n                //points[i].node.getArea().setX2(parent.getArea().getX1() + getColOfs(pos.getX2()+1));\n            }\n        }\n        if (!theSame(last, abspos.getX2()))\n        \tcols[cnt] = abspos.getX2() - last;\n        if (minindent == -1)\n            minindent = 0;\n    }\n```"], [700, "java", "JdbcHelper.initialize", "```java\nprivate static void initialize() {\n\t\tString driver = ConfigHelper.getProperty(\"jdbc.driver\");\n\t\tString url = ConfigHelper.getProperty(\"jdbc.url\");\n\t\tString username = ConfigHelper.getProperty(\"jdbc.username\");\n\t\tString password = ConfigHelper.getProperty(\"jdbc.password\");\n\t\tint maxActive = ConfigHelper.getNumerProperty(\"jdbc.max.active\");\n\t\tint maxIdle = ConfigHelper.getNumerProperty(\"jdbc.max.idle\");\n\t\tAssertHelper.notNull(driver);\n\t\tAssertHelper.notNull(url);\n\t\tAssertHelper.notNull(username);\n\t\tAssertHelper.notNull(password);\n\t\t//\u521d\u59cb\u5316DBCP\u6570\u636e\u6e90\n\t\tBasicDataSource ds = new BasicDataSource();\n\t\tds.setDriverClassName(driver);\n\t\tds.setUrl(url);\n\t\tds.setUsername(username);\n\t\tds.setPassword(password);\n        if(maxActive != 0) {\n\t\t    ds.setMaxActive(maxActive);\n        }\n        if(maxIdle != 0) {\n\t\t    ds.setMaxIdle(maxIdle);\n        }\n\t\tdataSource = ds;\n\t}\n```"], [699, "java", "PasswordLoginModule.abort", "```java\n@Override\n    // Check is broken [LOG.info()]: PMD reports issues although log stmt is guarded. @todo revisit when upgrading PMD.\n    @SuppressWarnings(\"PMD.GuardLogStatementJavaUtil\")\n    public final boolean abort()\n            throws LoginException {\n\n        if (pendingSubject == null) {\n            // the login method of this module has failed earlier, hence we do not need to clean up anything\n            // return 'false' to indicate that this module's login and/or commit method failed\n            // As the login method failed, the state of the module has already been cleared and we do not know\n            // the username / domain anymore. Hence no auditing / message queue notification, and not verbose logging.\n\n            LOG.debug(\"Aborting authentication, as the authentication has failed earlier (login method)\");\n\n            return false;\n        } else if (committedSubject == null) {\n            // the login method of this module succeeded, but the overall authentication failed\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Aborting authentication: '\" + username + \"@\" + domain + \"'\");\n            }\n\n            // cache the username and domain, for they will be purged by \"cleanState()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            cleanState();\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(tempUsername).\n                    append(\"@\").\n                    append(tempDomain).\n                    toString();\n            AuditHelper.auditEvent(audit, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        } else {\n            // overall authentication succeeded and commit succeeded, but someone else's commit failed\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(username).\n                    append(\"@\").\n                    append(domain).\n                    toString();\n            AuditHelper.auditEvent(audit, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // cache the username and domain, for they will be purged by \"logout()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            logout();\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        }\n    }\n```"], [507, "java", "Parser.parseOptionalBody", "```java\nprivate void parseOptionalBody( Node parent, String tag, String bodyType ) \n        throws JasperException \n    {\n\tif (reader.matches(\"/>\")) {\n\t    // EmptyBody\n\t    return;\n\t}\n\n\tif (!reader.matches(\">\")) {\n\t    err.jspError(reader.mark(), \"jsp.error.unterminated\",\n\t\t\t \"&lt;\" + tag );\n\t}\n        \n        if( reader.matchesETag( tag ) ) {\n            // EmptyBody\n            return;\n        }\n        \n        if( !parseJspAttributeAndBody( parent, tag, bodyType ) ) {\n            // Must be ( '>' # Body ETag )\n            parseBody(parent, tag, bodyType );\n        }\n    }\n```"], [120, "java", "Completable.doOnComplete", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable doOnComplete(Action onComplete) {\n        return doOnLifecycle(Functions.emptyConsumer(), Functions.emptyConsumer(),\n                onComplete, Functions.EMPTY_ACTION,\n                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);\n    }\n```"], [746, "java", "Strings.trimLeadingCharacter", "```java\npublic static String trimLeadingCharacter(String str, final char leadingCharacter)\n   {\n      return trimLeadingCharacter(str, new CharacterChecker()\n      {\n         public boolean isCharacterLegal(char character)\n         {\n            return character == leadingCharacter;\n         }\n      });\n   }\n```"], [237, "java", "ProxettaAsmUtil.resolveJavaVersion", "```java\npublic static int resolveJavaVersion(final int version) {\n\t\tfinal int javaVersionNumber = SystemUtil.info().getJavaVersionNumber();\n\t\tfinal int platformVersion = javaVersionNumber - 8 + 52;\n\n\t\treturn version > platformVersion ? version : platformVersion;\n\t}\n```"], [263, "java", "OpenRtbJsonUtils.startArray", "```java\npublic static void startArray(JsonParser par) throws IOException {\n    JsonToken token = par.getCurrentToken();\n    if (token == null || token == JsonToken.FIELD_NAME) {\n      token = par.nextToken();\n    }\n    if (token == JsonToken.START_ARRAY) {\n      par.nextToken();\n    } else {\n      throw new JsonParseException(par, \"Expected start of array\");\n    }\n  }\n```"], [722, "java", "Observable.take", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler) {\n        return takeUntil(timer(time, unit, scheduler));\n    }\n```"], [965, "java", "AbstractEndpoint.executeAndHandle", "```java\nprotected HttpResponse executeAndHandle(Request request)\n            throws IOException, IllegalArgumentException, IllegalAccessException, FileNotFoundException, IllegalStateException {\n        HttpResponse response = execute(request);\n        handleResponse(response, request);\n        return response;\n    }\n```"], [555, "java", "PipelineConfigurationUpgrader.upgradeIfNecessary", "```java\npublic PipelineConfiguration upgradeIfNecessary(\n      StageLibraryTask library,\n      PipelineConfiguration pipelineConf,\n      List<Issue> issues\n  ) {\n    Preconditions.checkArgument(issues.isEmpty(), \"Given list of issues must be empty.\");\n    boolean upgrade;\n\n    // Firstly upgrading schema if needed, then data\n    upgrade = needsSchemaUpgrade(pipelineConf, issues);\n    if(upgrade && issues.isEmpty()) {\n      pipelineConf = upgradeSchema(library, pipelineConf, issues);\n    }\n\n    // Something went wrong with the schema upgrade\n    if(!issues.isEmpty()) {\n      return null;\n    }\n\n    // Upgrading data if needed\n    upgrade = needsUpgrade(library, pipelineConf, issues);\n    if (upgrade && issues.isEmpty()) {\n      //we try to upgrade only if we have all defs for the pipelineConf\n      pipelineConf = upgrade(library, pipelineConf, issues);\n    }\n    return (issues.isEmpty()) ? pipelineConf : null;\n  }\n```"], [733, "java", "TimerServiceImpl.getWaitingOnTxCompletionTimers", "```java\nprivate Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }\n```"], [441, "java", "RequestHandler.mainRequestHandler", "```java\n@ServiceMethod\n    public void mainRequestHandler(DataStoreRequest dataStoreRequest) {\n\n\n        if (verbose || debug) {\n            logger.info(\"RequestHandler::mainRequestHandler\", dataStoreRequest);\n        }\n        switch (dataStoreRequest.action()) {\n            case GET:\n                masterDataStore.get((GetRequest) dataStoreRequest);\n                break;\n            case GET_LOCAL_DB:\n                handleGetLocalDbVerb(dataStoreRequest);\n                break;\n            case GET_MEM:\n                handleGetMemVerb(dataStoreRequest);\n                break;\n            case SET:\n                masterDataStore.set((SetRequest) dataStoreRequest);\n                break;\n            case SET_BROADCAST:\n                handleSetAndBroadCastVerb(dataStoreRequest);\n                break;\n            case SET_IF_NOT_EXIST:\n                handleSetIfNotExistsVerb(dataStoreRequest);\n                break;\n            case SET_BATCH:\n                handleSetBatch(dataStoreRequest);\n                break;\n            case SET_BATCH_IF_NOT_EXISTS:\n                handleSetBatchIfNotExists(dataStoreRequest);\n                break;\n            case SET_SOURCE:\n                handleSetSource(dataStoreRequest);\n                break;\n            case GET_SOURCE:\n                handleGetSource(dataStoreRequest);\n                break;\n\n            case BATCH_READ:\n                handleBatchRead(dataStoreRequest);\n                break;\n\n            case CLEAR_STATS:\n                handleClearStats(dataStoreRequest);\n                break;\n\n\n            case GET_STATS:\n                handleGetStats(dataStoreRequest);\n                break;\n\n\n            case REMOVE:\n                handleRemove(dataStoreRequest);\n                break;\n\n\n            case REMOVE_SOURCE:\n                handleRemoveSource(dataStoreRequest);\n                break;\n\n            case METHOD_CALL:\n                handleMethodCall((MethodCall) dataStoreRequest);\n                break;\n\n            case SEARCH:\n                handleSearchVerb(dataStoreRequest);\n                break;\n\n            default:\n                puts(dataStoreRequest);\n\n\n        }\n        trackCall(dataStoreRequest.action());\n    }\n```"], [374, "java", "AvroTypeUtil.getAvroSchemaFromHeader", "```java\npublic static String getAvroSchemaFromHeader(Record record, String headerName) throws DataGeneratorException {\n    String jsonSchema = record.getHeader().getAttribute(headerName);\n    if(jsonSchema == null || jsonSchema.isEmpty()) {\n      throw new DataGeneratorException(Errors.AVRO_GENERATOR_03, record.getHeader().getSourceId());\n    }\n    return jsonSchema;\n  }\n```"], [735, "java", "InterfaceRepository.addInterface", "```java\nprivate InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }\n```"], [825, "java", "StdRandom.uniform", "```java\npublic static int uniform(int a, int b)\n  {\n    if (b <= a)\n      throw new IllegalArgumentException(\"Invalid range\");\n    if ((long) b - a >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"Invalid range\");\n    return a + uniform(b - a);\n  }\n```"], [794, "java", "DapController.init", "```java\npublic void init()\n            throws ServletException\n    {\n        org.slf4j.Logger logServerStartup = org.slf4j.LoggerFactory.getLogger(\"serverStartup\");\n        logServerStartup.info(getClass().getName() + \" initialization start\");\n        try {\n            System.setProperty(\"file.encoding\", \"UTF-8\");\n            Field charset = Charset.class.getDeclaredField(\"defaultCharset\");\n            charset.setAccessible(true);\n            charset.set(null, null);\n            initialize();\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n```"], [501, "java", "OfflineClient.getIndex", "```java\n@Override\n    public @NonNull MirroredIndex getIndex(@NonNull String indexName) {\n        MirroredIndex index = null;\n        WeakReference<Object> existingIndex = indices.get(indexName);\n        if (existingIndex != null) {\n            index = (MirroredIndex)existingIndex.get();\n        }\n        if (index == null) {\n            index = new MirroredIndex(this, indexName);\n            indices.put(indexName, new WeakReference<Object>(index));\n        }\n        return index;\n    }\n```"], [746, "java", "TdsRequestedDataset.getGridDataset", "```java\npublic static GridDataset getGridDataset(HttpServletRequest request, HttpServletResponse response, String path) throws IOException {\n    TdsRequestedDataset trd = new TdsRequestedDataset(request, null);\n    if (path != null) trd.path = path;\n    return trd.openAsGridDataset(request, response);\n  }\n```"], [809, "java", "Types.isBuiltinType", "```java\npublic static boolean isBuiltinType(Type type) {\n\t\tClass<?> rawType = getRawType(type);\n\t\treturn (rawType == null) ? false : builtins.contains(rawType);\n\t}\n```"], [52, "java", "SimpleRuleStore.addRule", "```java\npublic void addRule(ElementSelector elementSelector, Action action) {\n    action.setContext(context);\n\n    List<Action> a4p = rules.get(elementSelector);\n\n    if (a4p == null) {\n      a4p = new ArrayList<Action>();\n      rules.put(elementSelector, a4p);\n    }\n\n    a4p.add(action);\n  }\n```"], [935, "java", "RpcResponseResolver.toResponseObject", "```java\nprivate static Object toResponseObject(ResponseCommand responseCommand) throws CodecException {\n        RpcResponseCommand response = (RpcResponseCommand) responseCommand;\n        response.deserialize();\n        return response.getResponseObject();\n    }\n```"], [126, "java", "OClosableLinkedContainer.checkOpenFilesLimit", "```java\nprivate void checkOpenFilesLimit() throws InterruptedException {\n    CountDownLatch ol = openLatch.get();\n    if (ol != null)\n      ol.await();\n\n    while (openFiles.get() > openLimit) {\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      //make other threads to wait till we evict entries and close evicted open files\n      if (openLatch.compareAndSet(null, latch)) {\n        while (openFiles.get() > openLimit) {\n          emptyBuffers();\n        }\n\n        latch.countDown();\n        openLatch.set(null);\n      } else {\n        ol = openLatch.get();\n\n        if (ol != null)\n          ol.await();\n      }\n    }\n  }\n```"], [975, "java", "GuiceApplicationBuilder.load", "```java\npublic GuiceApplicationBuilder load(GuiceableModule... modules) {\n    return newBuilder(delegate.load(Scala.varargs(modules)));\n  }\n```"], [643, "java", "ProfileEntityArrayAttributeValue.setByte", "```java\npublic void setByte(Byte attrValue) {\n\t\tif (attrValue != null) {\n\t\t\tsetString(attrValue.toString());\n\t\t}\n\t\telse {\n\t\t\tsetString(null);\n\t\t}\n\t}\n```"], [230, "java", "StreamUtil.outputStreamWriterOf", "```java\npublic static OutputStreamWriter outputStreamWriterOf(final OutputStream output, final String encoding) throws UnsupportedEncodingException {\n\t\treturn new OutputStreamWriter(output, encoding);\n\t}\n```"], [736, "java", "BufrTableBViewer.writeDiff", "```java\nprivate void writeDiff(TableB wmo, TableB t, Formatter out) {\r\n    out.format(\"#%n# BUFR diff written from %s against %s %n#%n\", t.getName(), wmo.getName());\r\n    out.format(\"Class,FXY,enElementName,BUFR_Unit,BUFR_Scale,BUFR_ReferenceValue,BUFR_DataWidth_Bits%n\");\r\n    List<TableB.Descriptor> listDesc = new ArrayList<>(t.getDescriptors());\r\n    Collections.sort(listDesc);\r\n    for (TableB.Descriptor d1 : listDesc) {\r\n      TableB.Descriptor d2 = wmo.getDescriptor(d1.getId());\r\n      if ((d2 == null) || (d1.getScale() != d2.getScale()) || (d1.getRefVal() != d2.getRefVal()) || (d1.getDataWidth() != d2.getDataWidth())) {\r\n        short fxy = d1.getId();\r\n//        int f = (fxy & 0xC000) >> 14;\r\n        int x  = (fxy & 0x3F00) >> 8;\r\n        int y  = fxy & 0xFF;\r\n        out.format(\"%d,%2d%03d,\\\"%s\\\",%s,%d,%d,%d%n\",x,x,y, d1.getName(), d1.getUnits(), d1.getScale(), d1.getRefVal(), d1.getDataWidth());\r\n      }\r\n    }\r\n    out.flush();\r\n  }\n```"], [954, "java", "OpenRtbUtils.bids", "```java\npublic static Iterable<Bid.Builder> bids(BidResponse.Builder response) {\n    return new ResponseBidsIterator(response, SEAT_ANY, null);\n  }\n```"], [920, "java", "Flowable.blockingSubscribe", "```java\n@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final void blockingSubscribe(Consumer<? super T> onNext) {\n        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);\n    }\n```"], [666, "java", "Completable.repeatUntil", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable repeatUntil(BooleanSupplier stop) {\n        return fromPublisher(toFlowable().repeatUntil(stop));\n    }\n```"]]}, "_runtime": 5999.70262503624, "_timestamp": 1581458301.1044817, "_step": 481}
{"Examples-Validation": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[846, "java", "FareAttribute.setStatementParameters", "```java\n@Override\n    public void setStatementParameters(PreparedStatement statement, boolean setDefaultId) throws SQLException {\n        int oneBasedIndex = 1;\n        if (!setDefaultId) statement.setInt(oneBasedIndex++, id);\n        statement.setString(oneBasedIndex++, fare_id);\n        statement.setDouble(oneBasedIndex++, price);\n        statement.setString(oneBasedIndex++, currency_type);\n        setIntParameter(statement, oneBasedIndex++, payment_method);\n        // FIXME Entity.INT_MISSING causing out of range error on small int\n        setIntParameter(statement, oneBasedIndex++, transfers);\n        statement.setString(oneBasedIndex++, agency_id);\n        setIntParameter(statement, oneBasedIndex++, transfer_duration);\n    }\n```"], [924, "java", "Xmls.children", "```java\npublic static List<Element> children(Element ele, String regex) {\n        final List<Element> list = new ArrayList<Element>(ele.getChildNodes().getLength());\n        eachChildren(ele, regex, new Each<Element>() {\n            public void invoke(int index, Element cld, int length) {\n                list.add(cld);\n            }\n        });\n        return list;\n    }\n```"], [277, "java", "SelectSelectivePlugin.initialized", "```java\n@Override\n    public void initialized(IntrospectedTable introspectedTable) {\n        super.initialized(introspectedTable);\n\n        // bug:26,27\n        this.selectByExampleSelectiveEle = null;\n        this.selectByPrimaryKeySelectiveEle = null;\n    }\n```"], [201, "java", "AbstractSpeedModelManager.consumeKeyMessage", "```java\npublic void consumeKeyMessage(String key, U message, Configuration hadoopConf) throws IOException {\n    log.info(\"{} : {}\", key, message);\n  }\n```"], [449, "java", "SocializeShareUtils.shareViaSocialNetworks", "```java\n@Override\n\tpublic void shareViaSocialNetworks(Activity context, final Entity entity, final ShareOptions shareOptions, final SocialNetworkShareListener listener, final SocialNetwork...networks) {\n\t\t\n\t\tfinal SocializeSession session = getSocialize().getSession();\n\t\t\n\t\tif(isDisplayAuthDialog(context, session, shareOptions, networks)) {\n\t\t\t\n\t\t\tauthDialogFactory.show(context, new AuthDialogListener() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onShow(Dialog dialog, AuthPanelView dialogView) {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onCancel(Dialog dialog) {\n\t\t\t\t\tif(listener != null) {\n\t\t\t\t\t\tlistener.onCancel();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onSkipAuth(Activity context, Dialog dialog) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdoShare(context, entity, listener, shareOptions, networks);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onError(Activity context, Dialog dialog, Exception error) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tif(listener != null) {\n\t\t\t\t\t\tlistener.onError(SocializeException.wrap(error));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onAuthenticate(Activity context, Dialog dialog, SocialNetwork network) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdoShare(context, entity, listener, shareOptions, network);\n\t\t\t\t}\n\t\t\t}, !config.isAllowSkipAuthOnAllActions());\n\t\t}\n\t\telse {\n\t\t\tdoShare(context, entity, listener, shareOptions, networks);\n\t\t}\t\t\t\n\t}\n```"], [56, "java", "AbstractAuthenticationFilter.doFilter", "```java\n@Override\n    protected void doFilter(final HttpServletRequest _request,\n                            final HttpServletResponse _response,\n                            final FilterChain _chain)\n        throws IOException, ServletException\n    {\n        if (isLoggedIn(_request)) {\n            _chain.doFilter(_request, _response);\n        } else {\n            doAuthenticate(_request, _response, _chain);\n        }\n    }\n```"], [563, "java", "PrettyConfig.getMappingById", "```java\npublic UrlMapping getMappingById(String id)\n   {\n      if (id != null)\n      {\n         if (id.startsWith(PrettyContext.PRETTY_PREFIX))\n         {\n            id = id.substring(PrettyContext.PRETTY_PREFIX.length());\n         }\n         for (UrlMapping mapping : getMappings())\n         {\n            if (mapping.getId().equals(id))\n            {\n               return mapping;\n            }\n         }\n      }\n      return null;\n   }\n```"], [71, "java", "ExecutionEngine.fireErrorReceivingResponseEvent", "```java\nprivate static void fireErrorReceivingResponseEvent(OperationContext opContext, HttpURLConnection request,\n            RequestResult result) {\n        if (opContext.getErrorReceivingResponseEventHandler().hasListeners()\n                || OperationContext.getGlobalErrorReceivingResponseEventHandler().hasListeners()) {\n            ErrorReceivingResponseEvent event = new ErrorReceivingResponseEvent(opContext, request, result);\n            opContext.getErrorReceivingResponseEventHandler().fireEvent(event);\n            OperationContext.getGlobalErrorReceivingResponseEventHandler().fireEvent(event);\n        }\n    }\n```"], [999, "java", "ThrowableAssert.overridingErrorMessage", "```java\n@Override\n  public @NotNull ThrowableAssert overridingErrorMessage(@Nullable String message) {\n    objectAssert.overridingErrorMessage(message);\n    return super.overridingErrorMessage(message);\n  }\n```"], [523, "java", "ShadowLauncherApps.addDynamicShortcut", "```java\npublic void addDynamicShortcut(ShortcutInfo shortcutInfo) {\n    shortcuts.add(shortcutInfo);\n    shortcutsChanged(shortcutInfo.getPackage(), Lists.newArrayList(shortcutInfo));\n  }\n```"], [961, "java", "AbstractFuture.get", "```java\n@CanIgnoreReturnValue\n  @Override\n  public V get(long timeout, TimeUnit unit)\n      throws InterruptedException, TimeoutException, ExecutionException {\n    // NOTE: if timeout < 0, remainingNanos will be < 0 and we will fall into the while(true) loop\n    // at the bottom and throw a timeoutexception.\n    final long timeoutNanos = unit.toNanos(timeout); // we rely on the implicit null check on unit.\n    long remainingNanos = timeoutNanos;\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n    Object localValue = value;\n    if (localValue != null & !(localValue instanceof SetFuture)) {\n      return getDoneValue(localValue);\n    }\n    // we delay calling nanoTime until we know we will need to either park or spin\n    final long endNanos = remainingNanos > 0 ? System.nanoTime() + remainingNanos : 0;\n    long_wait_loop:\n    if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n      Waiter oldHead = waiters;\n      if (oldHead != Waiter.TOMBSTONE) {\n        Waiter node = new Waiter();\n        do {\n          node.setNext(oldHead);\n          if (ATOMIC_HELPER.casWaiters(this, oldHead, node)) {\n            while (true) {\n              LockSupport.parkNanos(this, remainingNanos);\n              // Check interruption first, if we woke up due to interruption we need to honor that.\n              if (Thread.interrupted()) {\n                removeWaiter(node);\n                throw new InterruptedException();\n              }\n\n              // Otherwise re-read and check doneness. If we loop then it must have been a spurious\n              // wakeup\n              localValue = value;\n              if (localValue != null & !(localValue instanceof SetFuture)) {\n                return getDoneValue(localValue);\n              }\n\n              // timed out?\n              remainingNanos = endNanos - System.nanoTime();\n              if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n                // Remove the waiter, one way or another we are done parking this thread.\n                removeWaiter(node);\n                break long_wait_loop; // jump down to the busy wait loop\n              }\n            }\n          }\n          oldHead = waiters; // re-read and loop.\n        } while (oldHead != Waiter.TOMBSTONE);\n      }\n      // re-read value, if we get here then we must have observed a TOMBSTONE while trying to add a\n      // waiter.\n      return getDoneValue(value);\n    }\n    // If we get here then we have remainingNanos < SPIN_THRESHOLD_NANOS and there is no node on the\n    // waiters list\n    while (remainingNanos > 0) {\n      localValue = value;\n      if (localValue != null & !(localValue instanceof SetFuture)) {\n        return getDoneValue(localValue);\n      }\n      if (Thread.interrupted()) {\n        throw new InterruptedException();\n      }\n      remainingNanos = endNanos - System.nanoTime();\n    }\n\n    String futureToString = toString();\n    final String unitString = unit.toString().toLowerCase(Locale.ROOT);\n    String message = \"Waited \" + timeout + \" \" + unit.toString().toLowerCase(Locale.ROOT);\n    // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise\n    if (remainingNanos + SPIN_THRESHOLD_NANOS < 0) {\n      // We over-waited for our timeout.\n      message += \" (plus \";\n      long overWaitNanos = -remainingNanos;\n      long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);\n      long overWaitLeftoverNanos = overWaitNanos - unit.toNanos(overWaitUnits);\n      boolean shouldShowExtraNanos =\n          overWaitUnits == 0 || overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS;\n      if (overWaitUnits > 0) {\n        message += overWaitUnits + \" \" + unitString;\n        if (shouldShowExtraNanos) {\n          message += \",\";\n        }\n        message += \" \";\n      }\n      if (shouldShowExtraNanos) {\n        message += overWaitLeftoverNanos + \" nanoseconds \";\n      }\n\n      message += \"delay)\";\n    }\n    // It's confusing to see a completed future in a timeout message; if isDone() returns false,\n    // then we know it must have given a pending toString value earlier. If not, then the future\n    // completed after the timeout expired, and the message might be success.\n    if (isDone()) {\n      throw new TimeoutException(message + \" but future completed as timeout expired\");\n    }\n    throw new TimeoutException(message + \" for \" + futureToString);\n  }\n```"], [183, "java", "Duration.minus", "```java\npublic Duration minus(long amount) {\n        return new Minus().apply(this, unit == null ? FOREVER : new Duration(amount, unit));\n    }\n```"], [19, "java", "PropertyWrapper.removeAllCallbacks", "```java\n@Override\n    public void removeAllCallbacks() {\n        final Set<Runnable> callbacksToRemove = new HashSet<Runnable>(callbacks);\n        for (Runnable callback : callbacksToRemove) {\n            prop.removeCallback(callback);\n        }\n        callbacks.removeAll(callbacksToRemove);\n    }\n```"], [904, "java", "NowAndTodayUtil.parseNow", "```java\nprivate static void parseNow(String value, String lowerValue, Calendar c) throws DateParseException {\n        if (lowerValue.length() > NOW_LENGTH) {\n            Matcher matcher = NOW_OFFSET_PATTERN.matcher(lowerValue);\n            if (!matcher.find()) {\n                throw new DateParseException(\"Improper value in 'NOW' value: \" + value\n                        + \". 'NOW' must be followed by + or -, then numeric offset, then units (h{our{s}}, \"\n                        + \"m{inute{s}}, d{ay{s}}, or y{ears}\");\n            }\n            if (matcher.groupCount() != 4) {\n                throw new DateParseException(\"Improper value in 'NOW' value: \" + value + \". Pattern match returned \"\n                        + matcher.groupCount() + \" instead of 4\");\n            }\n            char sign = matcher.group(2).charAt(0);\n            if (sign != '+' && sign != '-') {\n                throw new DateParseException(\"Improper sign in 'NOW' value '\" + lowerValue + \"'\");\n            }\n            String offsetStr = matcher.group(3);\n            int offset;\n            try {\n                offset = Integer.parseInt(offsetStr);\n            } catch (NumberFormatException e) {\n                throw new DateParseException(\"Improper offset in 'NOW' value '\" + value + \"'\");\n            }\n            if (sign == '-') {\n                offset = -offset;\n            }\n            int calendarField;\n            String units = matcher.group(4);\n            if (\"years\".startsWith(units)) {\n                calendarField = Calendar.YEAR;\n            } else if (\"days\".startsWith(units)) {\n                calendarField = Calendar.DATE;\n            } else if (\"hours\".startsWith(units)) {\n                calendarField = Calendar.HOUR;\n            } else if (\"minutes\".startsWith(units)) {\n                calendarField = Calendar.MINUTE;\n            } else {\n                throw new DateParseException(\"Improper units in 'NOW' value: '\" + units + \"', must be y{ear{s}}, \"\n                        + \"d{ay{s}}, h{our{s}}, or m{inute{s}}\");\n            }\n            c.add(calendarField, offset);\n        }\n    }\n```"], [824, "java", "SVGGraphics2D.getSVGFontStyle", "```java\nprivate String getSVGFontStyle() {\n        StringBuilder b = new StringBuilder();\n        b.append(\"fill: \").append(svgColorStr()).append(\"; \");\n        b.append(\"fill-opacity: \").append(getColorAlpha() * getAlpha())\n                .append(\"; \");\n        String fontFamily = this.fontMapper.mapFont(this.font.getFamily());\n        b.append(\"font-family: \").append(fontFamily).append(\"; \");\n        b.append(\"font-size: \").append(this.font.getSize()).append(this.fontSizeUnits).append(\";\");\n        if (this.font.isBold()) {\n            b.append(\" font-weight: bold;\");\n        }\n        if (this.font.isItalic()) {\n            b.append(\" font-style: italic;\");\n        }\n        return b.toString();\n    }\n```"], [741, "java", "LogglyClient.log", "```java\npublic boolean log(String message) {\n        if (message == null) return false;\n\n        boolean ok;\n        try {\n            ok = loggly.log(token, tags, message).isExecuted();\n        } catch (Exception e) {\n            e.printStackTrace();\n            ok = false;\n        }\n        return ok;\n    }\n```"], [372, "java", "CheckUtilities.checkStringListArgument", "```java\npublic static void checkStringListArgument(List<String> str, String variableName) {\n    if (null == str) {\n      throw new NullPointerException(ExceptionMessageMap.getMessage(\"000002\")\n          + \"  { variableName=[\" + variableName + \"] }\");\n    }\n    if (str.size() == 0) {\n      throw new IllegalArgumentException(ExceptionMessageMap.getMessage(\"000002\")\n          + \"  { variableName=[\" + variableName + \"] }\");\n    }\n    for (int i = 0; i < str.size(); i++) {\n      checkStringArgument(str.get(i), variableName);\n    }\n  }\n```"], [368, "java", "BorderWidth.isValid", "```java\npublic static boolean isValid(final String cssValue) {\n        final String trimmedCssValue = StringUtil.strip(cssValue).toLowerCase();\n        final String[] cssValueParts = StringUtil.splitBySpace(trimmedCssValue);\n        if (cssValueParts.length > 4) {\n            return false;\n        }\n        for (final String cssValuePart : cssValueParts) {\n            boolean invalidValue = true;\n            for (final CssLengthUnit cssLengthUnit : CssLengthUnit.values()) {\n                final String unit = cssLengthUnit.getUnit();\n                if (cssValuePart.endsWith(unit)) {\n                    final String valueOnly = cssValuePart.replaceFirst(unit,\n                            \"\");\n                    try {\n                        Float.parseFloat(valueOnly);\n                    } catch (final NumberFormatException e) {\n                        break;\n                    }\n                    invalidValue = false;\n                    break;\n                }\n            }\n            if (PREDEFINED_CONSTANTS.contains(cssValuePart)) {\n                invalidValue = false;\n            }\n            if (invalidValue) {\n                return false;\n            }\n        }\n        return true;\n    }\n```"], [996, "java", "ZKClientImpl.getChildren", "```java\n@Override\n  public WatchableTask<List<String>> getChildren(String path) {\n    return new WatchableTask<List<String>>(\"zkGetChildren: \" + path) {\n      @Override\n      protected Promise run(Context context) throws Throwable {\n        SettablePromise<List<String>> promise = Promises.settable();\n        _zkClient.getChildren(path, _watcher, (int rc, String p, Object ctx, List<String> children) -> {\n          KeeperException.Code code = KeeperException.Code.get(rc);\n          switch (code) {\n            case OK:\n              promise.done(children);\n              break;\n            default:\n              promise.fail(KeeperException.create(code, p));\n          }\n        }, null);\n        return promise;\n      }\n    };\n  }\n```"], [908, "java", "Trans.getConnectionAuto", "```java\npublic static Connection getConnectionAuto(DataSource ds) throws SQLException {\n        if (get() == null)\n            return ds.getConnection();\n        else\n            return get().getConnection(ds);\n    }\n```"], [695, "java", "ShadowUsageStatsManager.getAppStandbyBucket", "```java\n@Implementation(minSdk = Build.VERSION_CODES.P)\n  @HiddenApi\n  public @StandbyBuckets int getAppStandbyBucket(String packageName) {\n    Integer bucket = appStandbyBuckets.get(packageName);\n    return (bucket == null) ? UsageStatsManager.STANDBY_BUCKET_ACTIVE : bucket;\n  }\n```"], [826, "java", "BaseActions.push", "```java\npublic boolean push(final int down, final V value)\n    {\n        check();\n        context.getValueStack().push(down, value);\n        return true;\n    }\n```"], [531, "java", "ConditionFactory.untilCall", "```java\npublic <T> T untilCall(T proxyMethodReturnValue, final Matcher<? super T> matcher) {\n        if (!existInCP(\"java.util.ServiceLoader\")) {\n            throw new UnsupportedOperationException(\"java.util.ServiceLoader not found in classpath so cannot create condition\");\n        }\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        if (cl == null) {\n            cl = ClassLoader.getSystemClassLoader();\n        }\n        Iterator<ProxyConditionFactory> iterator = java.util.ServiceLoader.load(ProxyConditionFactory.class, cl).iterator();\n        if (!iterator.hasNext()) {\n            throw new UnsupportedOperationException(\"There's currently no plugin installed that can handle proxy conditions, please consider adding 'awaitility-proxy' to the classpath. If using Maven you can do:\" +\n                    \"<dependency>\\n\" +\n                    \"\\t<groupId>org.awaitility</groupId>\\n\" +\n                    \"\\t<artifactId>awaitility-proxy</artifactId>\\n\" +\n                    \"\\t<version>${awaitility.version}</version>\\n\" +\n                    \"</dependency>\\n\");\n        }\n        @SuppressWarnings(\"unchecked\") ProxyConditionFactory<T> factory = iterator.next();\n        if (factory == null) {\n            throw new IllegalArgumentException(\"Internal error: Proxy condition plugin initialization returned null, please report an issue.\");\n        }\n        return until(factory.createProxyCondition(proxyMethodReturnValue, matcher, generateConditionSettings()));\n    }\n```"], [662, "java", "MentionsEditText.onTouchEvent", "```java\n@Override\n    public boolean onTouchEvent(@NonNull MotionEvent event) {\n        final MentionSpan touchedSpan = getTouchedSpan(event);\n\n        // Android 6 occasionally throws a NullPointerException inside Editor.onTouchEvent()\n        // for ACTION_UP when attempting to display (uninitialised) text handles.\n        boolean superResult;\n        if (android.os.Build.VERSION.SDK_INT == Build.VERSION_CODES.M &&\n            event.getActionMasked() == MotionEvent.ACTION_UP) {\n            try {\n                superResult = super.onTouchEvent(event);\n            } catch (NullPointerException ignored) {\n                // Ignore this (see above) - since we're now in an unknown state let's clear all\n                // selection (which is still better than an arbitrary crash that we can't control):\n                clearFocus();\n                superResult = true;\n            }\n        } else {\n            superResult = super.onTouchEvent(event);\n        }\n\n        if (event.getAction() == MotionEvent.ACTION_UP) {\n            // Don't call the onclick on mention if MotionEvent.ACTION_UP is for long click action,\n            if (!isLongPressed && touchedSpan != null) {\n                // Manually click span and show soft keyboard\n                touchedSpan.onClick(this);\n                Context context = getContext();\n                if (context != null) {\n                    InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n                    imm.showSoftInput(this, 0);\n                }\n                return true;\n            }\n        } else if (event.getAction() == MotionEvent.ACTION_DOWN) {\n            isLongPressed = false;\n            if (isLongClickable() && touchedSpan != null) {\n                if (longClickRunnable == null) {\n                    longClickRunnable = new CheckLongClickRunnable();\n                }\n                longClickRunnable.touchedSpan = touchedSpan;\n                removeCallbacks(longClickRunnable);\n                postDelayed(longClickRunnable, ViewConfiguration.getLongPressTimeout());\n            }\n        } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {\n            isLongPressed = false;\n        }\n\n        // Check if user clicked on the EditText while showing the suggestions list\n        // If so, avoid the current prefix\n        if (mAvoidPrefixOnTap\n                && mSuggestionsVisibilityManager != null\n                && mSuggestionsVisibilityManager.isDisplayingSuggestions()) {\n            mSuggestionsVisibilityManager.displaySuggestions(false);\n            String keywords = getCurrentKeywordsString();\n            String[] words = keywords.split(\" \");\n            if (words.length > 0) {\n                String prefix = words[words.length - 1];\n                // Note that prefix == \"\" when user types an explicit character and taps the EditText\n                // We must not allow the user to avoid suggestions for the empty string prefix\n                // Otherwise, explicit mentions would be broken, see MOB-38080\n                if (prefix.length() > 0) {\n                    setAvoidedPrefix(prefix);\n                }\n            }\n        }\n        return superResult;\n    }\n```"], [871, "java", "Json.fromJson", "```java\npublic static Object fromJson(Type type, Reader reader)\r\n            throws JsonException {\r\n        return parse(type, reader);\r\n    }\n```"], [379, "java", "DefaultBoundSessionOfHashSetOperations.set", "```java\npublic Long set(HK key, Collection<HV> values) {\n        return ops.multiSet(getKey(), getField(), key, values);\n    }\n```"], [483, "java", "Node.back", "```java\nNode<E> back() {\n            Node<E> f = predecessor();\n            return (f == null || f.isSpecial()) ? null : f;\n        }\n```"], [292, "java", "PVector2DGenerator.createNormal", "```java\npublic static <T> Generator<PVector2D<T>> createNormal()\n  {\n    return new PVector2DGenerator<>(PrimitiveGenerators.doubles(\n      GeneratorConstants.BOUND_NORMAL_DOUBLE_LOWER,\n      GeneratorConstants.BOUND_NORMAL_DOUBLE_UPPER\n    ));\n  }\n```"], [54, "java", "IntMath.factorial", "```java\npublic static int factorial(int n) {\n    checkNonNegative(\"n\", n);\n    return (n < factorials.length) ? factorials[n] : Integer.MAX_VALUE;\n  }\n```"], [998, "java", "RandomizedBackoff.nextBackoff", "```java\n@Override\n  public long nextBackoff(int attempts, Throwable error) {\n    return _policy.nextBackoff(attempts, error) + _minRange + Math.round((_maxRange - _minRange) * ThreadLocalRandom.current().nextDouble());\n  }\n```"], [844, "java", "Striped.lazyWeakSemaphore", "```java\npublic static Striped<Semaphore> lazyWeakSemaphore(int stripes, final int permits) {\n    return lazy(\n        stripes,\n        new Supplier<Semaphore>() {\n          @Override\n          public Semaphore get() {\n            return new Semaphore(permits, false);\n          }\n        });\n  }\n```"], [528, "java", "ItemGroupAssert.assertDoesNotHaveDuplicates", "```java\nprotected final void assertDoesNotHaveDuplicates() {\n    isNotNull();\n    Collection<?> duplicates = duplicatesFrom(actualAsList());\n    if (duplicates.isEmpty()) {\n      return;\n    }\n    failIfCustomMessageIsSet();\n    throw failure(format(\"<%s> contains duplicate(s):<%s>\", actual, duplicates));\n  }\n```"], [854, "java", "Times.nextSecond", "```java\npublic static Date nextSecond(Date date, int second) {\r\n        Calendar cal = Calendar.getInstance();\r\n        if (date != null) {\r\n            cal.setTime(date);\r\n        }\r\n        cal.add(Calendar.SECOND, second);\r\n        return cal.getTime();\r\n    }\n```"], [937, "java", "Xmls.eachChildren", "```java\npublic static void eachChildren(Element ele,\n                                    String regex,\n                                    final Each<Element> callback,\n                                    int off) {\n        if (null == ele || null == callback)\n            return;\n\n        // \u6b63\u5219\u5f0f\n        final Pattern p = null == regex ? null : Pattern.compile(regex);\n\n        NodeList nl = ele.getChildNodes();\n\n        // \u5faa\u73af\u5b50\n        final int len = nl.getLength();\n\n        // \u6bcf\u6b21\u5faa\u73af\u6267\u884c\n        Callback2<Integer, Node> eachInvoke = new Callback2<Integer, Node>() {\n            public void invoke(Integer index, Node nd) {\n                if (nd instanceof Element)\n                    try {\n                        Element tag = (Element) nd;\n                        if (null == p || p.matcher(tag.getTagName()).find())\n                            callback.invoke(index, tag, len);\n                    }\n                    catch (ExitLoop e) {\n                        throw Lang.wrapThrow(e);\n                    }\n                    catch (ContinueLoop e) {}\n                    catch (LoopException e) {\n                        throw Lang.wrapThrow(e);\n                    }\n            }\n        };\n\n        try {\n            // \u8d1f\u5411\u8fed\u4ee3\n            if (off < 0) {\n                for (int i = len + off; i >= 0; i--) {\n                    eachInvoke.invoke(i, nl.item(i));\n                }\n            }\n            // \u6b63\u5411\u8fed\u4ee3\n            else {\n                for (int i = off; i < len; i++) {\n                    eachInvoke.invoke(i, nl.item(i));\n                }\n            }\n        }\n        catch (ExitLoop e) {}\n        catch (RuntimeException e) {\n            if (e.getCause() instanceof ExitLoop)\n                return;\n            else\n                throw e;\n        }\n    }\n```"], [65, "java", "JsonUnflattener.withSeparator", "```java\npublic JsonUnflattener withSeparator(char separator) {\n    isTrue(!Character.toString(separator).matches(\"[\\\"\\\\s]\"),\n        \"Separator contains illegal chracter(%s)\",\n        Character.toString(separator));\n    isTrue(!leftBracket.equals(separator) && !rightBracket.equals(separator),\n        \"Separator(%s) is already used in brackets\",\n        Character.toString(separator));\n\n    this.separator = separator;\n    return this;\n  }\n```"], [437, "java", "PopupAppRegistrationHandler.handleRegistrationRequest", "```java\n@Override\n    public void handleRegistrationRequest(Context context, AppDescriptor descriptor, final Callback callback) {\n        final DialogView dialogView = new DialogView(context, descriptor);\n\n        Dialog dialog = new AlertDialog.Builder(context).setPositiveButton(R.string.app_permission_dialog_allow, new AlertDialog.OnClickListener() {\n\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                callback.onRequestAccepted(dialogView.getSelectedPersona());\n            }\n        }).setNegativeButton(R.string.app_permission_dialog_deny, new AlertDialog.OnClickListener() {\n\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                callback.onRequestRefused();\n            }\n        }).setView(dialogView.getView()).create();\n\n\n        /*\n         * Workaround to fix the crash:\n\t\t * android.view.WindowManager$BadTokenException: Unable to add window\n\t\t * android.view.ViewRootImpl$W@3d67307 -- permission denied for this window type\n\t\t * that appears only on Android 6.0 Marshmallow or greater.\n\t\t * Start a dialog fragment to explain the procedure to the user.\n\t\t * When the user accepts, onClickOnUnderstoodButton() will be called.\n\t\t */\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            //if android MarshMallow or greater\n            if (Settings.canDrawOverlays(context)) {\n                dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n                dialog.show();\n            } else {\n                //to prevent a crash\n                Toast.makeText(context, \"You must activate SPF!\", Toast.LENGTH_SHORT).show();\n            }\n        } else {\n            //other older Android's versions\n            dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n            dialog.show();\n        }\n    }\n```"], [438, "java", "Themes.getColor", "```java\npublic static int getColor(Context context, @AttrRes int attrId) {\n        int color = 0;\n        TypedArray a = context.obtainStyledAttributes(new int[]{attrId});\n        try {\n            color = a.getColor(0, 0);\n        } catch (UnsupportedOperationException e) {\n            error(\"color\", attrId, e);\n        }\n        a.recycle();\n        return color;\n    }\n```"], [504, "java", "ReflectionHelper.getGetterPropertyName", "```java\npublic static String getGetterPropertyName(Member member) {\n        if (member instanceof Field) {\n            return member.getName();\n        } else if (member instanceof Method) {\n            String methodName = member.getName();\n            for (String prefix : PROPERTY_ACCESSOR_PREFIXES) {\n                if (methodName.startsWith(prefix)) {\n                    return decapitalizePropertyName(methodName.substring(prefix.length()));\n                }\n            }\n        }\n        return null;\n    }\n```"], [127, "java", "MenuTree.setDefault", "```java\npublic void setDefault(final UUID _selectCmdUUID)\n    {\n        final UIMenuItem menuItem = getProvider().getRoots().next();\n        menuItem.setHeader(true);\n        boolean hasDefault = false;\n        for (final UIMenuItem childItem : menuItem.getChildren()) {\n            if (_selectCmdUUID == null && childItem.isDefaultSelected()\n                            || _selectCmdUUID != null && _selectCmdUUID.equals(childItem.getCommandUUID())) {\n                hasDefault = true;\n                childItem.setSelected(true);\n            }\n        }\n        if (!hasDefault) {\n            menuItem.setSelected(true);\n        }\n        expand(menuItem);\n        expandChildren(menuItem);\n    }\n```"], [167, "java", "Mono.timeout", "```java\npublic final Mono<T> timeout(Duration timeout, Mono<? extends T> fallback) {\n\t\treturn timeout(timeout, fallback, Schedulers.parallel());\n\t}\n```"], [636, "java", "Maps.transformEntry", "```java\nstatic <V2, K, V1> Entry<K, V2> transformEntry(\n      final EntryTransformer<? super K, ? super V1, V2> transformer, final Entry<K, V1> entry) {\n    checkNotNull(transformer);\n    checkNotNull(entry);\n    return new AbstractMapEntry<K, V2>() {\n      @Override\n      public K getKey() {\n        return entry.getKey();\n      }\n\n      @Override\n      public V2 getValue() {\n        return transformer.transformEntry(entry.getKey(), entry.getValue());\n      }\n    };\n  }\n```"], [821, "java", "Record.get", "```java\npublic Object get(Object name) {\r\n        if (null == name)\r\n            return null;\r\n        return map.get(name.toString().toLowerCase());\r\n    }\n```"], [770, "java", "VotesClass.getBillsBySponsorYear", "```java\npublic Bills getBillsBySponsorYear(String candidateId, String year) throws VoteSmartException, VoteSmartErrorException {\r\n\t\treturn api.query(\"Votes.getBillsBySponsorYear\", new ArgMap(\"candidateId\", candidateId, \"year\", year), Bills.class );\r\n\t}\n```"], [685, "java", "Resources.asCharSource", "```java\npublic static CharSource asCharSource(URL url, Charset charset) {\n    return asByteSource(url).asCharSource(charset);\n  }\n```"], [135, "java", "SchematronResourcePure.validateCompletely", "```java\npublic void validateCompletely (@Nonnull final IPSErrorHandler aErrorHandler)\n  {\n    ValueEnforcer.notNull (aErrorHandler, \"ErrorHandler\");\n\n    try\n    {\n      getOrCreateBoundSchema ().getOriginalSchema ().validateCompletely (aErrorHandler);\n    }\n    catch (final RuntimeException ex)\n    {\n      // May happen when XPath errors are contained\n    }\n  }\n```"], [838, "java", "ShadowArscAssetManager9.nativeThemeCopy", "```java\n@Implementation(minSdk = Build.VERSION_CODES.Q)\n  protected static void nativeThemeCopy(long dst_asset_manager_ptr, long dst_theme_ptr,\n      long src_asset_manager_ptr, long src_theme_ptr) {\n    Theme dst_theme = Registries.NATIVE_THEME9_REGISTRY.getNativeObject(dst_theme_ptr);\n    Theme src_theme = Registries.NATIVE_THEME9_REGISTRY.getNativeObject(src_theme_ptr);\n\n    if (dst_asset_manager_ptr != src_asset_manager_ptr) {\n      CppAssetManager2 dst_assetmanager = AssetManagerFromLong(dst_asset_manager_ptr);\n      CHECK(dst_theme.GetAssetManager() == dst_assetmanager);\n\n      CppAssetManager2 src_assetmanager = AssetManagerFromLong(src_asset_manager_ptr);\n      CHECK(src_theme.GetAssetManager() == src_assetmanager);\n\n      dst_theme.SetTo(src_theme);\n    } else {\n      dst_theme.SetTo(src_theme);\n    }\n  }\n```"], [25, "java", "BcelUtil.accessFlagsToString", "```java\nstatic String accessFlagsToString(Method m) {\n\n    int flags = m.getAccessFlags();\n\n    StringBuilder buf = new StringBuilder();\n    // Note that pow is a binary mask for the flag (= 2^i).\n    for (int i = 0, pow = 1; i <= Const.MAX_ACC_FLAG; i++) {\n      if ((flags & pow) != 0) {\n        if (buf.length() > 0) {\n          buf.append(\" \");\n        }\n        if (i < Const.ACCESS_NAMES_LENGTH) {\n          buf.append(Const.getAccessName(i));\n        } else {\n          buf.append(String.format(\"ACC_BIT(%x)\", pow));\n        }\n      }\n      pow <<= 1;\n    }\n\n    return buf.toString();\n  }\n```"], [872, "java", "Collections2.filter", "```java\npublic static <E> Collection<E> filter(Collection<E> unfiltered, Predicate<? super E> predicate) {\n    if (unfiltered instanceof FilteredCollection) {\n      // Support clear(), removeAll(), and retainAll() when filtering a filtered\n      // collection.\n      return ((FilteredCollection<E>) unfiltered).createCombined(predicate);\n    }\n\n    return new FilteredCollection<E>(checkNotNull(unfiltered), checkNotNull(predicate));\n  }\n```"], [326, "java", "Chronos.runBroadcast", "```java\n@NonNull\n    public static <Output> ChronosOperationResult<Output> runBroadcast(\n            @NonNull final ChronosOperation<Output> operation) {\n        return ChronosService.getInstance().runSync(operation, true);\n    }\n```"], [604, "java", "XmlToXsdExtensions.xmlToXsd", "```java\npublic static void xmlToXsd(final File xmlInputFile, final File xsdOutFile,\n\t\tfinal Inst2XsdOptions inst2XsdOptions) throws XmlException, IOException\n\t{\n\t\txmlToXsd(xmlInputFile, xsdOutFile, inst2XsdOptions, new XmlOptions().setSavePrettyPrint());\n\t}\n```"]]}, "_runtime": 6054.014903306961, "_timestamp": 1581458355.41676, "_step": 482}
{"Examples-Test-java": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[745, "java", "Is24XmlUtils.getContext", "```java\npublic synchronized static JAXBContext getContext() throws JAXBException {\n        if (JAXB == null) initContext(Thread.currentThread().getContextClassLoader());\n        return JAXB;\n    }\n```"], [480, "java", "LogServiceImpl.setLoggerLevel", "```java\npublic void setLoggerLevel(String loggerName, String level) throws ManagementConsoleException {\r\n\r\n    sleeConnection.getSleeManagementMBeanUtils().getLogManagementMBeanUtils().setLoggerLevel(loggerName, level);\r\n\r\n  }\n```"], [126, "java", "Observable.hide", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> hide() {\n        return RxJavaPlugins.onAssembly(new ObservableHide<T>(this));\n    }\n```"], [432, "java", "FileAppender.setFile", "```java\npublic void setFile(String file) {\n    if (file == null) {\n      fileName = null;\n    } else {\n      // Trim spaces from both ends. The users probably does not want\n      // trailing spaces in file names.\n      fileName = file.trim();\n    }\n  }\n```"], [549, "java", "Properties.inspectProperties", "```java\nprotected HashMap<String, PropertyDescriptor> inspectProperties() {\n\t\tboolean scanAccessible = classDescriptor.isScanAccessible();\n\t\tClass type = classDescriptor.getType();\n\n\t\tHashMap<String, PropertyDescriptor> map = new HashMap<>();\n\n\t\tMethod[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type);\n\n\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t// first find the getters, and then the setters!\n\t\t\tfor (Method method : methods) {\n\t\t\t\tif (Modifier.isStatic(method.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static methods\n\t\t\t\t}\n\n\t\t\t\tboolean add = false;\n\t\t\t\tboolean issetter = false;\n\n\t\t\t\tString propertyName;\n\n\t\t\t\tif (iteration == 0) {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertyGetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertySetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (add) {\n\t\t\t\t\tMethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true);\n\t\t\t\t\taddProperty(map, propertyName, methodDescriptor, issetter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classDescriptor.isIncludeFieldsAsProperties()) {\n\t\t\tFieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors();\n\t\t\tString[] prefix = classDescriptor.getPropertyFieldPrefix();\n\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldDescriptors) {\n\t\t\t\tField field = fieldDescriptor.getField();\n\n\t\t\t\tif (Modifier.isStatic(field.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static fields\n\t\t\t\t}\n\n\t\t\t\tString name = field.getName();\n\n\t\t\t\tif (prefix != null) {\n\t\t\t\t\tfor (String p : prefix) {\n\t\t\t\t\t\tif (!name.startsWith(p)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = name.substring(p.length());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!map.containsKey(name)) {\n\t\t\t\t\t// add missing field as a potential property\n\t\t\t\t\tmap.put(name, createPropertyDescriptor(name, fieldDescriptor));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn map;\n\t}\n```"], [59, "java", "ExceptionHelper.wrapOrThrow", "```java\npublic static RuntimeException wrapOrThrow(Throwable error) {\n        if (error instanceof Error) {\n            throw (Error)error;\n        }\n        if (error instanceof RuntimeException) {\n            return (RuntimeException)error;\n        }\n        return new RuntimeException(error);\n    }\n```"], [606, "java", "SegmentedByteArray.rangeEquals", "```java\npublic boolean rangeEquals(long rangeStart, SegmentedByteArray compareTo, long cmpStart, int length) {\n    \tfor(int i=0;i<length;i++)\n    \t\tif(get(rangeStart + i) != compareTo.get(cmpStart + i))\n    \t\t\treturn false;\n    \treturn true;\n    }\n```"], [18, "java", "Update.getVersion", "```java\npublic String getVersion() throws MalformedElementException {\n        Element version = getFirstChild(root, \"version\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingVersionElmt\"), version); //$NON-NLS-1$\n        String href = getChildText(version, \"href\", true); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingHrefElmt\"), href); //$NON-NLS-1$\n        return decodeHref(href);\n    }\n```"], [346, "java", "AbstractRequestMatcherRegistry.antMatchers", "```java\npublic C antMatchers(String... antPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure antMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.antMatchers(antPatterns));\n\t}\n```"], [439, "java", "AbstractRefreshMetricsListener.noFailRefreshEndMetricsReporting", "```java\nprivate final void noFailRefreshEndMetricsReporting(ConsumerRefreshMetrics refreshMetrics) {\n        try {\n            refreshEndMetricsReporting(refreshMetrics);\n        } catch (Exception e) {\n            // Metric reporting is not considered critical to consumer refresh. Log exceptions and continue.\n            log.log(Level.SEVERE, \"Encountered an exception in reporting consumer refresh metrics, ignoring exception and continuing with consumer refresh\", e);\n        }\n    }\n```"], [49, "java", "JtxTransaction.commitOrRollback", "```java\nprotected void commitOrRollback(boolean doCommit) {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (doCommit) {\n\t\t\t\tlog.debug(\"Commit JTX\");\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Rollback JTX\");\n\t\t\t}\n\t\t}\n\t\tboolean forcedRollback = false;\n\t\tif (!isNoTransaction()) {\n\t\t\tif (isRollbackOnly()) {\n\t\t\t\tif (doCommit) {\n\t\t\t\t\tdoCommit = false;\n\t\t\t\t\tforcedRollback = true;\n\t\t\t\t}\n\t\t\t} else if (!isActive()) {\n\t\t\t\tif (isCompleted()) {\n\t\t\t\t\tthrow new JtxException(\"TX is already completed, commit or rollback should be called once per TX\");\n\t\t\t\t}\n\t\t\t\tthrow new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\"));\n\t\t\t}\n\t\t}\n\t\tif (doCommit) {\n\t\t\tcommitAllResources();\n\t\t} else {\n\t\t\trollbackAllResources(forcedRollback);\n\t\t}\n\t}\n```"], [352, "java", "PrologParser.main", "```java\npublic static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }\n```"], [268, "java", "FileNameUtil.concat", "```java\npublic static String concat(final String basePath, final String fullFilenameToAdd) {\n\t\treturn doConcat(basePath, fullFilenameToAdd, SYSTEM_SEPARATOR);\n\t}\n```"], [387, "java", "UserClient.updateUser", "```java\npublic User updateUser(User userParam)\n    {\n        if(userParam != null && this.serviceTicket != null)\n        {\n            userParam.setServiceTicket(this.serviceTicket);\n        }\n\n        return new User(this.postJson(\n                userParam, WS.Path.User.Version1.userUpdate()));\n    }\n```"], [825, "java", "RollupService.setServerTime", "```java\npublic synchronized void setServerTime(long millis) {\n        log.info(\"Manually setting server time to {}  {}\", millis, new java.util.Date(millis));\n        context.setCurrentTimeMillis(millis);\n    }\n```"], [808, "java", "EmailFilter.or", "```java\nprotected void or(final SearchTerm searchTerm) {\n\t\tif (this.searchTerm == null) {\n\t\t\tthis.searchTerm = searchTerm;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchTerm = new OrTerm(this.searchTerm, searchTerm);\n\t}\n```"], [511, "java", "ReteGraph.addChild", "```java\npublic boolean addChild(BaseVertex vertex) {\n        if ( vertex != null && vertices.add( vertex ) ) {\n            firePropertyChange( PROP_CHILD_ADDED,\n                                null,\n                                vertex );\n            return true;\n        }\n        return false;\n    }\n```"], [156, "java", "JPANotificationRESTController.getNotifications", "```java\n@RequestMapping(method = RequestMethod.GET)\n    @ResponseBody\n    public List<EntryDTO> getNotifications(\n            @RequestParam(value = \"page\", required = false) Integer page,\n            @RequestParam(value = \"pageSize\", required = false) Integer pageSize) {\n\n        return restService.getNotifications(page, pageSize);\n    }\n```"], [301, "java", "Iterators.limit", "```java\npublic static <E> Iterator<E> limit(Iterator<? extends E> iterator,\n\t\tint limit)\n\t{\n\t\treturn new LimitIterator<E>(iterator, limit);\n\t}\n```"], [925, "java", "Base64.encodeToString", "```java\npublic static String encodeToString(String s) {\n        try {\n            return new String(encodeToChar(s.getBytes(ENCODING), false));\n        } catch (UnsupportedEncodingException ignore) {\n            return null;\n        }\n    }\n```"], [103, "java", "AreaGrid.calculateColumns", "```java\nprivate void calculateColumns()\n    {\n        //create the sorted list of points\n        GridPoint points[] = new GridPoint[areas.size() * 2];\n        int pi = 0;\n        for (Area area : areas)\n        {\n            points[pi] = new GridPoint(area.getX1(), area, true);\n            points[pi+1] = new GridPoint(area.getX2() + 1, area, false);\n            pi += 2;\n            //X2+1 ensures that the end of one box will be on the same point\n            //as the start of the following box\n        }\n        Arrays.sort(points);\n        \n        //calculate the number of columns\n        int cnt = 0;\n        int last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n            if (!theSame(points[i].value, last))\n            { \n                last = points[i].value;\n                cnt++;\n            }\n        if (!theSame(last, abspos.getX2()))\n        \tcnt++; //last column finishes the whole area\n        width = cnt;\n        \n        //calculate the column widths and the layout\n        maxindent = 0;\n        minindent = -1;\n        cols = new int[width];\n        cnt = 0;\n        last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n        {\n            if (!theSame(points[i].value, last)) \n            {\n                cols[cnt] = points[i].value - last;\n                last = points[i].value;\n                cnt++;\n            }\n            if (points[i].begin)\n            {\n                target.getPosition(points[i].area).setX1(cnt);\n                maxindent = cnt;\n                if (minindent == -1) minindent = maxindent;\n                //points[i].node.getArea().setX1(parent.getArea().getX1() + getColOfs(cnt));\n            }\n            else\n            {\n                Rectangular pos = target.getPosition(points[i].area); \n                pos.setX2(cnt-1);\n                if (pos.getX2() < pos.getX1())\n                    pos.setX2(pos.getX1());\n                //points[i].node.getArea().setX2(parent.getArea().getX1() + getColOfs(pos.getX2()+1));\n            }\n        }\n        if (!theSame(last, abspos.getX2()))\n        \tcols[cnt] = abspos.getX2() - last;\n        if (minindent == -1)\n            minindent = 0;\n    }\n```"], [570, "java", "JdbcHelper.initialize", "```java\nprivate static void initialize() {\n\t\tString driver = ConfigHelper.getProperty(\"jdbc.driver\");\n\t\tString url = ConfigHelper.getProperty(\"jdbc.url\");\n\t\tString username = ConfigHelper.getProperty(\"jdbc.username\");\n\t\tString password = ConfigHelper.getProperty(\"jdbc.password\");\n\t\tint maxActive = ConfigHelper.getNumerProperty(\"jdbc.max.active\");\n\t\tint maxIdle = ConfigHelper.getNumerProperty(\"jdbc.max.idle\");\n\t\tAssertHelper.notNull(driver);\n\t\tAssertHelper.notNull(url);\n\t\tAssertHelper.notNull(username);\n\t\tAssertHelper.notNull(password);\n\t\t//\u521d\u59cb\u5316DBCP\u6570\u636e\u6e90\n\t\tBasicDataSource ds = new BasicDataSource();\n\t\tds.setDriverClassName(driver);\n\t\tds.setUrl(url);\n\t\tds.setUsername(username);\n\t\tds.setPassword(password);\n        if(maxActive != 0) {\n\t\t    ds.setMaxActive(maxActive);\n        }\n        if(maxIdle != 0) {\n\t\t    ds.setMaxIdle(maxIdle);\n        }\n\t\tdataSource = ds;\n\t}\n```"], [993, "java", "PasswordLoginModule.abort", "```java\n@Override\n    // Check is broken [LOG.info()]: PMD reports issues although log stmt is guarded. @todo revisit when upgrading PMD.\n    @SuppressWarnings(\"PMD.GuardLogStatementJavaUtil\")\n    public final boolean abort()\n            throws LoginException {\n\n        if (pendingSubject == null) {\n            // the login method of this module has failed earlier, hence we do not need to clean up anything\n            // return 'false' to indicate that this module's login and/or commit method failed\n            // As the login method failed, the state of the module has already been cleared and we do not know\n            // the username / domain anymore. Hence no auditing / message queue notification, and not verbose logging.\n\n            LOG.debug(\"Aborting authentication, as the authentication has failed earlier (login method)\");\n\n            return false;\n        } else if (committedSubject == null) {\n            // the login method of this module succeeded, but the overall authentication failed\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Aborting authentication: '\" + username + \"@\" + domain + \"'\");\n            }\n\n            // cache the username and domain, for they will be purged by \"cleanState()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            cleanState();\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(tempUsername).\n                    append(\"@\").\n                    append(tempDomain).\n                    toString();\n            AuditHelper.auditEvent(audit, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        } else {\n            // overall authentication succeeded and commit succeeded, but someone else's commit failed\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(username).\n                    append(\"@\").\n                    append(domain).\n                    toString();\n            AuditHelper.auditEvent(audit, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // cache the username and domain, for they will be purged by \"logout()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            logout();\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        }\n    }\n```"], [123, "java", "Parser.parseOptionalBody", "```java\nprivate void parseOptionalBody( Node parent, String tag, String bodyType ) \n        throws JasperException \n    {\n\tif (reader.matches(\"/>\")) {\n\t    // EmptyBody\n\t    return;\n\t}\n\n\tif (!reader.matches(\">\")) {\n\t    err.jspError(reader.mark(), \"jsp.error.unterminated\",\n\t\t\t \"&lt;\" + tag );\n\t}\n        \n        if( reader.matchesETag( tag ) ) {\n            // EmptyBody\n            return;\n        }\n        \n        if( !parseJspAttributeAndBody( parent, tag, bodyType ) ) {\n            // Must be ( '>' # Body ETag )\n            parseBody(parent, tag, bodyType );\n        }\n    }\n```"], [132, "java", "Completable.doOnComplete", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable doOnComplete(Action onComplete) {\n        return doOnLifecycle(Functions.emptyConsumer(), Functions.emptyConsumer(),\n                onComplete, Functions.EMPTY_ACTION,\n                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);\n    }\n```"], [776, "java", "Strings.trimLeadingCharacter", "```java\npublic static String trimLeadingCharacter(String str, final char leadingCharacter)\n   {\n      return trimLeadingCharacter(str, new CharacterChecker()\n      {\n         public boolean isCharacterLegal(char character)\n         {\n            return character == leadingCharacter;\n         }\n      });\n   }\n```"], [412, "java", "ProxettaAsmUtil.resolveJavaVersion", "```java\npublic static int resolveJavaVersion(final int version) {\n\t\tfinal int javaVersionNumber = SystemUtil.info().getJavaVersionNumber();\n\t\tfinal int platformVersion = javaVersionNumber - 8 + 52;\n\n\t\treturn version > platformVersion ? version : platformVersion;\n\t}\n```"], [315, "java", "OpenRtbJsonUtils.startArray", "```java\npublic static void startArray(JsonParser par) throws IOException {\n    JsonToken token = par.getCurrentToken();\n    if (token == null || token == JsonToken.FIELD_NAME) {\n      token = par.nextToken();\n    }\n    if (token == JsonToken.START_ARRAY) {\n      par.nextToken();\n    } else {\n      throw new JsonParseException(par, \"Expected start of array\");\n    }\n  }\n```"], [267, "java", "Observable.take", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler) {\n        return takeUntil(timer(time, unit, scheduler));\n    }\n```"], [669, "java", "AbstractEndpoint.executeAndHandle", "```java\nprotected HttpResponse executeAndHandle(Request request)\n            throws IOException, IllegalArgumentException, IllegalAccessException, FileNotFoundException, IllegalStateException {\n        HttpResponse response = execute(request);\n        handleResponse(response, request);\n        return response;\n    }\n```"], [377, "java", "PipelineConfigurationUpgrader.upgradeIfNecessary", "```java\npublic PipelineConfiguration upgradeIfNecessary(\n      StageLibraryTask library,\n      PipelineConfiguration pipelineConf,\n      List<Issue> issues\n  ) {\n    Preconditions.checkArgument(issues.isEmpty(), \"Given list of issues must be empty.\");\n    boolean upgrade;\n\n    // Firstly upgrading schema if needed, then data\n    upgrade = needsSchemaUpgrade(pipelineConf, issues);\n    if(upgrade && issues.isEmpty()) {\n      pipelineConf = upgradeSchema(library, pipelineConf, issues);\n    }\n\n    // Something went wrong with the schema upgrade\n    if(!issues.isEmpty()) {\n      return null;\n    }\n\n    // Upgrading data if needed\n    upgrade = needsUpgrade(library, pipelineConf, issues);\n    if (upgrade && issues.isEmpty()) {\n      //we try to upgrade only if we have all defs for the pipelineConf\n      pipelineConf = upgrade(library, pipelineConf, issues);\n    }\n    return (issues.isEmpty()) ? pipelineConf : null;\n  }\n```"], [565, "java", "TimerServiceImpl.getWaitingOnTxCompletionTimers", "```java\nprivate Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }\n```"], [122, "java", "RequestHandler.mainRequestHandler", "```java\n@ServiceMethod\n    public void mainRequestHandler(DataStoreRequest dataStoreRequest) {\n\n\n        if (verbose || debug) {\n            logger.info(\"RequestHandler::mainRequestHandler\", dataStoreRequest);\n        }\n        switch (dataStoreRequest.action()) {\n            case GET:\n                masterDataStore.get((GetRequest) dataStoreRequest);\n                break;\n            case GET_LOCAL_DB:\n                handleGetLocalDbVerb(dataStoreRequest);\n                break;\n            case GET_MEM:\n                handleGetMemVerb(dataStoreRequest);\n                break;\n            case SET:\n                masterDataStore.set((SetRequest) dataStoreRequest);\n                break;\n            case SET_BROADCAST:\n                handleSetAndBroadCastVerb(dataStoreRequest);\n                break;\n            case SET_IF_NOT_EXIST:\n                handleSetIfNotExistsVerb(dataStoreRequest);\n                break;\n            case SET_BATCH:\n                handleSetBatch(dataStoreRequest);\n                break;\n            case SET_BATCH_IF_NOT_EXISTS:\n                handleSetBatchIfNotExists(dataStoreRequest);\n                break;\n            case SET_SOURCE:\n                handleSetSource(dataStoreRequest);\n                break;\n            case GET_SOURCE:\n                handleGetSource(dataStoreRequest);\n                break;\n\n            case BATCH_READ:\n                handleBatchRead(dataStoreRequest);\n                break;\n\n            case CLEAR_STATS:\n                handleClearStats(dataStoreRequest);\n                break;\n\n\n            case GET_STATS:\n                handleGetStats(dataStoreRequest);\n                break;\n\n\n            case REMOVE:\n                handleRemove(dataStoreRequest);\n                break;\n\n\n            case REMOVE_SOURCE:\n                handleRemoveSource(dataStoreRequest);\n                break;\n\n            case METHOD_CALL:\n                handleMethodCall((MethodCall) dataStoreRequest);\n                break;\n\n            case SEARCH:\n                handleSearchVerb(dataStoreRequest);\n                break;\n\n            default:\n                puts(dataStoreRequest);\n\n\n        }\n        trackCall(dataStoreRequest.action());\n    }\n```"], [255, "java", "AvroTypeUtil.getAvroSchemaFromHeader", "```java\npublic static String getAvroSchemaFromHeader(Record record, String headerName) throws DataGeneratorException {\n    String jsonSchema = record.getHeader().getAttribute(headerName);\n    if(jsonSchema == null || jsonSchema.isEmpty()) {\n      throw new DataGeneratorException(Errors.AVRO_GENERATOR_03, record.getHeader().getSourceId());\n    }\n    return jsonSchema;\n  }\n```"], [699, "java", "InterfaceRepository.addInterface", "```java\nprivate InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }\n```"], [800, "java", "StdRandom.uniform", "```java\npublic static int uniform(int a, int b)\n  {\n    if (b <= a)\n      throw new IllegalArgumentException(\"Invalid range\");\n    if ((long) b - a >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"Invalid range\");\n    return a + uniform(b - a);\n  }\n```"], [995, "java", "DapController.init", "```java\npublic void init()\n            throws ServletException\n    {\n        org.slf4j.Logger logServerStartup = org.slf4j.LoggerFactory.getLogger(\"serverStartup\");\n        logServerStartup.info(getClass().getName() + \" initialization start\");\n        try {\n            System.setProperty(\"file.encoding\", \"UTF-8\");\n            Field charset = Charset.class.getDeclaredField(\"defaultCharset\");\n            charset.setAccessible(true);\n            charset.set(null, null);\n            initialize();\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n```"], [267, "java", "OfflineClient.getIndex", "```java\n@Override\n    public @NonNull MirroredIndex getIndex(@NonNull String indexName) {\n        MirroredIndex index = null;\n        WeakReference<Object> existingIndex = indices.get(indexName);\n        if (existingIndex != null) {\n            index = (MirroredIndex)existingIndex.get();\n        }\n        if (index == null) {\n            index = new MirroredIndex(this, indexName);\n            indices.put(indexName, new WeakReference<Object>(index));\n        }\n        return index;\n    }\n```"], [127, "java", "TdsRequestedDataset.getGridDataset", "```java\npublic static GridDataset getGridDataset(HttpServletRequest request, HttpServletResponse response, String path) throws IOException {\n    TdsRequestedDataset trd = new TdsRequestedDataset(request, null);\n    if (path != null) trd.path = path;\n    return trd.openAsGridDataset(request, response);\n  }\n```"], [739, "java", "Types.isBuiltinType", "```java\npublic static boolean isBuiltinType(Type type) {\n\t\tClass<?> rawType = getRawType(type);\n\t\treturn (rawType == null) ? false : builtins.contains(rawType);\n\t}\n```"], [132, "java", "SimpleRuleStore.addRule", "```java\npublic void addRule(ElementSelector elementSelector, Action action) {\n    action.setContext(context);\n\n    List<Action> a4p = rules.get(elementSelector);\n\n    if (a4p == null) {\n      a4p = new ArrayList<Action>();\n      rules.put(elementSelector, a4p);\n    }\n\n    a4p.add(action);\n  }\n```"], [811, "java", "RpcResponseResolver.toResponseObject", "```java\nprivate static Object toResponseObject(ResponseCommand responseCommand) throws CodecException {\n        RpcResponseCommand response = (RpcResponseCommand) responseCommand;\n        response.deserialize();\n        return response.getResponseObject();\n    }\n```"], [247, "java", "OClosableLinkedContainer.checkOpenFilesLimit", "```java\nprivate void checkOpenFilesLimit() throws InterruptedException {\n    CountDownLatch ol = openLatch.get();\n    if (ol != null)\n      ol.await();\n\n    while (openFiles.get() > openLimit) {\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      //make other threads to wait till we evict entries and close evicted open files\n      if (openLatch.compareAndSet(null, latch)) {\n        while (openFiles.get() > openLimit) {\n          emptyBuffers();\n        }\n\n        latch.countDown();\n        openLatch.set(null);\n      } else {\n        ol = openLatch.get();\n\n        if (ol != null)\n          ol.await();\n      }\n    }\n  }\n```"], [540, "java", "GuiceApplicationBuilder.load", "```java\npublic GuiceApplicationBuilder load(GuiceableModule... modules) {\n    return newBuilder(delegate.load(Scala.varargs(modules)));\n  }\n```"], [877, "java", "ProfileEntityArrayAttributeValue.setByte", "```java\npublic void setByte(Byte attrValue) {\n\t\tif (attrValue != null) {\n\t\t\tsetString(attrValue.toString());\n\t\t}\n\t\telse {\n\t\t\tsetString(null);\n\t\t}\n\t}\n```"], [424, "java", "StreamUtil.outputStreamWriterOf", "```java\npublic static OutputStreamWriter outputStreamWriterOf(final OutputStream output, final String encoding) throws UnsupportedEncodingException {\n\t\treturn new OutputStreamWriter(output, encoding);\n\t}\n```"], [189, "java", "BufrTableBViewer.writeDiff", "```java\nprivate void writeDiff(TableB wmo, TableB t, Formatter out) {\r\n    out.format(\"#%n# BUFR diff written from %s against %s %n#%n\", t.getName(), wmo.getName());\r\n    out.format(\"Class,FXY,enElementName,BUFR_Unit,BUFR_Scale,BUFR_ReferenceValue,BUFR_DataWidth_Bits%n\");\r\n    List<TableB.Descriptor> listDesc = new ArrayList<>(t.getDescriptors());\r\n    Collections.sort(listDesc);\r\n    for (TableB.Descriptor d1 : listDesc) {\r\n      TableB.Descriptor d2 = wmo.getDescriptor(d1.getId());\r\n      if ((d2 == null) || (d1.getScale() != d2.getScale()) || (d1.getRefVal() != d2.getRefVal()) || (d1.getDataWidth() != d2.getDataWidth())) {\r\n        short fxy = d1.getId();\r\n//        int f = (fxy & 0xC000) >> 14;\r\n        int x  = (fxy & 0x3F00) >> 8;\r\n        int y  = fxy & 0xFF;\r\n        out.format(\"%d,%2d%03d,\\\"%s\\\",%s,%d,%d,%d%n\",x,x,y, d1.getName(), d1.getUnits(), d1.getScale(), d1.getRefVal(), d1.getDataWidth());\r\n      }\r\n    }\r\n    out.flush();\r\n  }\n```"], [654, "java", "OpenRtbUtils.bids", "```java\npublic static Iterable<Bid.Builder> bids(BidResponse.Builder response) {\n    return new ResponseBidsIterator(response, SEAT_ANY, null);\n  }\n```"], [92, "java", "Flowable.blockingSubscribe", "```java\n@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final void blockingSubscribe(Consumer<? super T> onNext) {\n        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);\n    }\n```"], [728, "java", "Completable.repeatUntil", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable repeatUntil(BooleanSupplier stop) {\n        return fromPublisher(toFlowable().repeatUntil(stop));\n    }\n```"]]}, "_runtime": 6145.709762334824, "_timestamp": 1581458447.111619, "_step": 483}
{"Examples-FuncNameTest-java": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[324, "java", "Is24XmlUtils.getContext", "```java\npublic synchronized static JAXBContext getContext() throws JAXBException {\n        if (JAXB == null) initContext(Thread.currentThread().getContextClassLoader());\n        return JAXB;\n    }\n```"], [480, "java", "LogServiceImpl.setLoggerLevel", "```java\npublic void setLoggerLevel(String loggerName, String level) throws ManagementConsoleException {\r\n\r\n    sleeConnection.getSleeManagementMBeanUtils().getLogManagementMBeanUtils().setLoggerLevel(loggerName, level);\r\n\r\n  }\n```"], [58, "java", "Observable.hide", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Observable<T> hide() {\n        return RxJavaPlugins.onAssembly(new ObservableHide<T>(this));\n    }\n```"], [772, "java", "FileAppender.setFile", "```java\npublic void setFile(String file) {\n    if (file == null) {\n      fileName = null;\n    } else {\n      // Trim spaces from both ends. The users probably does not want\n      // trailing spaces in file names.\n      fileName = file.trim();\n    }\n  }\n```"], [492, "java", "Properties.inspectProperties", "```java\nprotected HashMap<String, PropertyDescriptor> inspectProperties() {\n\t\tboolean scanAccessible = classDescriptor.isScanAccessible();\n\t\tClass type = classDescriptor.getType();\n\n\t\tHashMap<String, PropertyDescriptor> map = new HashMap<>();\n\n\t\tMethod[] methods = scanAccessible ? ClassUtil.getAccessibleMethods(type) : ClassUtil.getSupportedMethods(type);\n\n\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t// first find the getters, and then the setters!\n\t\t\tfor (Method method : methods) {\n\t\t\t\tif (Modifier.isStatic(method.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static methods\n\t\t\t\t}\n\n\t\t\t\tboolean add = false;\n\t\t\t\tboolean issetter = false;\n\n\t\t\t\tString propertyName;\n\n\t\t\t\tif (iteration == 0) {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertyGetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tpropertyName = ClassUtil.getBeanPropertySetterName(method);\n\t\t\t\t\tif (propertyName != null) {\n\t\t\t\t\t\tadd = true;\n\t\t\t\t\t\tissetter = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (add) {\n\t\t\t\t\tMethodDescriptor methodDescriptor = classDescriptor.getMethodDescriptor(method.getName(), method.getParameterTypes(), true);\n\t\t\t\t\taddProperty(map, propertyName, methodDescriptor, issetter);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (classDescriptor.isIncludeFieldsAsProperties()) {\n\t\t\tFieldDescriptor[] fieldDescriptors = classDescriptor.getAllFieldDescriptors();\n\t\t\tString[] prefix = classDescriptor.getPropertyFieldPrefix();\n\n\t\t\tfor (FieldDescriptor fieldDescriptor : fieldDescriptors) {\n\t\t\t\tField field = fieldDescriptor.getField();\n\n\t\t\t\tif (Modifier.isStatic(field.getModifiers())) {\n\t\t\t\t\tcontinue;            // ignore static fields\n\t\t\t\t}\n\n\t\t\t\tString name = field.getName();\n\n\t\t\t\tif (prefix != null) {\n\t\t\t\t\tfor (String p : prefix) {\n\t\t\t\t\t\tif (!name.startsWith(p)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tname = name.substring(p.length());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!map.containsKey(name)) {\n\t\t\t\t\t// add missing field as a potential property\n\t\t\t\t\tmap.put(name, createPropertyDescriptor(name, fieldDescriptor));\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\treturn map;\n\t}\n```"], [826, "java", "ExceptionHelper.wrapOrThrow", "```java\npublic static RuntimeException wrapOrThrow(Throwable error) {\n        if (error instanceof Error) {\n            throw (Error)error;\n        }\n        if (error instanceof RuntimeException) {\n            return (RuntimeException)error;\n        }\n        return new RuntimeException(error);\n    }\n```"], [213, "java", "SegmentedByteArray.rangeEquals", "```java\npublic boolean rangeEquals(long rangeStart, SegmentedByteArray compareTo, long cmpStart, int length) {\n    \tfor(int i=0;i<length;i++)\n    \t\tif(get(rangeStart + i) != compareTo.get(cmpStart + i))\n    \t\t\treturn false;\n    \treturn true;\n    }\n```"], [226, "java", "Update.getVersion", "```java\npublic String getVersion() throws MalformedElementException {\n        Element version = getFirstChild(root, \"version\"); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingVersionElmt\"), version); //$NON-NLS-1$\n        String href = getChildText(version, \"href\", true); //$NON-NLS-1$\n        ensureNotNull(Policy.bind(\"ensure.missingHrefElmt\"), href); //$NON-NLS-1$\n        return decodeHref(href);\n    }\n```"], [333, "java", "AbstractRequestMatcherRegistry.antMatchers", "```java\npublic C antMatchers(String... antPatterns) {\n\t\tAssert.state(!this.anyRequestConfigured, \"Can't configure antMatchers after anyRequest\");\n\t\treturn chainRequestMatchers(RequestMatchers.antMatchers(antPatterns));\n\t}\n```"], [636, "java", "AbstractRefreshMetricsListener.noFailRefreshEndMetricsReporting", "```java\nprivate final void noFailRefreshEndMetricsReporting(ConsumerRefreshMetrics refreshMetrics) {\n        try {\n            refreshEndMetricsReporting(refreshMetrics);\n        } catch (Exception e) {\n            // Metric reporting is not considered critical to consumer refresh. Log exceptions and continue.\n            log.log(Level.SEVERE, \"Encountered an exception in reporting consumer refresh metrics, ignoring exception and continuing with consumer refresh\", e);\n        }\n    }\n```"], [377, "java", "JtxTransaction.commitOrRollback", "```java\nprotected void commitOrRollback(boolean doCommit) {\n\t\tif (log.isDebugEnabled()) {\n\t\t\tif (doCommit) {\n\t\t\t\tlog.debug(\"Commit JTX\");\n\t\t\t} else {\n\t\t\t\tlog.debug(\"Rollback JTX\");\n\t\t\t}\n\t\t}\n\t\tboolean forcedRollback = false;\n\t\tif (!isNoTransaction()) {\n\t\t\tif (isRollbackOnly()) {\n\t\t\t\tif (doCommit) {\n\t\t\t\t\tdoCommit = false;\n\t\t\t\t\tforcedRollback = true;\n\t\t\t\t}\n\t\t\t} else if (!isActive()) {\n\t\t\t\tif (isCompleted()) {\n\t\t\t\t\tthrow new JtxException(\"TX is already completed, commit or rollback should be called once per TX\");\n\t\t\t\t}\n\t\t\t\tthrow new JtxException(\"No active TX to \" + (doCommit ? \"commit\" : \"rollback\"));\n\t\t\t}\n\t\t}\n\t\tif (doCommit) {\n\t\t\tcommitAllResources();\n\t\t} else {\n\t\t\trollbackAllResources(forcedRollback);\n\t\t}\n\t}\n```"], [323, "java", "PrologParser.main", "```java\npublic static void main(String[] args)\n    {\n        try\n        {\n            SimpleCharStream inputStream = new SimpleCharStream(System.in, null, 1, 1);\n            PrologParserTokenManager tokenManager = new PrologParserTokenManager(inputStream);\n            Source<Token> tokenSource = new TokenSource(tokenManager);\n\n            PrologParser parser =\n                new PrologParser(tokenSource,\n                    new VariableAndFunctorInternerImpl(\"Prolog_Variable_Namespace\", \"Prolog_Functor_Namespace\"));\n\n            while (true)\n            {\n                // Parse the next sentence or directive.\n                Object nextParsing = parser.clause();\n\n                console.info(nextParsing.toString());\n            }\n        }\n        catch (Exception e)\n        {\n            console.log(Level.SEVERE, e.getMessage(), e);\n            System.exit(1);\n        }\n    }\n```"], [8, "java", "FileNameUtil.concat", "```java\npublic static String concat(final String basePath, final String fullFilenameToAdd) {\n\t\treturn doConcat(basePath, fullFilenameToAdd, SYSTEM_SEPARATOR);\n\t}\n```"], [295, "java", "UserClient.updateUser", "```java\npublic User updateUser(User userParam)\n    {\n        if(userParam != null && this.serviceTicket != null)\n        {\n            userParam.setServiceTicket(this.serviceTicket);\n        }\n\n        return new User(this.postJson(\n                userParam, WS.Path.User.Version1.userUpdate()));\n    }\n```"], [860, "java", "RollupService.setServerTime", "```java\npublic synchronized void setServerTime(long millis) {\n        log.info(\"Manually setting server time to {}  {}\", millis, new java.util.Date(millis));\n        context.setCurrentTimeMillis(millis);\n    }\n```"], [929, "java", "EmailFilter.or", "```java\nprotected void or(final SearchTerm searchTerm) {\n\t\tif (this.searchTerm == null) {\n\t\t\tthis.searchTerm = searchTerm;\n\t\t\treturn;\n\t\t}\n\n\t\tthis.searchTerm = new OrTerm(this.searchTerm, searchTerm);\n\t}\n```"], [101, "java", "ReteGraph.addChild", "```java\npublic boolean addChild(BaseVertex vertex) {\n        if ( vertex != null && vertices.add( vertex ) ) {\n            firePropertyChange( PROP_CHILD_ADDED,\n                                null,\n                                vertex );\n            return true;\n        }\n        return false;\n    }\n```"], [152, "java", "JPANotificationRESTController.getNotifications", "```java\n@RequestMapping(method = RequestMethod.GET)\n    @ResponseBody\n    public List<EntryDTO> getNotifications(\n            @RequestParam(value = \"page\", required = false) Integer page,\n            @RequestParam(value = \"pageSize\", required = false) Integer pageSize) {\n\n        return restService.getNotifications(page, pageSize);\n    }\n```"], [718, "java", "Iterators.limit", "```java\npublic static <E> Iterator<E> limit(Iterator<? extends E> iterator,\n\t\tint limit)\n\t{\n\t\treturn new LimitIterator<E>(iterator, limit);\n\t}\n```"], [544, "java", "Base64.encodeToString", "```java\npublic static String encodeToString(String s) {\n        try {\n            return new String(encodeToChar(s.getBytes(ENCODING), false));\n        } catch (UnsupportedEncodingException ignore) {\n            return null;\n        }\n    }\n```"], [943, "java", "AreaGrid.calculateColumns", "```java\nprivate void calculateColumns()\n    {\n        //create the sorted list of points\n        GridPoint points[] = new GridPoint[areas.size() * 2];\n        int pi = 0;\n        for (Area area : areas)\n        {\n            points[pi] = new GridPoint(area.getX1(), area, true);\n            points[pi+1] = new GridPoint(area.getX2() + 1, area, false);\n            pi += 2;\n            //X2+1 ensures that the end of one box will be on the same point\n            //as the start of the following box\n        }\n        Arrays.sort(points);\n        \n        //calculate the number of columns\n        int cnt = 0;\n        int last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n            if (!theSame(points[i].value, last))\n            { \n                last = points[i].value;\n                cnt++;\n            }\n        if (!theSame(last, abspos.getX2()))\n        \tcnt++; //last column finishes the whole area\n        width = cnt;\n        \n        //calculate the column widths and the layout\n        maxindent = 0;\n        minindent = -1;\n        cols = new int[width];\n        cnt = 0;\n        last = abspos.getX1();\n        for (int i = 0; i < points.length; i++)\n        {\n            if (!theSame(points[i].value, last)) \n            {\n                cols[cnt] = points[i].value - last;\n                last = points[i].value;\n                cnt++;\n            }\n            if (points[i].begin)\n            {\n                target.getPosition(points[i].area).setX1(cnt);\n                maxindent = cnt;\n                if (minindent == -1) minindent = maxindent;\n                //points[i].node.getArea().setX1(parent.getArea().getX1() + getColOfs(cnt));\n            }\n            else\n            {\n                Rectangular pos = target.getPosition(points[i].area); \n                pos.setX2(cnt-1);\n                if (pos.getX2() < pos.getX1())\n                    pos.setX2(pos.getX1());\n                //points[i].node.getArea().setX2(parent.getArea().getX1() + getColOfs(pos.getX2()+1));\n            }\n        }\n        if (!theSame(last, abspos.getX2()))\n        \tcols[cnt] = abspos.getX2() - last;\n        if (minindent == -1)\n            minindent = 0;\n    }\n```"], [700, "java", "JdbcHelper.initialize", "```java\nprivate static void initialize() {\n\t\tString driver = ConfigHelper.getProperty(\"jdbc.driver\");\n\t\tString url = ConfigHelper.getProperty(\"jdbc.url\");\n\t\tString username = ConfigHelper.getProperty(\"jdbc.username\");\n\t\tString password = ConfigHelper.getProperty(\"jdbc.password\");\n\t\tint maxActive = ConfigHelper.getNumerProperty(\"jdbc.max.active\");\n\t\tint maxIdle = ConfigHelper.getNumerProperty(\"jdbc.max.idle\");\n\t\tAssertHelper.notNull(driver);\n\t\tAssertHelper.notNull(url);\n\t\tAssertHelper.notNull(username);\n\t\tAssertHelper.notNull(password);\n\t\t//\u521d\u59cb\u5316DBCP\u6570\u636e\u6e90\n\t\tBasicDataSource ds = new BasicDataSource();\n\t\tds.setDriverClassName(driver);\n\t\tds.setUrl(url);\n\t\tds.setUsername(username);\n\t\tds.setPassword(password);\n        if(maxActive != 0) {\n\t\t    ds.setMaxActive(maxActive);\n        }\n        if(maxIdle != 0) {\n\t\t    ds.setMaxIdle(maxIdle);\n        }\n\t\tdataSource = ds;\n\t}\n```"], [699, "java", "PasswordLoginModule.abort", "```java\n@Override\n    // Check is broken [LOG.info()]: PMD reports issues although log stmt is guarded. @todo revisit when upgrading PMD.\n    @SuppressWarnings(\"PMD.GuardLogStatementJavaUtil\")\n    public final boolean abort()\n            throws LoginException {\n\n        if (pendingSubject == null) {\n            // the login method of this module has failed earlier, hence we do not need to clean up anything\n            // return 'false' to indicate that this module's login and/or commit method failed\n            // As the login method failed, the state of the module has already been cleared and we do not know\n            // the username / domain anymore. Hence no auditing / message queue notification, and not verbose logging.\n\n            LOG.debug(\"Aborting authentication, as the authentication has failed earlier (login method)\");\n\n            return false;\n        } else if (committedSubject == null) {\n            // the login method of this module succeeded, but the overall authentication failed\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Aborting authentication: '\" + username + \"@\" + domain + \"'\");\n            }\n\n            // cache the username and domain, for they will be purged by \"cleanState()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            cleanState();\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(tempUsername).\n                    append(\"@\").\n                    append(tempDomain).\n                    toString();\n            AuditHelper.auditEvent(audit, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, tempDomain, tempUsername, Events.AUTHN_ABORT_COMMIT,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        } else {\n            // overall authentication succeeded and commit succeeded, but someone else's commit failed\n\n            final String baseError = new StringBuilder().\n                    append(\"Login post-processing failed after abort for '\").\n                    append(username).\n                    append(\"@\").\n                    append(domain).\n                    toString();\n            AuditHelper.auditEvent(audit, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot audit login attempt\");\n            MessageHelper.postMessage(messageQ, domain, username, Events.AUTHN_ABORT_CHAIN,\n                    baseError + \"', but cannot post MQ login attempt event\");\n\n            // cache the username and domain, for they will be purged by \"logout()\"\n            final String tempUsername = username;\n            final String tempDomain = domain;\n\n            logout();\n\n            // string concatenation is only executed if log level is actually enabled\n            if (LOG.isInfoEnabled()) {\n                LOG.info(\"Authentication aborted for '\" + tempUsername + \"@\" + tempDomain + \"'\");\n            }\n            return true;\n        }\n    }\n```"], [507, "java", "Parser.parseOptionalBody", "```java\nprivate void parseOptionalBody( Node parent, String tag, String bodyType ) \n        throws JasperException \n    {\n\tif (reader.matches(\"/>\")) {\n\t    // EmptyBody\n\t    return;\n\t}\n\n\tif (!reader.matches(\">\")) {\n\t    err.jspError(reader.mark(), \"jsp.error.unterminated\",\n\t\t\t \"&lt;\" + tag );\n\t}\n        \n        if( reader.matchesETag( tag ) ) {\n            // EmptyBody\n            return;\n        }\n        \n        if( !parseJspAttributeAndBody( parent, tag, bodyType ) ) {\n            // Must be ( '>' # Body ETag )\n            parseBody(parent, tag, bodyType );\n        }\n    }\n```"], [120, "java", "Completable.doOnComplete", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable doOnComplete(Action onComplete) {\n        return doOnLifecycle(Functions.emptyConsumer(), Functions.emptyConsumer(),\n                onComplete, Functions.EMPTY_ACTION,\n                Functions.EMPTY_ACTION, Functions.EMPTY_ACTION);\n    }\n```"], [746, "java", "Strings.trimLeadingCharacter", "```java\npublic static String trimLeadingCharacter(String str, final char leadingCharacter)\n   {\n      return trimLeadingCharacter(str, new CharacterChecker()\n      {\n         public boolean isCharacterLegal(char character)\n         {\n            return character == leadingCharacter;\n         }\n      });\n   }\n```"], [237, "java", "ProxettaAsmUtil.resolveJavaVersion", "```java\npublic static int resolveJavaVersion(final int version) {\n\t\tfinal int javaVersionNumber = SystemUtil.info().getJavaVersionNumber();\n\t\tfinal int platformVersion = javaVersionNumber - 8 + 52;\n\n\t\treturn version > platformVersion ? version : platformVersion;\n\t}\n```"], [263, "java", "OpenRtbJsonUtils.startArray", "```java\npublic static void startArray(JsonParser par) throws IOException {\n    JsonToken token = par.getCurrentToken();\n    if (token == null || token == JsonToken.FIELD_NAME) {\n      token = par.nextToken();\n    }\n    if (token == JsonToken.START_ARRAY) {\n      par.nextToken();\n    } else {\n      throw new JsonParseException(par, \"Expected start of array\");\n    }\n  }\n```"], [722, "java", "Observable.take", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.CUSTOM)\n    public final Observable<T> take(long time, TimeUnit unit, Scheduler scheduler) {\n        return takeUntil(timer(time, unit, scheduler));\n    }\n```"], [965, "java", "AbstractEndpoint.executeAndHandle", "```java\nprotected HttpResponse executeAndHandle(Request request)\n            throws IOException, IllegalArgumentException, IllegalAccessException, FileNotFoundException, IllegalStateException {\n        HttpResponse response = execute(request);\n        handleResponse(response, request);\n        return response;\n    }\n```"], [555, "java", "PipelineConfigurationUpgrader.upgradeIfNecessary", "```java\npublic PipelineConfiguration upgradeIfNecessary(\n      StageLibraryTask library,\n      PipelineConfiguration pipelineConf,\n      List<Issue> issues\n  ) {\n    Preconditions.checkArgument(issues.isEmpty(), \"Given list of issues must be empty.\");\n    boolean upgrade;\n\n    // Firstly upgrading schema if needed, then data\n    upgrade = needsSchemaUpgrade(pipelineConf, issues);\n    if(upgrade && issues.isEmpty()) {\n      pipelineConf = upgradeSchema(library, pipelineConf, issues);\n    }\n\n    // Something went wrong with the schema upgrade\n    if(!issues.isEmpty()) {\n      return null;\n    }\n\n    // Upgrading data if needed\n    upgrade = needsUpgrade(library, pipelineConf, issues);\n    if (upgrade && issues.isEmpty()) {\n      //we try to upgrade only if we have all defs for the pipelineConf\n      pipelineConf = upgrade(library, pipelineConf, issues);\n    }\n    return (issues.isEmpty()) ? pipelineConf : null;\n  }\n```"], [733, "java", "TimerServiceImpl.getWaitingOnTxCompletionTimers", "```java\nprivate Map<String, TimerImpl> getWaitingOnTxCompletionTimers() {\n        Map<String, TimerImpl> timers = null;\n        if (getTransaction() != null) {\n            timers = (Map<String, TimerImpl>) tsr.getResource(waitingOnTxCompletionKey);\n        }\n        return timers == null ? Collections.<String, TimerImpl>emptyMap() : timers;\n    }\n```"], [441, "java", "RequestHandler.mainRequestHandler", "```java\n@ServiceMethod\n    public void mainRequestHandler(DataStoreRequest dataStoreRequest) {\n\n\n        if (verbose || debug) {\n            logger.info(\"RequestHandler::mainRequestHandler\", dataStoreRequest);\n        }\n        switch (dataStoreRequest.action()) {\n            case GET:\n                masterDataStore.get((GetRequest) dataStoreRequest);\n                break;\n            case GET_LOCAL_DB:\n                handleGetLocalDbVerb(dataStoreRequest);\n                break;\n            case GET_MEM:\n                handleGetMemVerb(dataStoreRequest);\n                break;\n            case SET:\n                masterDataStore.set((SetRequest) dataStoreRequest);\n                break;\n            case SET_BROADCAST:\n                handleSetAndBroadCastVerb(dataStoreRequest);\n                break;\n            case SET_IF_NOT_EXIST:\n                handleSetIfNotExistsVerb(dataStoreRequest);\n                break;\n            case SET_BATCH:\n                handleSetBatch(dataStoreRequest);\n                break;\n            case SET_BATCH_IF_NOT_EXISTS:\n                handleSetBatchIfNotExists(dataStoreRequest);\n                break;\n            case SET_SOURCE:\n                handleSetSource(dataStoreRequest);\n                break;\n            case GET_SOURCE:\n                handleGetSource(dataStoreRequest);\n                break;\n\n            case BATCH_READ:\n                handleBatchRead(dataStoreRequest);\n                break;\n\n            case CLEAR_STATS:\n                handleClearStats(dataStoreRequest);\n                break;\n\n\n            case GET_STATS:\n                handleGetStats(dataStoreRequest);\n                break;\n\n\n            case REMOVE:\n                handleRemove(dataStoreRequest);\n                break;\n\n\n            case REMOVE_SOURCE:\n                handleRemoveSource(dataStoreRequest);\n                break;\n\n            case METHOD_CALL:\n                handleMethodCall((MethodCall) dataStoreRequest);\n                break;\n\n            case SEARCH:\n                handleSearchVerb(dataStoreRequest);\n                break;\n\n            default:\n                puts(dataStoreRequest);\n\n\n        }\n        trackCall(dataStoreRequest.action());\n    }\n```"], [374, "java", "AvroTypeUtil.getAvroSchemaFromHeader", "```java\npublic static String getAvroSchemaFromHeader(Record record, String headerName) throws DataGeneratorException {\n    String jsonSchema = record.getHeader().getAttribute(headerName);\n    if(jsonSchema == null || jsonSchema.isEmpty()) {\n      throw new DataGeneratorException(Errors.AVRO_GENERATOR_03, record.getHeader().getSourceId());\n    }\n    return jsonSchema;\n  }\n```"], [735, "java", "InterfaceRepository.addInterface", "```java\nprivate InterfaceDefImpl addInterface(InterfaceAnalysis ia)\n            throws RMIIIOPViolationException, IRConstructionException {\n        InterfaceDefImpl iDef;\n        Class cls = ia.getCls();\n\n        // Lookup: Has it already been added?\n        iDef = (InterfaceDefImpl) interfaceMap.get(cls);\n        if (iDef != null)\n            return iDef; // Yes, just return it.\n\n        // Get module to add interface to.\n        ModuleDefImpl m = ensurePackageExists(cls.getPackage().getName());\n\n        // Add superinterfaces\n        String[] base_interfaces = addInterfaces(ia);\n\n        // Create the interface\n        String base = cls.getName();\n        base = base.substring(base.lastIndexOf('.') + 1);\n        base = Util.javaToIDLName(base);\n\n        iDef = new InterfaceDefImpl(ia.getRepositoryId(),\n                base, \"1.0\", m,\n                base_interfaces, impl);\n        addTypeCode(cls, iDef.type());\n        m.add(base, iDef);\n        interfaceMap.put(cls, iDef); // Remember we mapped this.\n\n        // Fill in constants\n        addConstants(iDef, ia);\n\n        // Add attributes\n        addAttributes(iDef, ia);\n\n        // Fill in operations\n        addOperations(iDef, ia);\n\n        return iDef;\n    }\n```"], [825, "java", "StdRandom.uniform", "```java\npublic static int uniform(int a, int b)\n  {\n    if (b <= a)\n      throw new IllegalArgumentException(\"Invalid range\");\n    if ((long) b - a >= Integer.MAX_VALUE)\n      throw new IllegalArgumentException(\"Invalid range\");\n    return a + uniform(b - a);\n  }\n```"], [794, "java", "DapController.init", "```java\npublic void init()\n            throws ServletException\n    {\n        org.slf4j.Logger logServerStartup = org.slf4j.LoggerFactory.getLogger(\"serverStartup\");\n        logServerStartup.info(getClass().getName() + \" initialization start\");\n        try {\n            System.setProperty(\"file.encoding\", \"UTF-8\");\n            Field charset = Charset.class.getDeclaredField(\"defaultCharset\");\n            charset.setAccessible(true);\n            charset.set(null, null);\n            initialize();\n        } catch (Exception e) {\n            throw new ServletException(e);\n        }\n    }\n```"], [501, "java", "OfflineClient.getIndex", "```java\n@Override\n    public @NonNull MirroredIndex getIndex(@NonNull String indexName) {\n        MirroredIndex index = null;\n        WeakReference<Object> existingIndex = indices.get(indexName);\n        if (existingIndex != null) {\n            index = (MirroredIndex)existingIndex.get();\n        }\n        if (index == null) {\n            index = new MirroredIndex(this, indexName);\n            indices.put(indexName, new WeakReference<Object>(index));\n        }\n        return index;\n    }\n```"], [746, "java", "TdsRequestedDataset.getGridDataset", "```java\npublic static GridDataset getGridDataset(HttpServletRequest request, HttpServletResponse response, String path) throws IOException {\n    TdsRequestedDataset trd = new TdsRequestedDataset(request, null);\n    if (path != null) trd.path = path;\n    return trd.openAsGridDataset(request, response);\n  }\n```"], [809, "java", "Types.isBuiltinType", "```java\npublic static boolean isBuiltinType(Type type) {\n\t\tClass<?> rawType = getRawType(type);\n\t\treturn (rawType == null) ? false : builtins.contains(rawType);\n\t}\n```"], [52, "java", "SimpleRuleStore.addRule", "```java\npublic void addRule(ElementSelector elementSelector, Action action) {\n    action.setContext(context);\n\n    List<Action> a4p = rules.get(elementSelector);\n\n    if (a4p == null) {\n      a4p = new ArrayList<Action>();\n      rules.put(elementSelector, a4p);\n    }\n\n    a4p.add(action);\n  }\n```"], [935, "java", "RpcResponseResolver.toResponseObject", "```java\nprivate static Object toResponseObject(ResponseCommand responseCommand) throws CodecException {\n        RpcResponseCommand response = (RpcResponseCommand) responseCommand;\n        response.deserialize();\n        return response.getResponseObject();\n    }\n```"], [126, "java", "OClosableLinkedContainer.checkOpenFilesLimit", "```java\nprivate void checkOpenFilesLimit() throws InterruptedException {\n    CountDownLatch ol = openLatch.get();\n    if (ol != null)\n      ol.await();\n\n    while (openFiles.get() > openLimit) {\n      final CountDownLatch latch = new CountDownLatch(1);\n\n      //make other threads to wait till we evict entries and close evicted open files\n      if (openLatch.compareAndSet(null, latch)) {\n        while (openFiles.get() > openLimit) {\n          emptyBuffers();\n        }\n\n        latch.countDown();\n        openLatch.set(null);\n      } else {\n        ol = openLatch.get();\n\n        if (ol != null)\n          ol.await();\n      }\n    }\n  }\n```"], [975, "java", "GuiceApplicationBuilder.load", "```java\npublic GuiceApplicationBuilder load(GuiceableModule... modules) {\n    return newBuilder(delegate.load(Scala.varargs(modules)));\n  }\n```"], [643, "java", "ProfileEntityArrayAttributeValue.setByte", "```java\npublic void setByte(Byte attrValue) {\n\t\tif (attrValue != null) {\n\t\t\tsetString(attrValue.toString());\n\t\t}\n\t\telse {\n\t\t\tsetString(null);\n\t\t}\n\t}\n```"], [230, "java", "StreamUtil.outputStreamWriterOf", "```java\npublic static OutputStreamWriter outputStreamWriterOf(final OutputStream output, final String encoding) throws UnsupportedEncodingException {\n\t\treturn new OutputStreamWriter(output, encoding);\n\t}\n```"], [736, "java", "BufrTableBViewer.writeDiff", "```java\nprivate void writeDiff(TableB wmo, TableB t, Formatter out) {\r\n    out.format(\"#%n# BUFR diff written from %s against %s %n#%n\", t.getName(), wmo.getName());\r\n    out.format(\"Class,FXY,enElementName,BUFR_Unit,BUFR_Scale,BUFR_ReferenceValue,BUFR_DataWidth_Bits%n\");\r\n    List<TableB.Descriptor> listDesc = new ArrayList<>(t.getDescriptors());\r\n    Collections.sort(listDesc);\r\n    for (TableB.Descriptor d1 : listDesc) {\r\n      TableB.Descriptor d2 = wmo.getDescriptor(d1.getId());\r\n      if ((d2 == null) || (d1.getScale() != d2.getScale()) || (d1.getRefVal() != d2.getRefVal()) || (d1.getDataWidth() != d2.getDataWidth())) {\r\n        short fxy = d1.getId();\r\n//        int f = (fxy & 0xC000) >> 14;\r\n        int x  = (fxy & 0x3F00) >> 8;\r\n        int y  = fxy & 0xFF;\r\n        out.format(\"%d,%2d%03d,\\\"%s\\\",%s,%d,%d,%d%n\",x,x,y, d1.getName(), d1.getUnits(), d1.getScale(), d1.getRefVal(), d1.getDataWidth());\r\n      }\r\n    }\r\n    out.flush();\r\n  }\n```"], [954, "java", "OpenRtbUtils.bids", "```java\npublic static Iterable<Bid.Builder> bids(BidResponse.Builder response) {\n    return new ResponseBidsIterator(response, SEAT_ANY, null);\n  }\n```"], [920, "java", "Flowable.blockingSubscribe", "```java\n@BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final void blockingSubscribe(Consumer<? super T> onNext) {\n        FlowableBlockingSubscribe.subscribe(this, onNext, Functions.ON_ERROR_MISSING, Functions.EMPTY_ACTION);\n    }\n```"], [666, "java", "Completable.repeatUntil", "```java\n@CheckReturnValue\n    @SchedulerSupport(SchedulerSupport.NONE)\n    public final Completable repeatUntil(BooleanSupplier stop) {\n        return fromPublisher(toFlowable().repeatUntil(stop));\n    }\n```"]]}, "_runtime": 6249.658591032028, "_timestamp": 1581458551.0604477, "_step": 484}
{"Examples-Validation-java": {"_type": "table", "columns": ["Rank", "Language", "Query", "Code"], "data": [[846, "java", "FareAttribute.setStatementParameters", "```java\n@Override\n    public void setStatementParameters(PreparedStatement statement, boolean setDefaultId) throws SQLException {\n        int oneBasedIndex = 1;\n        if (!setDefaultId) statement.setInt(oneBasedIndex++, id);\n        statement.setString(oneBasedIndex++, fare_id);\n        statement.setDouble(oneBasedIndex++, price);\n        statement.setString(oneBasedIndex++, currency_type);\n        setIntParameter(statement, oneBasedIndex++, payment_method);\n        // FIXME Entity.INT_MISSING causing out of range error on small int\n        setIntParameter(statement, oneBasedIndex++, transfers);\n        statement.setString(oneBasedIndex++, agency_id);\n        setIntParameter(statement, oneBasedIndex++, transfer_duration);\n    }\n```"], [924, "java", "Xmls.children", "```java\npublic static List<Element> children(Element ele, String regex) {\n        final List<Element> list = new ArrayList<Element>(ele.getChildNodes().getLength());\n        eachChildren(ele, regex, new Each<Element>() {\n            public void invoke(int index, Element cld, int length) {\n                list.add(cld);\n            }\n        });\n        return list;\n    }\n```"], [277, "java", "SelectSelectivePlugin.initialized", "```java\n@Override\n    public void initialized(IntrospectedTable introspectedTable) {\n        super.initialized(introspectedTable);\n\n        // bug:26,27\n        this.selectByExampleSelectiveEle = null;\n        this.selectByPrimaryKeySelectiveEle = null;\n    }\n```"], [201, "java", "AbstractSpeedModelManager.consumeKeyMessage", "```java\npublic void consumeKeyMessage(String key, U message, Configuration hadoopConf) throws IOException {\n    log.info(\"{} : {}\", key, message);\n  }\n```"], [449, "java", "SocializeShareUtils.shareViaSocialNetworks", "```java\n@Override\n\tpublic void shareViaSocialNetworks(Activity context, final Entity entity, final ShareOptions shareOptions, final SocialNetworkShareListener listener, final SocialNetwork...networks) {\n\t\t\n\t\tfinal SocializeSession session = getSocialize().getSession();\n\t\t\n\t\tif(isDisplayAuthDialog(context, session, shareOptions, networks)) {\n\t\t\t\n\t\t\tauthDialogFactory.show(context, new AuthDialogListener() {\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onShow(Dialog dialog, AuthPanelView dialogView) {}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onCancel(Dialog dialog) {\n\t\t\t\t\tif(listener != null) {\n\t\t\t\t\t\tlistener.onCancel();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t@Override\n\t\t\t\tpublic void onSkipAuth(Activity context, Dialog dialog) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdoShare(context, entity, listener, shareOptions, networks);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onError(Activity context, Dialog dialog, Exception error) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tif(listener != null) {\n\t\t\t\t\t\tlistener.onError(SocializeException.wrap(error));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onAuthenticate(Activity context, Dialog dialog, SocialNetwork network) {\n\t\t\t\t\tdialog.dismiss();\n\t\t\t\t\tdoShare(context, entity, listener, shareOptions, network);\n\t\t\t\t}\n\t\t\t}, !config.isAllowSkipAuthOnAllActions());\n\t\t}\n\t\telse {\n\t\t\tdoShare(context, entity, listener, shareOptions, networks);\n\t\t}\t\t\t\n\t}\n```"], [56, "java", "AbstractAuthenticationFilter.doFilter", "```java\n@Override\n    protected void doFilter(final HttpServletRequest _request,\n                            final HttpServletResponse _response,\n                            final FilterChain _chain)\n        throws IOException, ServletException\n    {\n        if (isLoggedIn(_request)) {\n            _chain.doFilter(_request, _response);\n        } else {\n            doAuthenticate(_request, _response, _chain);\n        }\n    }\n```"], [563, "java", "PrettyConfig.getMappingById", "```java\npublic UrlMapping getMappingById(String id)\n   {\n      if (id != null)\n      {\n         if (id.startsWith(PrettyContext.PRETTY_PREFIX))\n         {\n            id = id.substring(PrettyContext.PRETTY_PREFIX.length());\n         }\n         for (UrlMapping mapping : getMappings())\n         {\n            if (mapping.getId().equals(id))\n            {\n               return mapping;\n            }\n         }\n      }\n      return null;\n   }\n```"], [71, "java", "ExecutionEngine.fireErrorReceivingResponseEvent", "```java\nprivate static void fireErrorReceivingResponseEvent(OperationContext opContext, HttpURLConnection request,\n            RequestResult result) {\n        if (opContext.getErrorReceivingResponseEventHandler().hasListeners()\n                || OperationContext.getGlobalErrorReceivingResponseEventHandler().hasListeners()) {\n            ErrorReceivingResponseEvent event = new ErrorReceivingResponseEvent(opContext, request, result);\n            opContext.getErrorReceivingResponseEventHandler().fireEvent(event);\n            OperationContext.getGlobalErrorReceivingResponseEventHandler().fireEvent(event);\n        }\n    }\n```"], [999, "java", "ThrowableAssert.overridingErrorMessage", "```java\n@Override\n  public @NotNull ThrowableAssert overridingErrorMessage(@Nullable String message) {\n    objectAssert.overridingErrorMessage(message);\n    return super.overridingErrorMessage(message);\n  }\n```"], [523, "java", "ShadowLauncherApps.addDynamicShortcut", "```java\npublic void addDynamicShortcut(ShortcutInfo shortcutInfo) {\n    shortcuts.add(shortcutInfo);\n    shortcutsChanged(shortcutInfo.getPackage(), Lists.newArrayList(shortcutInfo));\n  }\n```"], [961, "java", "AbstractFuture.get", "```java\n@CanIgnoreReturnValue\n  @Override\n  public V get(long timeout, TimeUnit unit)\n      throws InterruptedException, TimeoutException, ExecutionException {\n    // NOTE: if timeout < 0, remainingNanos will be < 0 and we will fall into the while(true) loop\n    // at the bottom and throw a timeoutexception.\n    final long timeoutNanos = unit.toNanos(timeout); // we rely on the implicit null check on unit.\n    long remainingNanos = timeoutNanos;\n    if (Thread.interrupted()) {\n      throw new InterruptedException();\n    }\n    Object localValue = value;\n    if (localValue != null & !(localValue instanceof SetFuture)) {\n      return getDoneValue(localValue);\n    }\n    // we delay calling nanoTime until we know we will need to either park or spin\n    final long endNanos = remainingNanos > 0 ? System.nanoTime() + remainingNanos : 0;\n    long_wait_loop:\n    if (remainingNanos >= SPIN_THRESHOLD_NANOS) {\n      Waiter oldHead = waiters;\n      if (oldHead != Waiter.TOMBSTONE) {\n        Waiter node = new Waiter();\n        do {\n          node.setNext(oldHead);\n          if (ATOMIC_HELPER.casWaiters(this, oldHead, node)) {\n            while (true) {\n              LockSupport.parkNanos(this, remainingNanos);\n              // Check interruption first, if we woke up due to interruption we need to honor that.\n              if (Thread.interrupted()) {\n                removeWaiter(node);\n                throw new InterruptedException();\n              }\n\n              // Otherwise re-read and check doneness. If we loop then it must have been a spurious\n              // wakeup\n              localValue = value;\n              if (localValue != null & !(localValue instanceof SetFuture)) {\n                return getDoneValue(localValue);\n              }\n\n              // timed out?\n              remainingNanos = endNanos - System.nanoTime();\n              if (remainingNanos < SPIN_THRESHOLD_NANOS) {\n                // Remove the waiter, one way or another we are done parking this thread.\n                removeWaiter(node);\n                break long_wait_loop; // jump down to the busy wait loop\n              }\n            }\n          }\n          oldHead = waiters; // re-read and loop.\n        } while (oldHead != Waiter.TOMBSTONE);\n      }\n      // re-read value, if we get here then we must have observed a TOMBSTONE while trying to add a\n      // waiter.\n      return getDoneValue(value);\n    }\n    // If we get here then we have remainingNanos < SPIN_THRESHOLD_NANOS and there is no node on the\n    // waiters list\n    while (remainingNanos > 0) {\n      localValue = value;\n      if (localValue != null & !(localValue instanceof SetFuture)) {\n        return getDoneValue(localValue);\n      }\n      if (Thread.interrupted()) {\n        throw new InterruptedException();\n      }\n      remainingNanos = endNanos - System.nanoTime();\n    }\n\n    String futureToString = toString();\n    final String unitString = unit.toString().toLowerCase(Locale.ROOT);\n    String message = \"Waited \" + timeout + \" \" + unit.toString().toLowerCase(Locale.ROOT);\n    // Only report scheduling delay if larger than our spin threshold - otherwise it's just noise\n    if (remainingNanos + SPIN_THRESHOLD_NANOS < 0) {\n      // We over-waited for our timeout.\n      message += \" (plus \";\n      long overWaitNanos = -remainingNanos;\n      long overWaitUnits = unit.convert(overWaitNanos, TimeUnit.NANOSECONDS);\n      long overWaitLeftoverNanos = overWaitNanos - unit.toNanos(overWaitUnits);\n      boolean shouldShowExtraNanos =\n          overWaitUnits == 0 || overWaitLeftoverNanos > SPIN_THRESHOLD_NANOS;\n      if (overWaitUnits > 0) {\n        message += overWaitUnits + \" \" + unitString;\n        if (shouldShowExtraNanos) {\n          message += \",\";\n        }\n        message += \" \";\n      }\n      if (shouldShowExtraNanos) {\n        message += overWaitLeftoverNanos + \" nanoseconds \";\n      }\n\n      message += \"delay)\";\n    }\n    // It's confusing to see a completed future in a timeout message; if isDone() returns false,\n    // then we know it must have given a pending toString value earlier. If not, then the future\n    // completed after the timeout expired, and the message might be success.\n    if (isDone()) {\n      throw new TimeoutException(message + \" but future completed as timeout expired\");\n    }\n    throw new TimeoutException(message + \" for \" + futureToString);\n  }\n```"], [183, "java", "Duration.minus", "```java\npublic Duration minus(long amount) {\n        return new Minus().apply(this, unit == null ? FOREVER : new Duration(amount, unit));\n    }\n```"], [19, "java", "PropertyWrapper.removeAllCallbacks", "```java\n@Override\n    public void removeAllCallbacks() {\n        final Set<Runnable> callbacksToRemove = new HashSet<Runnable>(callbacks);\n        for (Runnable callback : callbacksToRemove) {\n            prop.removeCallback(callback);\n        }\n        callbacks.removeAll(callbacksToRemove);\n    }\n```"], [904, "java", "NowAndTodayUtil.parseNow", "```java\nprivate static void parseNow(String value, String lowerValue, Calendar c) throws DateParseException {\n        if (lowerValue.length() > NOW_LENGTH) {\n            Matcher matcher = NOW_OFFSET_PATTERN.matcher(lowerValue);\n            if (!matcher.find()) {\n                throw new DateParseException(\"Improper value in 'NOW' value: \" + value\n                        + \". 'NOW' must be followed by + or -, then numeric offset, then units (h{our{s}}, \"\n                        + \"m{inute{s}}, d{ay{s}}, or y{ears}\");\n            }\n            if (matcher.groupCount() != 4) {\n                throw new DateParseException(\"Improper value in 'NOW' value: \" + value + \". Pattern match returned \"\n                        + matcher.groupCount() + \" instead of 4\");\n            }\n            char sign = matcher.group(2).charAt(0);\n            if (sign != '+' && sign != '-') {\n                throw new DateParseException(\"Improper sign in 'NOW' value '\" + lowerValue + \"'\");\n            }\n            String offsetStr = matcher.group(3);\n            int offset;\n            try {\n                offset = Integer.parseInt(offsetStr);\n            } catch (NumberFormatException e) {\n                throw new DateParseException(\"Improper offset in 'NOW' value '\" + value + \"'\");\n            }\n            if (sign == '-') {\n                offset = -offset;\n            }\n            int calendarField;\n            String units = matcher.group(4);\n            if (\"years\".startsWith(units)) {\n                calendarField = Calendar.YEAR;\n            } else if (\"days\".startsWith(units)) {\n                calendarField = Calendar.DATE;\n            } else if (\"hours\".startsWith(units)) {\n                calendarField = Calendar.HOUR;\n            } else if (\"minutes\".startsWith(units)) {\n                calendarField = Calendar.MINUTE;\n            } else {\n                throw new DateParseException(\"Improper units in 'NOW' value: '\" + units + \"', must be y{ear{s}}, \"\n                        + \"d{ay{s}}, h{our{s}}, or m{inute{s}}\");\n            }\n            c.add(calendarField, offset);\n        }\n    }\n```"], [824, "java", "SVGGraphics2D.getSVGFontStyle", "```java\nprivate String getSVGFontStyle() {\n        StringBuilder b = new StringBuilder();\n        b.append(\"fill: \").append(svgColorStr()).append(\"; \");\n        b.append(\"fill-opacity: \").append(getColorAlpha() * getAlpha())\n                .append(\"; \");\n        String fontFamily = this.fontMapper.mapFont(this.font.getFamily());\n        b.append(\"font-family: \").append(fontFamily).append(\"; \");\n        b.append(\"font-size: \").append(this.font.getSize()).append(this.fontSizeUnits).append(\";\");\n        if (this.font.isBold()) {\n            b.append(\" font-weight: bold;\");\n        }\n        if (this.font.isItalic()) {\n            b.append(\" font-style: italic;\");\n        }\n        return b.toString();\n    }\n```"], [741, "java", "LogglyClient.log", "```java\npublic boolean log(String message) {\n        if (message == null) return false;\n\n        boolean ok;\n        try {\n            ok = loggly.log(token, tags, message).isExecuted();\n        } catch (Exception e) {\n            e.printStackTrace();\n            ok = false;\n        }\n        return ok;\n    }\n```"], [372, "java", "CheckUtilities.checkStringListArgument", "```java\npublic static void checkStringListArgument(List<String> str, String variableName) {\n    if (null == str) {\n      throw new NullPointerException(ExceptionMessageMap.getMessage(\"000002\")\n          + \"  { variableName=[\" + variableName + \"] }\");\n    }\n    if (str.size() == 0) {\n      throw new IllegalArgumentException(ExceptionMessageMap.getMessage(\"000002\")\n          + \"  { variableName=[\" + variableName + \"] }\");\n    }\n    for (int i = 0; i < str.size(); i++) {\n      checkStringArgument(str.get(i), variableName);\n    }\n  }\n```"], [368, "java", "BorderWidth.isValid", "```java\npublic static boolean isValid(final String cssValue) {\n        final String trimmedCssValue = StringUtil.strip(cssValue).toLowerCase();\n        final String[] cssValueParts = StringUtil.splitBySpace(trimmedCssValue);\n        if (cssValueParts.length > 4) {\n            return false;\n        }\n        for (final String cssValuePart : cssValueParts) {\n            boolean invalidValue = true;\n            for (final CssLengthUnit cssLengthUnit : CssLengthUnit.values()) {\n                final String unit = cssLengthUnit.getUnit();\n                if (cssValuePart.endsWith(unit)) {\n                    final String valueOnly = cssValuePart.replaceFirst(unit,\n                            \"\");\n                    try {\n                        Float.parseFloat(valueOnly);\n                    } catch (final NumberFormatException e) {\n                        break;\n                    }\n                    invalidValue = false;\n                    break;\n                }\n            }\n            if (PREDEFINED_CONSTANTS.contains(cssValuePart)) {\n                invalidValue = false;\n            }\n            if (invalidValue) {\n                return false;\n            }\n        }\n        return true;\n    }\n```"], [996, "java", "ZKClientImpl.getChildren", "```java\n@Override\n  public WatchableTask<List<String>> getChildren(String path) {\n    return new WatchableTask<List<String>>(\"zkGetChildren: \" + path) {\n      @Override\n      protected Promise run(Context context) throws Throwable {\n        SettablePromise<List<String>> promise = Promises.settable();\n        _zkClient.getChildren(path, _watcher, (int rc, String p, Object ctx, List<String> children) -> {\n          KeeperException.Code code = KeeperException.Code.get(rc);\n          switch (code) {\n            case OK:\n              promise.done(children);\n              break;\n            default:\n              promise.fail(KeeperException.create(code, p));\n          }\n        }, null);\n        return promise;\n      }\n    };\n  }\n```"], [908, "java", "Trans.getConnectionAuto", "```java\npublic static Connection getConnectionAuto(DataSource ds) throws SQLException {\n        if (get() == null)\n            return ds.getConnection();\n        else\n            return get().getConnection(ds);\n    }\n```"], [695, "java", "ShadowUsageStatsManager.getAppStandbyBucket", "```java\n@Implementation(minSdk = Build.VERSION_CODES.P)\n  @HiddenApi\n  public @StandbyBuckets int getAppStandbyBucket(String packageName) {\n    Integer bucket = appStandbyBuckets.get(packageName);\n    return (bucket == null) ? UsageStatsManager.STANDBY_BUCKET_ACTIVE : bucket;\n  }\n```"], [826, "java", "BaseActions.push", "```java\npublic boolean push(final int down, final V value)\n    {\n        check();\n        context.getValueStack().push(down, value);\n        return true;\n    }\n```"], [531, "java", "ConditionFactory.untilCall", "```java\npublic <T> T untilCall(T proxyMethodReturnValue, final Matcher<? super T> matcher) {\n        if (!existInCP(\"java.util.ServiceLoader\")) {\n            throw new UnsupportedOperationException(\"java.util.ServiceLoader not found in classpath so cannot create condition\");\n        }\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        if (cl == null) {\n            cl = ClassLoader.getSystemClassLoader();\n        }\n        Iterator<ProxyConditionFactory> iterator = java.util.ServiceLoader.load(ProxyConditionFactory.class, cl).iterator();\n        if (!iterator.hasNext()) {\n            throw new UnsupportedOperationException(\"There's currently no plugin installed that can handle proxy conditions, please consider adding 'awaitility-proxy' to the classpath. If using Maven you can do:\" +\n                    \"<dependency>\\n\" +\n                    \"\\t<groupId>org.awaitility</groupId>\\n\" +\n                    \"\\t<artifactId>awaitility-proxy</artifactId>\\n\" +\n                    \"\\t<version>${awaitility.version}</version>\\n\" +\n                    \"</dependency>\\n\");\n        }\n        @SuppressWarnings(\"unchecked\") ProxyConditionFactory<T> factory = iterator.next();\n        if (factory == null) {\n            throw new IllegalArgumentException(\"Internal error: Proxy condition plugin initialization returned null, please report an issue.\");\n        }\n        return until(factory.createProxyCondition(proxyMethodReturnValue, matcher, generateConditionSettings()));\n    }\n```"], [662, "java", "MentionsEditText.onTouchEvent", "```java\n@Override\n    public boolean onTouchEvent(@NonNull MotionEvent event) {\n        final MentionSpan touchedSpan = getTouchedSpan(event);\n\n        // Android 6 occasionally throws a NullPointerException inside Editor.onTouchEvent()\n        // for ACTION_UP when attempting to display (uninitialised) text handles.\n        boolean superResult;\n        if (android.os.Build.VERSION.SDK_INT == Build.VERSION_CODES.M &&\n            event.getActionMasked() == MotionEvent.ACTION_UP) {\n            try {\n                superResult = super.onTouchEvent(event);\n            } catch (NullPointerException ignored) {\n                // Ignore this (see above) - since we're now in an unknown state let's clear all\n                // selection (which is still better than an arbitrary crash that we can't control):\n                clearFocus();\n                superResult = true;\n            }\n        } else {\n            superResult = super.onTouchEvent(event);\n        }\n\n        if (event.getAction() == MotionEvent.ACTION_UP) {\n            // Don't call the onclick on mention if MotionEvent.ACTION_UP is for long click action,\n            if (!isLongPressed && touchedSpan != null) {\n                // Manually click span and show soft keyboard\n                touchedSpan.onClick(this);\n                Context context = getContext();\n                if (context != null) {\n                    InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n                    imm.showSoftInput(this, 0);\n                }\n                return true;\n            }\n        } else if (event.getAction() == MotionEvent.ACTION_DOWN) {\n            isLongPressed = false;\n            if (isLongClickable() && touchedSpan != null) {\n                if (longClickRunnable == null) {\n                    longClickRunnable = new CheckLongClickRunnable();\n                }\n                longClickRunnable.touchedSpan = touchedSpan;\n                removeCallbacks(longClickRunnable);\n                postDelayed(longClickRunnable, ViewConfiguration.getLongPressTimeout());\n            }\n        } else if (event.getAction() == MotionEvent.ACTION_CANCEL) {\n            isLongPressed = false;\n        }\n\n        // Check if user clicked on the EditText while showing the suggestions list\n        // If so, avoid the current prefix\n        if (mAvoidPrefixOnTap\n                && mSuggestionsVisibilityManager != null\n                && mSuggestionsVisibilityManager.isDisplayingSuggestions()) {\n            mSuggestionsVisibilityManager.displaySuggestions(false);\n            String keywords = getCurrentKeywordsString();\n            String[] words = keywords.split(\" \");\n            if (words.length > 0) {\n                String prefix = words[words.length - 1];\n                // Note that prefix == \"\" when user types an explicit character and taps the EditText\n                // We must not allow the user to avoid suggestions for the empty string prefix\n                // Otherwise, explicit mentions would be broken, see MOB-38080\n                if (prefix.length() > 0) {\n                    setAvoidedPrefix(prefix);\n                }\n            }\n        }\n        return superResult;\n    }\n```"], [871, "java", "Json.fromJson", "```java\npublic static Object fromJson(Type type, Reader reader)\r\n            throws JsonException {\r\n        return parse(type, reader);\r\n    }\n```"], [379, "java", "DefaultBoundSessionOfHashSetOperations.set", "```java\npublic Long set(HK key, Collection<HV> values) {\n        return ops.multiSet(getKey(), getField(), key, values);\n    }\n```"], [483, "java", "Node.back", "```java\nNode<E> back() {\n            Node<E> f = predecessor();\n            return (f == null || f.isSpecial()) ? null : f;\n        }\n```"], [292, "java", "PVector2DGenerator.createNormal", "```java\npublic static <T> Generator<PVector2D<T>> createNormal()\n  {\n    return new PVector2DGenerator<>(PrimitiveGenerators.doubles(\n      GeneratorConstants.BOUND_NORMAL_DOUBLE_LOWER,\n      GeneratorConstants.BOUND_NORMAL_DOUBLE_UPPER\n    ));\n  }\n```"], [54, "java", "IntMath.factorial", "```java\npublic static int factorial(int n) {\n    checkNonNegative(\"n\", n);\n    return (n < factorials.length) ? factorials[n] : Integer.MAX_VALUE;\n  }\n```"], [998, "java", "RandomizedBackoff.nextBackoff", "```java\n@Override\n  public long nextBackoff(int attempts, Throwable error) {\n    return _policy.nextBackoff(attempts, error) + _minRange + Math.round((_maxRange - _minRange) * ThreadLocalRandom.current().nextDouble());\n  }\n```"], [844, "java", "Striped.lazyWeakSemaphore", "```java\npublic static Striped<Semaphore> lazyWeakSemaphore(int stripes, final int permits) {\n    return lazy(\n        stripes,\n        new Supplier<Semaphore>() {\n          @Override\n          public Semaphore get() {\n            return new Semaphore(permits, false);\n          }\n        });\n  }\n```"], [528, "java", "ItemGroupAssert.assertDoesNotHaveDuplicates", "```java\nprotected final void assertDoesNotHaveDuplicates() {\n    isNotNull();\n    Collection<?> duplicates = duplicatesFrom(actualAsList());\n    if (duplicates.isEmpty()) {\n      return;\n    }\n    failIfCustomMessageIsSet();\n    throw failure(format(\"<%s> contains duplicate(s):<%s>\", actual, duplicates));\n  }\n```"], [854, "java", "Times.nextSecond", "```java\npublic static Date nextSecond(Date date, int second) {\r\n        Calendar cal = Calendar.getInstance();\r\n        if (date != null) {\r\n            cal.setTime(date);\r\n        }\r\n        cal.add(Calendar.SECOND, second);\r\n        return cal.getTime();\r\n    }\n```"], [937, "java", "Xmls.eachChildren", "```java\npublic static void eachChildren(Element ele,\n                                    String regex,\n                                    final Each<Element> callback,\n                                    int off) {\n        if (null == ele || null == callback)\n            return;\n\n        // \u6b63\u5219\u5f0f\n        final Pattern p = null == regex ? null : Pattern.compile(regex);\n\n        NodeList nl = ele.getChildNodes();\n\n        // \u5faa\u73af\u5b50\n        final int len = nl.getLength();\n\n        // \u6bcf\u6b21\u5faa\u73af\u6267\u884c\n        Callback2<Integer, Node> eachInvoke = new Callback2<Integer, Node>() {\n            public void invoke(Integer index, Node nd) {\n                if (nd instanceof Element)\n                    try {\n                        Element tag = (Element) nd;\n                        if (null == p || p.matcher(tag.getTagName()).find())\n                            callback.invoke(index, tag, len);\n                    }\n                    catch (ExitLoop e) {\n                        throw Lang.wrapThrow(e);\n                    }\n                    catch (ContinueLoop e) {}\n                    catch (LoopException e) {\n                        throw Lang.wrapThrow(e);\n                    }\n            }\n        };\n\n        try {\n            // \u8d1f\u5411\u8fed\u4ee3\n            if (off < 0) {\n                for (int i = len + off; i >= 0; i--) {\n                    eachInvoke.invoke(i, nl.item(i));\n                }\n            }\n            // \u6b63\u5411\u8fed\u4ee3\n            else {\n                for (int i = off; i < len; i++) {\n                    eachInvoke.invoke(i, nl.item(i));\n                }\n            }\n        }\n        catch (ExitLoop e) {}\n        catch (RuntimeException e) {\n            if (e.getCause() instanceof ExitLoop)\n                return;\n            else\n                throw e;\n        }\n    }\n```"], [65, "java", "JsonUnflattener.withSeparator", "```java\npublic JsonUnflattener withSeparator(char separator) {\n    isTrue(!Character.toString(separator).matches(\"[\\\"\\\\s]\"),\n        \"Separator contains illegal chracter(%s)\",\n        Character.toString(separator));\n    isTrue(!leftBracket.equals(separator) && !rightBracket.equals(separator),\n        \"Separator(%s) is already used in brackets\",\n        Character.toString(separator));\n\n    this.separator = separator;\n    return this;\n  }\n```"], [437, "java", "PopupAppRegistrationHandler.handleRegistrationRequest", "```java\n@Override\n    public void handleRegistrationRequest(Context context, AppDescriptor descriptor, final Callback callback) {\n        final DialogView dialogView = new DialogView(context, descriptor);\n\n        Dialog dialog = new AlertDialog.Builder(context).setPositiveButton(R.string.app_permission_dialog_allow, new AlertDialog.OnClickListener() {\n\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                callback.onRequestAccepted(dialogView.getSelectedPersona());\n            }\n        }).setNegativeButton(R.string.app_permission_dialog_deny, new AlertDialog.OnClickListener() {\n\n            @Override\n            public void onClick(DialogInterface dialog, int which) {\n                callback.onRequestRefused();\n            }\n        }).setView(dialogView.getView()).create();\n\n\n        /*\n         * Workaround to fix the crash:\n\t\t * android.view.WindowManager$BadTokenException: Unable to add window\n\t\t * android.view.ViewRootImpl$W@3d67307 -- permission denied for this window type\n\t\t * that appears only on Android 6.0 Marshmallow or greater.\n\t\t * Start a dialog fragment to explain the procedure to the user.\n\t\t * When the user accepts, onClickOnUnderstoodButton() will be called.\n\t\t */\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            //if android MarshMallow or greater\n            if (Settings.canDrawOverlays(context)) {\n                dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n                dialog.show();\n            } else {\n                //to prevent a crash\n                Toast.makeText(context, \"You must activate SPF!\", Toast.LENGTH_SHORT).show();\n            }\n        } else {\n            //other older Android's versions\n            dialog.getWindow().setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT);\n            dialog.show();\n        }\n    }\n```"], [438, "java", "Themes.getColor", "```java\npublic static int getColor(Context context, @AttrRes int attrId) {\n        int color = 0;\n        TypedArray a = context.obtainStyledAttributes(new int[]{attrId});\n        try {\n            color = a.getColor(0, 0);\n        } catch (UnsupportedOperationException e) {\n            error(\"color\", attrId, e);\n        }\n        a.recycle();\n        return color;\n    }\n```"], [504, "java", "ReflectionHelper.getGetterPropertyName", "```java\npublic static String getGetterPropertyName(Member member) {\n        if (member instanceof Field) {\n            return member.getName();\n        } else if (member instanceof Method) {\n            String methodName = member.getName();\n            for (String prefix : PROPERTY_ACCESSOR_PREFIXES) {\n                if (methodName.startsWith(prefix)) {\n                    return decapitalizePropertyName(methodName.substring(prefix.length()));\n                }\n            }\n        }\n        return null;\n    }\n```"], [127, "java", "MenuTree.setDefault", "```java\npublic void setDefault(final UUID _selectCmdUUID)\n    {\n        final UIMenuItem menuItem = getProvider().getRoots().next();\n        menuItem.setHeader(true);\n        boolean hasDefault = false;\n        for (final UIMenuItem childItem : menuItem.getChildren()) {\n            if (_selectCmdUUID == null && childItem.isDefaultSelected()\n                            || _selectCmdUUID != null && _selectCmdUUID.equals(childItem.getCommandUUID())) {\n                hasDefault = true;\n                childItem.setSelected(true);\n            }\n        }\n        if (!hasDefault) {\n            menuItem.setSelected(true);\n        }\n        expand(menuItem);\n        expandChildren(menuItem);\n    }\n```"], [167, "java", "Mono.timeout", "```java\npublic final Mono<T> timeout(Duration timeout, Mono<? extends T> fallback) {\n\t\treturn timeout(timeout, fallback, Schedulers.parallel());\n\t}\n```"], [636, "java", "Maps.transformEntry", "```java\nstatic <V2, K, V1> Entry<K, V2> transformEntry(\n      final EntryTransformer<? super K, ? super V1, V2> transformer, final Entry<K, V1> entry) {\n    checkNotNull(transformer);\n    checkNotNull(entry);\n    return new AbstractMapEntry<K, V2>() {\n      @Override\n      public K getKey() {\n        return entry.getKey();\n      }\n\n      @Override\n      public V2 getValue() {\n        return transformer.transformEntry(entry.getKey(), entry.getValue());\n      }\n    };\n  }\n```"], [821, "java", "Record.get", "```java\npublic Object get(Object name) {\r\n        if (null == name)\r\n            return null;\r\n        return map.get(name.toString().toLowerCase());\r\n    }\n```"], [770, "java", "VotesClass.getBillsBySponsorYear", "```java\npublic Bills getBillsBySponsorYear(String candidateId, String year) throws VoteSmartException, VoteSmartErrorException {\r\n\t\treturn api.query(\"Votes.getBillsBySponsorYear\", new ArgMap(\"candidateId\", candidateId, \"year\", year), Bills.class );\r\n\t}\n```"], [685, "java", "Resources.asCharSource", "```java\npublic static CharSource asCharSource(URL url, Charset charset) {\n    return asByteSource(url).asCharSource(charset);\n  }\n```"], [135, "java", "SchematronResourcePure.validateCompletely", "```java\npublic void validateCompletely (@Nonnull final IPSErrorHandler aErrorHandler)\n  {\n    ValueEnforcer.notNull (aErrorHandler, \"ErrorHandler\");\n\n    try\n    {\n      getOrCreateBoundSchema ().getOriginalSchema ().validateCompletely (aErrorHandler);\n    }\n    catch (final RuntimeException ex)\n    {\n      // May happen when XPath errors are contained\n    }\n  }\n```"], [838, "java", "ShadowArscAssetManager9.nativeThemeCopy", "```java\n@Implementation(minSdk = Build.VERSION_CODES.Q)\n  protected static void nativeThemeCopy(long dst_asset_manager_ptr, long dst_theme_ptr,\n      long src_asset_manager_ptr, long src_theme_ptr) {\n    Theme dst_theme = Registries.NATIVE_THEME9_REGISTRY.getNativeObject(dst_theme_ptr);\n    Theme src_theme = Registries.NATIVE_THEME9_REGISTRY.getNativeObject(src_theme_ptr);\n\n    if (dst_asset_manager_ptr != src_asset_manager_ptr) {\n      CppAssetManager2 dst_assetmanager = AssetManagerFromLong(dst_asset_manager_ptr);\n      CHECK(dst_theme.GetAssetManager() == dst_assetmanager);\n\n      CppAssetManager2 src_assetmanager = AssetManagerFromLong(src_asset_manager_ptr);\n      CHECK(src_theme.GetAssetManager() == src_assetmanager);\n\n      dst_theme.SetTo(src_theme);\n    } else {\n      dst_theme.SetTo(src_theme);\n    }\n  }\n```"], [25, "java", "BcelUtil.accessFlagsToString", "```java\nstatic String accessFlagsToString(Method m) {\n\n    int flags = m.getAccessFlags();\n\n    StringBuilder buf = new StringBuilder();\n    // Note that pow is a binary mask for the flag (= 2^i).\n    for (int i = 0, pow = 1; i <= Const.MAX_ACC_FLAG; i++) {\n      if ((flags & pow) != 0) {\n        if (buf.length() > 0) {\n          buf.append(\" \");\n        }\n        if (i < Const.ACCESS_NAMES_LENGTH) {\n          buf.append(Const.getAccessName(i));\n        } else {\n          buf.append(String.format(\"ACC_BIT(%x)\", pow));\n        }\n      }\n      pow <<= 1;\n    }\n\n    return buf.toString();\n  }\n```"], [872, "java", "Collections2.filter", "```java\npublic static <E> Collection<E> filter(Collection<E> unfiltered, Predicate<? super E> predicate) {\n    if (unfiltered instanceof FilteredCollection) {\n      // Support clear(), removeAll(), and retainAll() when filtering a filtered\n      // collection.\n      return ((FilteredCollection<E>) unfiltered).createCombined(predicate);\n    }\n\n    return new FilteredCollection<E>(checkNotNull(unfiltered), checkNotNull(predicate));\n  }\n```"], [326, "java", "Chronos.runBroadcast", "```java\n@NonNull\n    public static <Output> ChronosOperationResult<Output> runBroadcast(\n            @NonNull final ChronosOperation<Output> operation) {\n        return ChronosService.getInstance().runSync(operation, true);\n    }\n```"], [604, "java", "XmlToXsdExtensions.xmlToXsd", "```java\npublic static void xmlToXsd(final File xmlInputFile, final File xsdOutFile,\n\t\tfinal Inst2XsdOptions inst2XsdOptions) throws XmlException, IOException\n\t{\n\t\txmlToXsd(xmlInputFile, xsdOutFile, inst2XsdOptions, new XmlOptions().setSavePrettyPrint());\n\t}\n```"]]}, "_runtime": 6303.691757678986, "_timestamp": 1581458605.0936143, "_step": 485}
